/// <reference types="react" />
import { SimpleTagPropsT, CustomEventT } from '@rmwc/base';
import { FoundationComponent } from '@rmwc/base';
export declare type SliderPropsT = {
    /** A callback that fires when the Slider stops sliding which takes an event with event.detail.value set to the Slider's value. */
    onChange?: (evt: CustomEventT<{
        value: number;
    }>) => any;
    /** A callback that fires continuously while the Slider is sliding that takes an event with event.detail.value set to the Slider's value. */
    onInput?: (evt: CustomEventT<{
        value: number;
    }>) => any;
    /** The value of the Slider. */
    value?: number | string;
    /** The minimum value of the Slider. */
    min?: number | string;
    /** The maximum value of the Slider. */
    max?: number | string;
    /** A step to quantize values by. */
    step?: number | string;
    /** Displays the exact value of the Slider on the knob. */
    discrete?: boolean;
    /** Displays the individual step markers on the Slider track. */
    displayMarkers?: boolean;
    /** Disables the control. */
    disabled?: boolean;
} & SimpleTagPropsT;
declare type SliderState = {
    trackMarkersCount: number;
};
export declare class Slider extends FoundationComponent<SliderPropsT, SliderState> {
    state: {
        trackMarkersCount: number;
        pinContainerStyle: {};
    };
    root_: HTMLElement | null;
    track_: HTMLElement | null;
    pinValueMarker_: HTMLElement | null;
    thumbContainer_: HTMLElement | null;
    constructor(props: SliderPropsT);
    /** @return {number} */
    /** @param {number} value */
    value: number;
    /** @return {number} */
    /** @param {number} min */
    min: number;
    /** @return {number} */
    /** @param {number} max */
    max: number;
    /** @return {number} */
    /** @param {number} step */
    step: number;
    /** @return {boolean} */
    /** @param {boolean} disabled */
    disabled: boolean;
    discrete: boolean;
    displayMarkers: boolean;
    layout(): void;
    sync(nextProps: SliderPropsT): void;
    getDefaultFoundation(): any;
    render(): JSX.Element;
}
export default Slider;
