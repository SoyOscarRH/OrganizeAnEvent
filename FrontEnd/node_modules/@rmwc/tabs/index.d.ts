import { SimpleTagPropsT, CustomEventT } from '@rmwc/base';
import { IconPropsT } from '@rmwc/icon';
import * as React from 'react';
/************************************************************
 * TabBar
 ************************************************************/
export declare type TabBarEventDetailT = {
    index: number;
};
export declare type TabBarPropsT = {
    /** Callback when the active tab changes. Receives event as an argument with event.target.value set to the activeTabIndex. */
    onActivate?: (evt: CustomEventT<TabBarEventDetailT>) => any;
    /** The index of the active tab. */
    activeTabIndex?: number;
} & SimpleTagPropsT;
export declare const TabBarRoot: React.ComponentType<SimpleTagPropsT>;
export declare const TabScroller: React.ComponentType<SimpleTagPropsT>;
export declare const TabScrollerScrollArea: React.ComponentType<SimpleTagPropsT>;
export declare const TabScrollerScrollContent: React.ComponentType<SimpleTagPropsT>;
declare const TabBar_base: {
    new <P>(props: P & {
        tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
        wrap?: boolean | undefined;
        elementRef?: any;
        theme?: string | string[] | undefined;
        apiRef?: (<S>(api: S) => S) | undefined;
    } & React.HTMLAttributes<any> & React.HTMLProps<any>): {
        foundation_: {
            [key: string]: any;
            adapter_: any;
            init: Function;
            destroy: Function;
        } | null;
        foundationRefs: {
            [name: string]: (ref: HTMLElement) => any;
        };
        root_: Element | Text | null;
        props: P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>;
        componentDidMount(): void;
        componentWillReceiveProps(nextProps: P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>): void;
        componentWillUnmount(): void;
        _safeSyncWithProps(props: Object): void;
        initFoundation(): void;
        destroyComponent(): void;
        syncWithProps(nextProps: Object): void;
        initialize(...args: any[]): void;
        initialSyncWithDOM(): void;
        destroy(): void;
        /************************************************************
         * Tab
         ************************************************************/
        getDefaultFoundation(): {
            adapter_: {};
            init: () => void;
            destroy: () => void;
        };
        emit(evtType: string, evtData: Object, shouldBubble?: boolean, sync?: boolean): any;
        listen(evtType: string, handler: Function): void;
        unlisten(evtType: string, handler: Function): void;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        render(): React.ReactNode;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
};
/** The TabBar component */
export declare class TabBar extends TabBar_base<TabBarPropsT> {
    static displayName: string;
    activeTabIndex: number;
    tabList_: any;
    tabFactory_: Function;
    getTabElements_: Function;
    layout: Function;
    activateTab: Function;
    root_: any;
    syncWithProps(nextProps: TabBarPropsT): void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: TabBarPropsT): void;
    render(): JSX.Element;
}
/************************************************************
 * Tab
 ************************************************************/
export declare type TabPropsT = {
    /** A label for the tab. */
    label?: React.ReactNode;
    /** The label for the tab, passed as children. */
    children?: React.ReactNode;
    /** The icon to use for the tab. */
    icon?: React.ReactNode;
    /** Stacks the icon on top of the text label */
    stacked?: boolean;
    /** Restricts the indicator to the content */
    restrictIndicator?: boolean;
} & IconPropsT & SimpleTagPropsT;
export declare const TabRoot: React.ComponentType<TabPropsT>;
export declare class TabIndicator extends React.PureComponent<{}> {
    render(): JSX.Element;
}
/** A Tab icon. This is an instance of the Icon component. */
export declare const TabIcon: React.ComponentType<IconPropsT>;
/** A Tab component */
export declare const Tab: React.ComponentType<TabPropsT>;
export {};
