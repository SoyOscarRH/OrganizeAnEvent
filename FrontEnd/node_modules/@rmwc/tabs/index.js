'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tab = exports.TabIcon = exports.TabIndicator = exports.TabRoot = exports.TabBar = exports.TabScrollerScrollContent = exports.TabScrollerScrollArea = exports.TabScroller = exports.TabBarRoot = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _mdc = require('@material/tab-bar/dist/mdc.tabBar');

var _icon = require('@rmwc/icon');

var _base = require('@rmwc/base');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/************************************************************
 * TabBar
 ************************************************************/
var TabBarRoot = exports.TabBarRoot = (0, _base.simpleTag)({
  displayName: 'TabBarRoot',
  tag: 'nav',
  classNames: function classNames(props) {
    return ['mdc-tab-bar', {
      'mdc-tab-scroller__scroll-frame__tabs': props.isTabScroller
    }];
  },
  consumeProps: ['isTabScroller']
});

var TabScroller = exports.TabScroller = (0, _base.simpleTag)({
  displayName: 'TabScroller',
  classNames: 'mdc-tab-scroller'
});

var TabScrollerScrollArea = exports.TabScrollerScrollArea = (0, _base.simpleTag)({
  displayName: 'TabScrollerScrollArea',
  classNames: 'mdc-tab-scroller__scroll-area'
});

var TabScrollerScrollContent = exports.TabScrollerScrollContent = (0, _base.simpleTag)({
  displayName: 'TabScrollerScrollContent',
  classNames: 'mdc-tab-scroller__scroll-content'
});

/** The TabBar component */

var TabBar = exports.TabBar = function (_withFoundation) {
  _inherits(TabBar, _withFoundation);

  function TabBar() {
    _classCallCheck(this, TabBar);

    return _possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).apply(this, arguments));
  }

  _createClass(TabBar, [{
    key: 'syncWithProps',
    value: function syncWithProps(nextProps) {
      var _this2 = this;

      // request animation frame required to avoid test failure issues
      window.requestAnimationFrame(function () {
        (0, _base.syncFoundationProp)(nextProps.activeTabIndex, _this2.activeTabIndex, function () {
          return _this2.foundation_ && _this2.activateTab(nextProps.activeTabIndex);
        });
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this3 = this;

      _get(TabBar.prototype.__proto__ || Object.getPrototypeOf(TabBar.prototype), 'componentDidMount', this).call(this);

      // This corrects an issue where passing in 0 or no activeTabIndex
      // causes the first tab of the set to not be active
      // request animation frame required to avoid test failure issues
      window.requestAnimationFrame(function () {
        // to make this even more annoying, Tabs focus by default
        var activeElement = window.document.activeElement;
        var _ref = [window.scrollX, window.scrollY],
            scrollX = _ref[0],
            scrollY = _ref[1];

        //activate the tab

        _this3.foundation_ && _this3.activateTab(_this3.props.activeTabIndex || 0);

        // restore focus and scroll
        activeElement && activeElement.focus();
        window.scrollTo(scrollX, scrollY);
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _this4 = this;

      // Children changing is a pain...
      // We have to perform a lot of cleanup and sometimes we have to reinit
      var childrenDidChange = prevProps && prevProps.children && this.props && this.props.children && JSON.stringify(React.Children.map(prevProps.children, function (child) {
        return child && child.key || {};
      })) !== JSON.stringify(React.Children.map(this.props.children, function (child) {
        return child && child.key || {};
      }));

      var tabsLengthMismatch = React.Children.toArray(this.props.children).length !== this.tabList_.length;

      if (childrenDidChange || tabsLengthMismatch) {
        this.tabList_.forEach(function (mdcTab) {
          mdcTab.foundation_ && mdcTab.foundation_.destroy();
        });
        this.tabList_ = this.getTabElements_().map(function (el) {
          return _this4.tabFactory_(el);
        });
        this.syncWithProps(this.props);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          activeTabIndex = _props.activeTabIndex,
          apiRef = _props.apiRef,
          onActivate = _props.onActivate,
          rest = _objectWithoutProperties(_props, ['children', 'activeTabIndex', 'apiRef', 'onActivate']);

      var root_ = this.foundationRefs.root_;


      return React.createElement(
        TabBarRoot,
        Object.assign({}, rest, { elementRef: root_ }),
        React.createElement(
          TabScroller,
          null,
          React.createElement(
            TabScrollerScrollArea,
            null,
            React.createElement(
              TabScrollerScrollContent,
              null,
              children
            )
          )
        )
      );
    }
  }]);

  return TabBar;
}((0, _base.withFoundation)({
  constructor: _mdc.MDCTabBar,
  adapter: {
    deactivateTabAtIndex: function deactivateTabAtIndex(index) {
      return this.tabList_[index] && this.tabList_[index].deactivate();
    },
    getTabIndicatorClientRectAtIndex: function getTabIndicatorClientRectAtIndex(index) {
      return this.tabList_[index] && this.tabList_[index].computeIndicatorClientRect();
    }
  }
}));

/************************************************************
 * Tab
 ************************************************************/


Object.defineProperty(TabBar, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'TabBar'
});
var TabRoot = exports.TabRoot = (0, _base.simpleTag)({
  displayName: 'TabRoot',
  tag: 'button',
  classNames: function classNames(props) {
    return ['mdc-tab', {
      'mdc-tab--stacked': props.stacked
    }];
  },
  consumeProps: ['stacked']
});

var TabIndicator = exports.TabIndicator = function (_React$PureComponent) {
  _inherits(TabIndicator, _React$PureComponent);

  function TabIndicator() {
    _classCallCheck(this, TabIndicator);

    return _possibleConstructorReturn(this, (TabIndicator.__proto__ || Object.getPrototypeOf(TabIndicator)).apply(this, arguments));
  }

  _createClass(TabIndicator, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        'span',
        { className: 'mdc-tab-indicator' },
        React.createElement('span', { className: 'mdc-tab-indicator__content mdc-tab-indicator__content--underline' })
      );
    }
  }]);

  return TabIndicator;
}(React.PureComponent);

/** A Tab icon. This is an instance of the Icon component. */


var TabIcon = exports.TabIcon = (0, _base.simpleTag)({
  displayName: 'TabIcon',
  tag: _icon.Icon,
  classNames: 'mdc-tab__icon'
});

/** A Tab component */
var Tab = function Tab(_ref2) {
  var children = _ref2.children,
      label = _ref2.label,
      icon = _ref2.icon,
      iconOptions = _ref2.iconOptions,
      stacked = _ref2.stacked,
      restrictIndicator = _ref2.restrictIndicator,
      rest = _objectWithoutProperties(_ref2, ['children', 'label', 'icon', 'iconOptions', 'stacked', 'restrictIndicator']);

  return React.createElement(
    TabRoot,
    Object.assign({ stacked: stacked }, rest),
    React.createElement(
      'div',
      { className: 'mdc-tab__content' },
      !!icon && React.createElement(TabIcon, { icon: icon, iconOptions: iconOptions }),
      (children !== undefined || label !== undefined) && React.createElement(
        'span',
        { className: 'mdc-tab__text-label' },
        label,
        children
      ),
      !!restrictIndicator && React.createElement(TabIndicator, null)
    ),
    !restrictIndicator && React.createElement(TabIndicator, null),
    React.createElement('div', { className: 'mdc-tab__ripple' })
  );
};

exports.Tab = Tab;
Tab.displayName = 'Tab';
