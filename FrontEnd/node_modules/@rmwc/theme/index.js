'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThemeProvider = exports.Theme = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _base = require('@rmwc/base');

var _toDashCase = require('@rmwc/base/utils/to-dash-case');

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// prettier-ignore
var ThemeRoot = (0, _base.simpleTag)({
  tag: 'span'
});

/**
 * A Theme Component.
 */
var Theme = function Theme(_ref) {
  var use = _ref.use,
      rest = _objectWithoutProperties(_ref, ['use']);

  return React.createElement(ThemeRoot, Object.assign({ theme: use }, rest));
};

exports.Theme = Theme;
Theme.displayName = 'Theme';

/** A ThemeProvider. This sets theme colors for its child tree. */
var ThemeProvider = exports.ThemeProvider = function (_React$Component) {
  _inherits(ThemeProvider, _React$Component);

  function ThemeProvider() {
    var _ref2;

    var _temp, _this, _ret;

    _classCallCheck(this, ThemeProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = ThemeProvider.__proto__ || Object.getPrototypeOf(ThemeProvider)).call.apply(_ref2, [this].concat(args))), _this), Object.defineProperty(_this, 'prevOpts_', {
      enumerable: true,
      writable: true,
      value: ''
    }), Object.defineProperty(_this, 'colors_', {
      enumerable: true,
      writable: true,
      value: {}
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ThemeProvider, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          options = _props.options,
          _props$style = _props.style,
          style = _props$style === undefined ? {} : _props$style,
          wrap = _props.wrap,
          rest = _objectWithoutProperties(_props, ['options', 'style', 'wrap']);
      // Casting styles to avoid TSX error
      // $FlowFixMe


      var tsxSafeStyle = style;
      var themeStyles = Object.assign({}, tsxSafeStyle, this.colors);

      if (wrap && rest.children) {
        var child = React.Children.only(rest.children);
        var childStyle = child.props.style || {};

        return React.cloneElement(child, Object.assign({}, child.props, rest, {
          style: Object.assign({}, themeStyles, childStyle)
        }));
      }

      return React.createElement('div', Object.assign({}, rest, { style: themeStyles }));
    }
  }, {
    key: 'colors',
    get: function get() {
      var _this2 = this;

      // implement some caching to prevent the color checking from being called over and over again.
      var parsed = JSON.stringify(this.props.options);
      if (parsed !== this.prevOpts_) {
        this.prevOpts_ = parsed;

        var processedColors = Object.keys(this.props.options).reduce(function (acc, key) {
          var val = _this2.props.options[key];

          key = key.startsWith('--') ? key : '--mdc-theme-' + (0, _toDashCase.toDashCase)(key);
          acc[key] = val;
          return acc;
        }, {});

        this.colors_ = (0, _utils.getAutoColorsForTheme)(processedColors);
      }

      return this.colors_;
    }
  }]);

  return ThemeProvider;
}(React.Component);

Object.defineProperty(ThemeProvider, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'ThemeProvider'
});
