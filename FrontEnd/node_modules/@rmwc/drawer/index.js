'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Drawer = exports.DrawerRoot = exports.DrawerAppContent = exports.DrawerScrim = exports.DrawerContent = exports.DrawerSubtitle = exports.DrawerTitle = exports.DrawerHeader = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

require('./polyfill');

var _base = require('@rmwc/base');

var _mdc = require('@material/drawer/dist/mdc.drawer');

var _withFoundation2 = require('@rmwc/base/withFoundation');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/***************************************************************************************
 * Drawer Headers
 ***************************************************************************************/
/** An optional header for the Drawer. */
var DrawerHeader = exports.DrawerHeader = (0, _base.simpleTag)({
  displayName: 'DrawerHeader',
  classNames: 'mdc-drawer__header'
});

/** An title for the DrawerHeader. */
var DrawerTitle = exports.DrawerTitle = (0, _base.simpleTag)({
  displayName: 'DrawerTitle',
  classNames: 'mdc-drawer__title'
});

/** A subtitle for the DrawerHeader. */
var DrawerSubtitle = exports.DrawerSubtitle = (0, _base.simpleTag)({
  displayName: 'DrawerSubtitle',
  classNames: 'mdc-drawer__subtitle'
});

/***************************************************************************************
 * Drawer Content
 ***************************************************************************************/
/** Content for Drawers. Please note this is an instance of mdc-list by default. You can change this to a a non list container by specifying the tag as 'div' or anything else. */
var DrawerContent = exports.DrawerContent = (0, _base.simpleTag)({
  displayName: 'DrawerContent',
  classNames: 'mdc-drawer__content'
});

/***************************************************************************************
 * Drawer Scrim
 ***************************************************************************************/
/**
 * Protects the app's UI from interactions while a modal drawer is open.
 * This is automatically included if you're using React 16 and above.
 * For React 15, you must manually include it immediately after a modal Drawer.
 * */
var DrawerScrim = exports.DrawerScrim = function DrawerScrim() {
  return React.createElement('div', { className: 'mdc-drawer-scrim' });
};

/***************************************************************************************
 * DrawerAppContent
 ***************************************************************************************/
/** For the Dismissible variant only. Sibling element that is resized when the drawer opens/closes. */
var DrawerAppContent = exports.DrawerAppContent = (0, _base.simpleTag)({
  displayName: 'DrawerAppContent',
  classNames: 'mdc-drawer-app-content'
});

/***************************************************************************************
 * Drawers
 ***************************************************************************************/
var DrawerRoot = exports.DrawerRoot = (0, _base.simpleTag)({
  displayName: 'DrawerRoot',
  tag: 'aside',
  classNames: function classNames(props) {
    return ['mdc-drawer', {
      'mdc-drawer--dismissible': props.dismissible,
      'mdc-drawer--modal': props.modal
    }];
  },
  consumeProps: ['dismissible', 'modal']
});

var slidableDrawerFactory = function slidableDrawerFactory(MDCConstructor, displayName) {
  var _class, _temp;

  return _temp = _class = function (_withFoundation) {
    _inherits(_class, _withFoundation);

    function _class() {
      _classCallCheck(this, _class);

      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
    }

    _createClass(_class, [{
      key: 'initialize',
      value: function initialize() {
        //override to kill some abhorrent MDCWeb functionality...
      }
    }, {
      key: 'syncWithProps',
      value: function syncWithProps(nextProps) {
        var _this2 = this;

        // Open
        // MDC calls notify change before actually setting the Open value
        // which causes an infinite loop for reacts uni-directional data flow
        // The set timeout gives us a frame before we re-evaluate whether we are open
        setTimeout(function () {
          _this2.foundation_ && (0, _withFoundation2.syncFoundationProp)(nextProps.open, _this2.open, function () {
            return _this2.open = nextProps.open || false;
          });
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            onOpen = _props.onOpen,
            onClose = _props.onClose,
            open = _props.open,
            rest = _objectWithoutProperties(_props, ['onOpen', 'onClose', 'open']);

        var root_ = this.foundationRefs.root_;


        return React.createElement(DrawerRoot, Object.assign({ elementRef: root_ }, rest));
      }
    }]);

    return _class;
  }((0, _withFoundation2.withFoundation)({
    constructor: MDCConstructor,
    adapter: {}
  })), Object.defineProperty(_class, 'displayName', {
    enumerable: true,
    writable: true,
    value: displayName
  }), Object.defineProperty(_class, 'defaultProps', {
    enumerable: true,
    writable: true,
    value: {
      open: false,
      onOpen: _base.noop,
      onClose: _base.noop
    }
  }), _temp;
};

var ModalDrawer = slidableDrawerFactory(_mdc.MDCDrawer, 'ModalDrawer');

var DismissibleDrawer = slidableDrawerFactory(_mdc.MDCDrawer, 'dismissibleDrawer');

var Drawer = exports.Drawer = function Drawer(props) {
  if (props.dismissible) {
    return React.createElement(DismissibleDrawer, props);
  }

  if (props.modal) {
    if (React.Fragment !== undefined) {
      return React.createElement(
        React.Fragment,
        null,
        React.createElement(ModalDrawer, props),
        React.createElement(DrawerScrim, null)
      );
    } else {
      return React.createElement(ModalDrawer, props);
    }
  }

  return React.createElement(DrawerRoot, props);
};

Drawer.displayName = 'Drawer';
