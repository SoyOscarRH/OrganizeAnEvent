'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotchedOutline = exports.NotchedOutlineIdle = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _base = require('@rmwc/base');

var _mdc = require('@material/notched-outline/dist/mdc.notchedOutline');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NotchedOutlineIdle = exports.NotchedOutlineIdle = function (_React$Component) {
  _inherits(NotchedOutlineIdle, _React$Component);

  function NotchedOutlineIdle() {
    _classCallCheck(this, NotchedOutlineIdle);

    return _possibleConstructorReturn(this, (NotchedOutlineIdle.__proto__ || Object.getPrototypeOf(NotchedOutlineIdle)).apply(this, arguments));
  }

  _createClass(NotchedOutlineIdle, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', { className: 'mdc-notched-outline__idle' });
    }
  }]);

  return NotchedOutlineIdle;
}(React.Component);

var NotchedOutline = exports.NotchedOutline = function (_FoundationComponent) {
  _inherits(NotchedOutline, _FoundationComponent);

  function NotchedOutline(props) {
    _classCallCheck(this, NotchedOutline);

    var _this2 = _possibleConstructorReturn(this, (NotchedOutline.__proto__ || Object.getPrototypeOf(NotchedOutline)).call(this, props));

    _this2.createClassList('root_');
    _this2.createPropsList('root_');
    return _this2;
  }

  _createClass(NotchedOutline, [{
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this3 = this;

      return new _mdc.MDCNotchedOutlineFoundation({
        getWidth: function getWidth() {
          return _this3.root_ && _this3.root_.offsetWidth;
        },
        getHeight: function getHeight() {
          return _this3.root_ && _this3.root_.offsetHeight;
        },
        addClass: function addClass(className) {
          return _this3.classList.root_.add(className);
        },
        removeClass: function removeClass(className) {
          return _this3.classList.root_.remove(className);
        },
        setOutlinePathAttr: function setOutlinePathAttr(value) {
          return _this3.path_ && _this3.path_.setAttribute('d', value);
        },

        getIdleOutlineStyleValue: function getIdleOutlineStyleValue(propertyName) {
          if (_this3.root_) {
            var idleOutlineElement = _this3.root_.nextElementSibling;
            if (!idleOutlineElement) return undefined;
            return window.getComputedStyle(idleOutlineElement).getPropertyValue(propertyName);
          }
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      return React.createElement(
        'div',
        Object.assign({}, this.props, this.propsList.root_.all(), {
          ref: function ref(_ref2) {
            return _this4.root_ = _ref2;
          },
          className: 'mdc-notched-outline ' + this.classList.root_.renderToString()
        }),
        React.createElement(
          'svg',
          null,
          React.createElement('path', {
            className: 'mdc-notched-outline__path',
            ref: function ref(_ref) {
              return _this4.path_ = _ref;
            }
          })
        )
      );
    }
  }]);

  return NotchedOutline;
}(_base.FoundationComponent);

Object.defineProperty(NotchedOutline, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'NotchedOutline'
});
