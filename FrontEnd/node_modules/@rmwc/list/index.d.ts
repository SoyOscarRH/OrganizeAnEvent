import { SimpleTagPropsT } from '@rmwc/base';
import { WithRipplePropsT } from '@rmwc/ripple';
import { RMWCProviderOptionsT } from '@rmwc/provider';
import { IconPropsT } from '@rmwc/icon';
import * as React from 'react';
import * as PropTypes from 'prop-types';
export declare type ListItemPropsT = {
    /** A modifier for a selected state. */
    selected?: boolean;
    /** A modifier for an active state. */
    activated?: boolean;
    /** A modifier for a disabled state. */
    disabled?: boolean;
    /** Enable / disable the ripple. */
    ripple?: boolean;
} & SimpleTagPropsT & WithRipplePropsT;
export declare const ListItemRoot: {
    new (props: Readonly<any>): {
        render(): JSX.Element;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<any>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<any>;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    new (props: any, context?: any): {
        render(): JSX.Element;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<any>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<any>;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    displayName: string;
    defaultProps: {
        ripple: boolean;
    };
};
/**
 * The ListItem component.
 */
export declare class ListItem extends React.Component<ListItemPropsT> {
    static displayName: string;
    static defaultProps: {
        ripple: boolean;
        tabIndex: number;
    };
    static contextTypes: {
        RMWCOptions: PropTypes.Requireable<object>;
    };
    componentWillMount(): void;
    providerOptions: RMWCProviderOptionsT;
    context: Object;
    render(): JSX.Element;
}
/** Text Wrapper for the ListItem */
export declare const ListItemText: React.ComponentType<SimpleTagPropsT>;
/** Primary Text for the ListItem */
export declare const ListItemPrimaryText: React.ComponentType<SimpleTagPropsT>;
/** Secondary text for the ListItem */
export declare const ListItemSecondaryText: React.ComponentType<SimpleTagPropsT>;
/** A graphic / icon for the ListItem */
export declare const ListItemGraphic: React.ComponentType<IconPropsT>;
/** A meta icon for the ListItem. By default this is an icon component. If you need to render text, specify a tag="span" and basename="" to ensure proper rendering. See the examples above.*/
export declare const ListItemMeta: ({ className, icon, ...rest }: {
    className?: string | undefined;
    icon?: React.ReactNode;
}) => JSX.Element;
/** A container to group ListItems */
export declare const ListGroup: React.ComponentType<SimpleTagPropsT>;
/** A subheader for the ListGroup */
export declare const ListGroupSubheader: React.ComponentType<SimpleTagPropsT>;
/** A divider for the List */
export declare const ListDivider: React.ComponentType<SimpleTagPropsT>;
export declare type ListPropsT = {
    /** Reduces the padding on List items. */
    dense?: boolean;
    /** Gives more space for dual lined list items. */
    twoLine?: boolean;
    /** Makes the list start detail circular for avatars. */
    avatarList?: boolean;
    /** Makes the list non interactive. In addition, you'll have to set `ripple={false}` on the individual ListItems. */
    nonInteractive?: boolean;
} & SimpleTagPropsT;
/** A List Component */
export declare const List: React.ComponentType<ListPropsT>;
export declare type SimpleListItemPropsT = {
    /** Text for the ListItem. */
    text?: React.ReactNode;
    /** Secondary Text for the ListItem. */
    secondaryText?: React.ReactNode;
    /** A graphic icon for the ListItem. */
    graphic?: React.ReactNode;
    /** A meta icon for the ListItem */
    meta?: React.ReactNode;
    /** Children to render */
    children?: React.ReactNode;
} & ListItemPropsT;
export declare const SimpleListItem: React.ComponentType<SimpleListItemPropsT>;
