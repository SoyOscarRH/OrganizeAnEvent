'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleListItem = exports.List = exports.ListDivider = exports.ListGroupSubheader = exports.ListGroup = exports.ListItemMeta = exports.ListItemGraphic = exports.ListItemSecondaryText = exports.ListItemPrimaryText = exports.ListItemText = exports.ListItem = exports.ListItemRoot = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _propTypes = require('prop-types');

var PropTypes = _interopRequireWildcard(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _provider = require('@rmwc/provider');

var _base = require('@rmwc/base');

var _ripple = require('@rmwc/ripple');

var _icon = require('@rmwc/icon');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListItemRoot = exports.ListItemRoot = (0, _ripple.withRipple)()((0, _base.simpleTag)({
  displayName: 'ListItemRoot',
  classNames: function classNames(props) {
    return ['mdc-list-item', {
      'mdc-list-item--selected': props.selected,
      'mdc-list-item--activated': props.activated,
      'mdc-list-item--disabled': props.disabled
    }];
  },
  consumeProps: ['selected', 'activated', 'disabled', 'options'] //options is from the select element
}));

/**
 * The ListItem component.
 */

var ListItem = exports.ListItem = function (_React$Component) {
  _inherits(ListItem, _React$Component);

  function ListItem() {
    _classCallCheck(this, ListItem);

    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
  }

  _createClass(ListItem, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.providerOptions = (0, _provider.getProviderOptions)(this.context);
    }
  }, {
    key: 'render',
    value: function render() {
      var listItemDefaultRipple = this.providerOptions.listItemDefaultRipple;

      var _props = this.props,
          ripple = _props.ripple,
          rest = _objectWithoutProperties(_props, ['ripple']);

      var shouldRipple = ripple === undefined ? listItemDefaultRipple : ripple;

      return React.createElement(ListItemRoot, Object.assign({ ripple: shouldRipple }, rest));
    }
  }]);

  return ListItem;
}(React.Component);

/** Text Wrapper for the ListItem */


Object.defineProperty(ListItem, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'ListItem'
});
Object.defineProperty(ListItem, 'defaultProps', {
  enumerable: true,
  writable: true,
  value: {
    ripple: true,
    tabIndex: 0
  }
});
Object.defineProperty(ListItem, 'contextTypes', {
  enumerable: true,
  writable: true,
  value: {
    RMWCOptions: PropTypes.object
  }
});
var ListItemText = exports.ListItemText = (0, _base.simpleTag)({
  displayName: 'ListItemText',
  tag: 'span',
  classNames: 'mdc-list-item__text'
});

/** Primary Text for the ListItem */
var ListItemPrimaryText = exports.ListItemPrimaryText = (0, _base.simpleTag)({
  displayName: 'ListItemPrimaryText',
  tag: 'span',
  classNames: 'mdc-list-item__primary-text'
});

/** Secondary text for the ListItem */
var ListItemSecondaryText = exports.ListItemSecondaryText = (0, _base.simpleTag)({
  displayName: 'ListItemSecondaryText',
  tag: 'span',
  classNames: 'mdc-list-item__secondary-text'
});

/** A graphic / icon for the ListItem */
var ListItemGraphic = exports.ListItemGraphic = (0, _base.simpleTag)({
  displayName: 'ListItemGraphic',
  classNames: 'mdc-list-item__graphic',
  tag: _icon.Icon
});

var ListItemMetaRoot = (0, _base.simpleTag)({
  displayName: 'ListItemMetaRoot',
  tag: 'span'
});

/** A meta icon for the ListItem. By default this is an icon component. If you need to render text, specify a tag="span" and basename="" to ensure proper rendering. See the examples above.*/
var ListItemMeta = function ListItemMeta(_ref) {
  var className = _ref.className,
      icon = _ref.icon,
      rest = _objectWithoutProperties(_ref, ['className', 'icon']);

  var classes = (0, _classnames2.default)('mdc-list-item__meta', className);
  if (icon) {
    return React.createElement(_icon.Icon, Object.assign({ icon: icon, className: classes }, rest));
  }

  return React.createElement(ListItemMetaRoot, Object.assign({ className: classes }, rest));
};

/** A container to group ListItems */
exports.ListItemMeta = ListItemMeta;
var ListGroup = exports.ListGroup = (0, _base.simpleTag)({
  displayName: 'ListGroup',
  classNames: 'mdc-list-group'
});

/** A subheader for the ListGroup */
var ListGroupSubheader = exports.ListGroupSubheader = (0, _base.simpleTag)({
  displayName: 'ListGroupSubheader',
  classNames: 'mdc-list-group__subheader'
});

/** A divider for the List */
var ListDivider = exports.ListDivider = (0, _base.simpleTag)({
  displayName: 'ListDivider',
  classNames: 'mdc-list-divider'
});

var ListRoot = (0, _base.simpleTag)({
  displayName: 'ListRoot',
  defaultProps: {
    dense: undefined,
    twoLine: undefined,
    avatarList: undefined,
    nonInteractive: undefined
  },
  classNames: function classNames(props) {
    return ['mdc-list', {
      'mdc-list--dense': props.dense,
      'mdc-list--two-line': props.twoLine,
      'mdc-list--avatar-list': props.avatarList,
      'mdc-list--non-interactive': props.nonInteractive
    }];
  },
  consumeProps: ['dense', 'twoLine', 'avatarList', 'nonInteractive']
});

/** A List Component */
var List = exports.List = function List(props) {
  return React.createElement(ListRoot, props);
};
List.displayName = 'List';

var SimpleListItem = function SimpleListItem(_ref2) {
  var text = _ref2.text,
      secondaryText = _ref2.secondaryText,
      graphic = _ref2.graphic,
      meta = _ref2.meta,
      children = _ref2.children,
      rest = _objectWithoutProperties(_ref2, ['text', 'secondaryText', 'graphic', 'meta', 'children']);

  var primaryTextToRender = text && secondaryText !== undefined ? React.createElement(
    ListItemPrimaryText,
    null,
    text
  ) : text;

  var secondaryTextToRender = secondaryText !== undefined ? React.createElement(
    ListItemSecondaryText,
    null,
    secondaryText
  ) : null;

  return React.createElement(
    ListItem,
    rest,
    graphic !== undefined && React.createElement(ListItemGraphic, { icon: graphic }),
    secondaryTextToRender !== null ? React.createElement(
      ListItemText,
      null,
      primaryTextToRender,
      secondaryTextToRender
    ) : primaryTextToRender,
    meta !== undefined && React.createElement(ListItemMeta, { icon: meta }),
    children
  );
};

exports.SimpleListItem = SimpleListItem;
SimpleListItem.displayName = 'SimpleListItem';
