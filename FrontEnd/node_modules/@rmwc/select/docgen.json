[
  {
    "description": "",
    "displayName": "SelectRoot",
    "methods": [
      {
        "name": "classNames",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": {
              "name": "intersection",
              "raw": "{\n  /** The value for a controlled select. */\n  value?: mixed,\n  /** Options accepts flat arrays, value => label maps, and more. See examples for details. */\n  options?: string[] | { [value: string]: string } | any[],\n  /** A label for the form control. */\n  label?: string,\n  /** Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label. */\n  placeholder?: string,\n  /** Makes the select outlined. */\n  outlined?: boolean,\n  /** Disables the form control. */\n  disabled?: boolean,\n  /** Props for the root element. By default, additional props spread to the native select element.  */\n  rootProps?: Object,\n  /** A className for the root element. */\n  className?: string,\n  /** Styles to be applied to the root of the component. */\n  style?: Object\n} & SimpleTagPropsT &\n  //$FlowFixMe\n  React.InputHTMLAttributes<HTMLInputElement>",
              "elements": [
                {
                  "name": "signature",
                  "type": "object",
                  "raw": "{\n  /** The value for a controlled select. */\n  value?: mixed,\n  /** Options accepts flat arrays, value => label maps, and more. See examples for details. */\n  options?: string[] | { [value: string]: string } | any[],\n  /** A label for the form control. */\n  label?: string,\n  /** Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label. */\n  placeholder?: string,\n  /** Makes the select outlined. */\n  outlined?: boolean,\n  /** Disables the form control. */\n  disabled?: boolean,\n  /** Props for the root element. By default, additional props spread to the native select element.  */\n  rootProps?: Object,\n  /** A className for the root element. */\n  className?: string,\n  /** Styles to be applied to the root of the component. */\n  style?: Object\n}",
                  "signature": {
                    "properties": [
                      {
                        "key": "value",
                        "value": {
                          "name": "mixed",
                          "required": false
                        }
                      },
                      {
                        "key": "options",
                        "value": {
                          "name": "union",
                          "raw": "string[] | { [value: string]: string } | any[]",
                          "elements": [
                            {
                              "name": "Array",
                              "elements": [
                                {
                                  "name": "string"
                                }
                              ],
                              "raw": "string[]"
                            },
                            {
                              "name": "signature",
                              "type": "object",
                              "raw": "{ [value: string]: string }",
                              "signature": {
                                "properties": [
                                  {
                                    "key": {
                                      "name": "string"
                                    },
                                    "value": {
                                      "name": "string",
                                      "required": true
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "Array",
                              "elements": [
                                {
                                  "name": "any"
                                }
                              ],
                              "raw": "any[]"
                            }
                          ],
                          "required": false
                        }
                      },
                      {
                        "key": "label",
                        "value": {
                          "name": "string",
                          "required": false
                        }
                      },
                      {
                        "key": "placeholder",
                        "value": {
                          "name": "string",
                          "required": false
                        }
                      },
                      {
                        "key": "outlined",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "disabled",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "rootProps",
                        "value": {
                          "name": "Object",
                          "required": false
                        }
                      },
                      {
                        "key": "className",
                        "value": {
                          "name": "string",
                          "required": false
                        }
                      },
                      {
                        "key": "style",
                        "value": {
                          "name": "Object",
                          "required": false
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "SimpleTagPropsT"
                },
                {
                  "name": "ReactInputHTMLAttributes",
                  "raw": "React.InputHTMLAttributes<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                }
              ],
              "alias": "SelectPropsT"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "role": {
        "defaultValue": {
          "value": "'listbox'",
          "computed": false
        },
        "required": false
      }
    }
  },
  {
    "description": "",
    "displayName": "SelectSurface",
    "methods": []
  },
  {
    "description": "",
    "displayName": "SelectSelectedText",
    "methods": []
  },
  {
    "description": "",
    "displayName": "SelectBottomLine",
    "methods": []
  },
  {
    "description": "",
    "displayName": "SelectNativeControl",
    "methods": []
  },
  {
    "description": "",
    "displayName": "Select",
    "methods": [
      {
        "name": "syncWithProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "intersection",
              "raw": "{\n  /** The value for a controlled select. */\n  value?: mixed,\n  /** Options accepts flat arrays, value => label maps, and more. See examples for details. */\n  options?: string[] | { [value: string]: string } | any[],\n  /** A label for the form control. */\n  label?: string,\n  /** Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label. */\n  placeholder?: string,\n  /** Makes the select outlined. */\n  outlined?: boolean,\n  /** Disables the form control. */\n  disabled?: boolean,\n  /** Props for the root element. By default, additional props spread to the native select element.  */\n  rootProps?: Object,\n  /** A className for the root element. */\n  className?: string,\n  /** Styles to be applied to the root of the component. */\n  style?: Object\n} & SimpleTagPropsT &\n  React.InputHTMLAttributes<HTMLInputElement>",
              "elements": [
                {
                  "name": "signature",
                  "type": "object",
                  "raw": "{\n  /** The value for a controlled select. */\n  value?: mixed,\n  /** Options accepts flat arrays, value => label maps, and more. See examples for details. */\n  options?: string[] | { [value: string]: string } | any[],\n  /** A label for the form control. */\n  label?: string,\n  /** Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label. */\n  placeholder?: string,\n  /** Makes the select outlined. */\n  outlined?: boolean,\n  /** Disables the form control. */\n  disabled?: boolean,\n  /** Props for the root element. By default, additional props spread to the native select element.  */\n  rootProps?: Object,\n  /** A className for the root element. */\n  className?: string,\n  /** Styles to be applied to the root of the component. */\n  style?: Object\n}",
                  "signature": {
                    "properties": [
                      {
                        "key": "value",
                        "value": {
                          "name": "mixed",
                          "required": false
                        }
                      },
                      {
                        "key": "options",
                        "value": {
                          "name": "union",
                          "raw": "string[] | { [value: string]: string } | any[]",
                          "elements": [
                            {
                              "name": "Array",
                              "elements": [
                                {
                                  "name": "string"
                                }
                              ],
                              "raw": "string[]"
                            },
                            {
                              "name": "signature",
                              "type": "object",
                              "raw": "{ [value: string]: string }",
                              "signature": {
                                "properties": [
                                  {
                                    "key": {
                                      "name": "string"
                                    },
                                    "value": {
                                      "name": "string",
                                      "required": true
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "name": "Array",
                              "elements": [
                                {
                                  "name": "any"
                                }
                              ],
                              "raw": "any[]"
                            }
                          ],
                          "required": false
                        }
                      },
                      {
                        "key": "label",
                        "value": {
                          "name": "string",
                          "required": false
                        }
                      },
                      {
                        "key": "placeholder",
                        "value": {
                          "name": "string",
                          "required": false
                        }
                      },
                      {
                        "key": "outlined",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "disabled",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "rootProps",
                        "value": {
                          "name": "Object",
                          "required": false
                        }
                      },
                      {
                        "key": "className",
                        "value": {
                          "name": "string",
                          "required": false
                        }
                      },
                      {
                        "key": "style",
                        "value": {
                          "name": "Object",
                          "required": false
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "SimpleTagPropsT"
                },
                {
                  "name": "ReactInputHTMLAttributes",
                  "raw": "React.InputHTMLAttributes<HTMLInputElement>",
                  "elements": [
                    {
                      "name": "HTMLInputElement"
                    }
                  ]
                }
              ],
              "alias": "SelectPropsT"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "value": {
        "flowType": {
          "name": "mixed"
        },
        "required": false,
        "description": "The value for a controlled select."
      },
      "options": {
        "flowType": {
          "name": "union",
          "raw": "string[] | { [value: string]: string } | any[]",
          "elements": [
            {
              "name": "Array",
              "elements": [
                {
                  "name": "string"
                }
              ],
              "raw": "string[]"
            },
            {
              "name": "signature",
              "type": "object",
              "raw": "{ [value: string]: string }",
              "signature": {
                "properties": [
                  {
                    "key": {
                      "name": "string"
                    },
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  }
                ]
              }
            },
            {
              "name": "Array",
              "elements": [
                {
                  "name": "any"
                }
              ],
              "raw": "any[]"
            }
          ]
        },
        "required": false,
        "description": "Options accepts flat arrays, value => label maps, and more. See examples for details."
      },
      "label": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "A label for the form control."
      },
      "placeholder": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label."
      },
      "outlined": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Makes the select outlined."
      },
      "disabled": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Disables the form control."
      },
      "rootProps": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Props for the root element. By default, additional props spread to the native select element."
      },
      "className": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "A className for the root element."
      },
      "style": {
        "flowType": {
          "name": "Object"
        },
        "required": false,
        "description": "Styles to be applied to the root of the component."
      }
    }
  }
]