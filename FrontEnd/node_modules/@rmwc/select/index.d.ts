import { SimpleTagPropsT } from '@rmwc/base';
import * as React from 'react';
export declare type SelectPropsT = {
    /** The value for a controlled select. */
    value?: any;
    /** Options accepts flat arrays, value => label maps, and more. See examples for details. */
    options?: string[] | {
        [value: string]: string;
    } | any[];
    /** A label for the form control. */
    label?: string;
    /** Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label. */
    placeholder?: string;
    /** Makes the select outlined. */
    outlined?: boolean;
    /** Disables the form control. */
    disabled?: boolean;
    /** Props for the root element. By default, additional props spread to the native select element.  */
    rootProps?: Object;
    /** A className for the root element. */
    className?: string;
    /** Styles to be applied to the root of the component. */
    style?: Object;
} & SimpleTagPropsT & React.InputHTMLAttributes<HTMLInputElement>;
export declare const SelectRoot: React.ComponentType<SelectPropsT>;
export declare const SelectSurface: React.ComponentType<SimpleTagPropsT>;
export declare const SelectSelectedText: React.ComponentType<SimpleTagPropsT>;
export declare const SelectBottomLine: React.ComponentType<SimpleTagPropsT>;
export declare const SelectNativeControl: React.ComponentType<SimpleTagPropsT>;
declare const Select_base: {
    new <P>(props: P & {
        tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
        wrap?: boolean | undefined;
        elementRef?: any;
        theme?: string | string[] | undefined;
        apiRef?: (<S>(api: S) => S) | undefined;
    } & React.HTMLAttributes<any> & React.HTMLProps<any>): {
        foundation_: {
            [key: string]: any;
            adapter_: any;
            init: Function;
            destroy: Function;
        } | null;
        foundationRefs: {
            [name: string]: (ref: HTMLElement) => any;
        };
        root_: Element | Text | null;
        props: P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>;
        componentDidMount(): void;
        componentWillReceiveProps(nextProps: P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>): void;
        componentWillUnmount(): void;
        _safeSyncWithProps(props: Object): void;
        initFoundation(): void;
        destroyComponent(): void;
        syncWithProps(nextProps: Object): void;
        initialize(...args: any[]): void;
        initialSyncWithDOM(): void;
        destroy(): void;
        getDefaultFoundation(): {
            adapter_: {};
            init: () => void;
            destroy: () => void;
        };
        emit(evtType: string, evtData: Object, shouldBubble?: boolean, sync?: boolean): any;
        listen(evtType: string, handler: Function): void;
        unlisten(evtType: string, handler: Function): void;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        render(): React.ReactNode;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
};
export declare class Select extends Select_base<SelectPropsT> {
    static displayName: string;
    disabled: boolean;
    value: any;
    foundation_: any;
    syncWithProps(nextProps: SelectPropsT): void;
    render(): JSX.Element;
}
export default Select;
