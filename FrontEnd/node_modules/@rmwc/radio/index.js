'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Radio = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _mdc = require('@material/radio/dist/mdc.radio');

var _formfield = require('@rmwc/formfield');

var _formfield2 = _interopRequireDefault(_formfield);

var _base = require('@rmwc/base');

var _randomId = require('@rmwc/base/utils/randomId');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RadioRoot = function (_Component) {
  _inherits(RadioRoot, _Component);

  function RadioRoot() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, RadioRoot);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RadioRoot.__proto__ || Object.getPrototypeOf(RadioRoot)).call.apply(_ref, [this].concat(args))), _this), Object.defineProperty(_this, 'classNames', {
      enumerable: true,
      writable: true,
      value: function value(props) {
        return ['mdc-radio', { 'mdc-radio--disabled': props.disabled }];
      }
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  return RadioRoot;
}(_base.Component);

Object.defineProperty(RadioRoot, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'RadioRoot'
});

var RadioNativeControl = function (_Component2) {
  _inherits(RadioNativeControl, _Component2);

  function RadioNativeControl() {
    var _ref2;

    var _temp2, _this2, _ret2;

    _classCallCheck(this, RadioNativeControl);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref2 = RadioNativeControl.__proto__ || Object.getPrototypeOf(RadioNativeControl)).call.apply(_ref2, [this].concat(args))), _this2), Object.defineProperty(_this2, 'tag', {
      enumerable: true,
      writable: true,
      value: 'input'
    }), Object.defineProperty(_this2, 'classNames', {
      enumerable: true,
      writable: true,
      value: ['mdc-radio__native-control']
    }), _temp2), _possibleConstructorReturn(_this2, _ret2);
  }

  return RadioNativeControl;
}(_base.Component);

Object.defineProperty(RadioNativeControl, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'RadioNativeControl'
});
Object.defineProperty(RadioNativeControl, 'defaultProps', {
  enumerable: true,
  writable: true,
  value: {
    type: 'radio'
  }
});

var RadioBackground = function (_React$Component) {
  _inherits(RadioBackground, _React$Component);

  function RadioBackground() {
    _classCallCheck(this, RadioBackground);

    return _possibleConstructorReturn(this, (RadioBackground.__proto__ || Object.getPrototypeOf(RadioBackground)).apply(this, arguments));
  }

  _createClass(RadioBackground, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        { className: 'mdc-radio__background' },
        React.createElement('div', { className: 'mdc-radio__outer-circle' }),
        React.createElement('div', { className: 'mdc-radio__inner-circle' })
      );
    }
  }]);

  return RadioBackground;
}(React.Component);

Object.defineProperty(RadioBackground, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'RadioBackground'
});


var RadioLabel = function RadioLabel(_ref3) {
  var rest = _objectWithoutProperties(_ref3, []);

  return React.createElement('label', rest);
};
RadioLabel.displayName = 'RadioLabel';

/** A Radio button component. */

var Radio = exports.Radio = function (_FoundationComponent) {
  _inherits(Radio, _FoundationComponent);

  function Radio(props) {
    _classCallCheck(this, Radio);

    var _this4 = _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).call(this, props));

    _this4.generatedId = (0, _randomId.randomId)('radio');
    _this4.createClassList('root_');
    return _this4;
  }

  _createClass(Radio, [{
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this5 = this;

      return new _mdc.MDCRadioFoundation({
        addClass: function addClass(className) {
          return _this5.classList.root_.add(className);
        },
        removeClass: function removeClass(className) {
          return _this5.classList.root_.remove(className);
        },
        getNativeControl: function getNativeControl() {
          return _this5.nativeRadio_;
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this6 = this;

      var _props = this.props,
          _props$label = _props.label,
          label = _props$label === undefined ? '' : _props$label,
          id = _props.id,
          children = _props.children,
          rest = _objectWithoutProperties(_props, ['label', 'id', 'children']);

      var labelId = id || this.generatedId;

      var radio = React.createElement(
        RadioRoot,
        {
          elementRef: function elementRef(ref) {
            return _this6.root_ = ref;
          },
          disabled: rest.disabled,
          className: this.classList.root_.renderToString()
        },
        React.createElement(RadioNativeControl, Object.assign({
          elementRef: function elementRef(ref) {
            return _this6.nativeRadio_ = ref;
          },
          id: labelId
        }, rest)),
        React.createElement(RadioBackground, null)
      );

      /**
       * We have to conditionally wrap our radio in a FormField
       * If we have a label
       */
      if (label.length || children) {
        return React.createElement(
          _formfield2.default,
          null,
          radio,
          React.createElement(
            RadioLabel,
            { id: labelId + 'label', htmlFor: labelId },
            label,
            children
          )
        );
      } else {
        return radio;
      }
    }
  }]);

  return Radio;
}(_base.FoundationComponent);

Object.defineProperty(Radio, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'Radio'
});
exports.default = Radio;
