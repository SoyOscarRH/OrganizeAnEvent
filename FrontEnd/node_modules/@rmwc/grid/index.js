'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Grid = exports.GridInner = exports.GridCell = exports.GridRoot = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _base = require('@rmwc/base');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GridRoot = exports.GridRoot = (0, _base.simpleTag)({
  displayName: 'GridRoot',
  classNames: function classNames(props) {
    var _ref;

    return ['mdc-layout-grid', (_ref = {}, _defineProperty(_ref, 'mdc-layout-grid__cell--align-' + (props.align || ''), props.align !== undefined), _defineProperty(_ref, 'mdc-layout-grid--fixed-column-width', props.fixedColumnWidth), _ref)];
  },
  consumeProps: ['fixedColumnWidth', 'align']
});

var GridCellRoot = (0, _base.simpleTag)({
  displayName: 'GridCellRoot',
  defaultProps: {
    span: undefined,
    phone: undefined,
    tablet: undefined,
    desktop: undefined,
    order: undefined
  },
  classNames: function classNames(props) {
    var _ref2;

    return ['mdc-layout-grid__cell', (_ref2 = {}, _defineProperty(_ref2, 'mdc-layout-grid__cell--order-' + (props.order || ''), props.order !== undefined), _defineProperty(_ref2, 'mdc-layout-grid__cell--align-' + (props.align || ''), props.align !== undefined), _defineProperty(_ref2, 'mdc-layout-grid__cell--span-' + (props.span || ''), props.span !== undefined), _defineProperty(_ref2, 'mdc-layout-grid__cell--span-' + (props.phone || '') + '-phone', props.phone !== undefined), _defineProperty(_ref2, 'mdc-layout-grid__cell--span-' + (props.tablet || '') + '-tablet', props.tablet !== undefined), _defineProperty(_ref2, 'mdc-layout-grid__cell--span-' + (props.desktop || '') + '-desktop', props.desktop !== undefined), _ref2)];
  },
  consumeProps: ['span', 'phone', 'tablet', 'desktop', 'order', 'align']
});

/** A Grid cell */
var GridCell = exports.GridCell = function GridCell(props) {
  return React.createElement(GridCellRoot, props);
};
GridCell.displayName = 'GridCell';

/** By default, an inner grid component is included inside of <Grid>. Use GridInner when doing nested Grids. */
var GridInner = exports.GridInner = (0, _base.simpleTag)({
  displayName: 'GridInner',
  classNames: 'mdc-layout-grid__inner'
});

/** A Grid component */
var Grid = function Grid(_ref3) {
  var children = _ref3.children,
      rest = _objectWithoutProperties(_ref3, ['children']);

  var child = children;
  var needsInnerGrid = !(child && (typeof child === 'undefined' ? 'undefined' : _typeof(child)) === 'object' && (child.type || {}).displayName === 'GridInner');
  return React.createElement(
    GridRoot,
    rest,
    !!needsInnerGrid ? React.createElement(
      GridInner,
      null,
      children
    ) : children
  );
};

exports.Grid = Grid;
Grid.displayName = 'Grid';
