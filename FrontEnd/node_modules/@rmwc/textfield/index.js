'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextFieldIcon = exports.TextFieldHelperText = exports.TextField = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _mdc = require('@material/textfield/dist/mdc.textfield');

var _base = require('@rmwc/base');

var _icon = require('@rmwc/icon');

var _lineRipple = require('@rmwc/line-ripple');

var _floatingLabel = require('@rmwc/floating-label');

var _notchedOutline = require('@rmwc/notched-outline');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*********************************************************************
 * TextField
 *********************************************************************/
var TextFieldRoot = function (_Component) {
  _inherits(TextFieldRoot, _Component);

  function TextFieldRoot() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TextFieldRoot);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextFieldRoot.__proto__ || Object.getPrototypeOf(TextFieldRoot)).call.apply(_ref, [this].concat(args))), _this), Object.defineProperty(_this, 'deprecate', {
      enumerable: true,
      writable: true,
      value: {
        box: ''
      }
    }), Object.defineProperty(_this, 'classNames', {
      enumerable: true,
      writable: true,
      value: function value(props) {
        return ['mdc-text-field', 'mdc-text-field--upgraded', {
          'mdc-text-field--textarea': props.textarea,
          'mdc-text-field--fullwidth': props.fullwidth,
          'mdc-text-field--outlined': props.outlined,
          'mdc-text-field--dense': props.dense,
          'mdc-text-field--invalid': props.invalid,
          'mdc-text-field--disabled': props.disabled,
          'mdc-text-field--with-leading-icon': props.withLeadingIcon,
          'mdc-text-field--with-trailing-icon': props.withTrailingIcon
        }];
      }
    }), Object.defineProperty(_this, 'consumeProps', {
      enumerable: true,
      writable: true,
      value: ['textarea', 'fullwidth', 'outlined', 'dense', 'invalid', 'disabled', 'withLeadingIcon', 'withTrailingIcon']
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  return TextFieldRoot;
}(_base.Component);

Object.defineProperty(TextFieldRoot, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'TextFieldRoot'
});

var TextFieldInput = function (_Component2) {
  _inherits(TextFieldInput, _Component2);

  function TextFieldInput() {
    var _ref2;

    var _temp2, _this2, _ret2;

    _classCallCheck(this, TextFieldInput);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp2 = (_this2 = _possibleConstructorReturn(this, (_ref2 = TextFieldInput.__proto__ || Object.getPrototypeOf(TextFieldInput)).call.apply(_ref2, [this].concat(args))), _this2), Object.defineProperty(_this2, 'tag', {
      enumerable: true,
      writable: true,
      value: 'input'
    }), Object.defineProperty(_this2, 'classNames', {
      enumerable: true,
      writable: true,
      value: ['mdc-text-field__input']
    }), _temp2), _possibleConstructorReturn(_this2, _ret2);
  }

  return TextFieldInput;
}(_base.Component);

Object.defineProperty(TextFieldInput, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'TextFieldInput'
});
Object.defineProperty(TextFieldInput, 'defaultProps', {
  enumerable: true,
  writable: true,
  value: {
    type: 'text'
  }
});

var TextFieldTextarea = function (_Component3) {
  _inherits(TextFieldTextarea, _Component3);

  function TextFieldTextarea() {
    var _ref3;

    var _temp3, _this3, _ret3;

    _classCallCheck(this, TextFieldTextarea);

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return _ret3 = (_temp3 = (_this3 = _possibleConstructorReturn(this, (_ref3 = TextFieldTextarea.__proto__ || Object.getPrototypeOf(TextFieldTextarea)).call.apply(_ref3, [this].concat(args))), _this3), Object.defineProperty(_this3, 'tag', {
      enumerable: true,
      writable: true,
      value: 'textarea'
    }), Object.defineProperty(_this3, 'classNames', {
      enumerable: true,
      writable: true,
      value: ['mdc-text-field__input']
    }), _temp3), _possibleConstructorReturn(_this3, _ret3);
  }

  return TextFieldTextarea;
}(_base.Component);

/** A TextField component for accepting text input from a user. */


Object.defineProperty(TextFieldTextarea, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'TextFieldTextarea'
});

var TextField = exports.TextField = function (_FoundationComponent) {
  _inherits(TextField, _FoundationComponent);

  function TextField(props) {
    _classCallCheck(this, TextField);

    var _this4 = _possibleConstructorReturn(this, (TextField.__proto__ || Object.getPrototypeOf(TextField)).call(this, props));

    _this4.generatedId = (0, _base.randomId)('text-field');
    _this4.createClassList('root_');
    _this4.createPropsList('root_');
    _this4.createPropsList('input_');
    return _this4;
  }

  _createClass(TextField, [{
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this5 = this;

      return new _mdc.MDCTextFieldFoundation(Object.assign({
        addClass: function addClass(className) {
          return _this5.classList.root_.add(className);
        },
        removeClass: function removeClass(className) {
          return _this5.classList.root_.remove(className);
        },
        hasClass: function hasClass(className) {
          return _this5.classList.root_.has(className);
        },
        registerTextFieldInteractionHandler: function registerTextFieldInteractionHandler(evtType, handler) {
          return _this5.propsList.root_.addEventListener(evtType, handler);
        },
        deregisterTextFieldInteractionHandler: function deregisterTextFieldInteractionHandler(evtType, handler) {
          return _this5.propsList.root_.removeEventListener(evtType, handler);
        },
        registerValidationAttributeChangeHandler: function registerValidationAttributeChangeHandler(handler) {
          var getAttributesList = function getAttributesList(mutationsList) {
            return mutationsList.map(function (mutation) {
              return mutation.attributeName;
            });
          };
          if (_this5.input_) {
            var observer = new MutationObserver(function (mutationsList) {
              return handler(getAttributesList(mutationsList));
            });
            var targetNode = _this5.input_;
            var config = { attributes: true };
            targetNode && observer.observe(targetNode, config);
            return observer;
          }

          return {};
        },
        deregisterValidationAttributeChangeHandler: function deregisterValidationAttributeChangeHandler(observer) {
          observer && observer.disconnect();
        },
        isFocused: function isFocused() {
          return document.activeElement === _this5.input_;
        },
        isRtl: function isRtl() {
          return _this5.root_ && window.getComputedStyle(_this5.root_).getPropertyValue('direction') === 'rtl';
        }

      }, this.getInputAdapterMethods_(), this.getLabelAdapterMethods_(), this.getLineRippleAdapterMethods_(), this.getOutlineAdapterMethods_()), this.getFoundationMap_());
    }
  }, {
    key: 'getLabelAdapterMethods_',
    value: function getLabelAdapterMethods_() {
      var _this6 = this;

      return {
        shakeLabel: function shakeLabel(shouldShake) {
          return _this6.label_ && _this6.label_.shake(shouldShake);
        },
        floatLabel: function floatLabel(shouldFloat) {
          return _this6.label_ && _this6.label_.float(shouldFloat);
        },
        hasLabel: function hasLabel() {
          return !!_this6.label_;
        },
        getLabelWidth: function getLabelWidth() {
          return _this6.label_ && _this6.label_.getWidth();
        }
      };
    }
  }, {
    key: 'getLineRippleAdapterMethods_',
    value: function getLineRippleAdapterMethods_() {
      var _this7 = this;

      return {
        activateLineRipple: function activateLineRipple() {
          if (_this7.lineRipple_) {
            _this7.lineRipple_.activate();
          }
        },
        deactivateLineRipple: function deactivateLineRipple() {
          if (_this7.lineRipple_) {
            _this7.lineRipple_.deactivate();
          }
        },
        setLineRippleTransformOrigin: function setLineRippleTransformOrigin(normalizedX) {
          if (_this7.lineRipple_) {
            _this7.lineRipple_.setRippleCenter(normalizedX);
          }
        }
      };
    }
  }, {
    key: 'getOutlineAdapterMethods_',
    value: function getOutlineAdapterMethods_() {
      var _this8 = this;

      return {
        notchOutline: function notchOutline(labelWidth, isRtl) {
          _this8.outline_ && _this8.outline_.notch(labelWidth, isRtl);
        },
        closeOutline: function closeOutline() {
          return _this8.outline_ && _this8.outline_.closeNotch();
        },
        hasOutline: function hasOutline() {
          return !!_this8.outline_;
        }
      };
    }
  }, {
    key: 'getInputAdapterMethods_',
    value: function getInputAdapterMethods_() {
      var _this9 = this;

      return {
        registerInputInteractionHandler: function registerInputInteractionHandler(evtType, handler) {
          return _this9.propsList.input_.addEventListener(evtType, handler);
        },
        deregisterInputInteractionHandler: function deregisterInputInteractionHandler(evtType, handler) {
          return _this9.propsList.input_.removeEventListener(evtType, handler);
        },
        getNativeInput: function getNativeInput() {
          return _this9.input_;
        }
      };
    }
  }, {
    key: 'getFoundationMap_',
    value: function getFoundationMap_() {
      return {
        // helperText: this.helperText_ ? this.helperText_.foundation : undefined,
        helperText: undefined,
        leadingIcon: this.leadingIcon_,
        trailingIcon: this.trailingIcon_
      };
    }

    // handle leading and trailing icons

  }, {
    key: 'renderIcon',
    value: function renderIcon(iconNode, leadOrTrail) {
      var _this10 = this;

      if (iconNode && typeof iconNode === 'string' || iconNode.type && iconNode.type.displayName !== TextFieldIcon.displayName) {
        return React.createElement(TextFieldIcon, {
          ref: function ref(_ref4) {
            if (leadOrTrail === 'leadingIcon_') {
              _this10.leadingIcon_ = _ref4 && _ref4.foundation_;
            } else {
              _this10.trailingIcon_ = _ref4 && _ref4.foundation_;
            }
          },
          tabIndex: leadOrTrail === 'trailingIcon_' ? 0 : undefined,
          icon: iconNode
        });
      }

      return iconNode;
    }
  }, {
    key: 'sync',
    value: function sync(props) {
      if (props.value !== undefined && props.value !== this.foundation_.getValue()) {
        this.foundation_.setValue(props.value);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this11 = this;

      var _props = this.props,
          _props$label = _props.label,
          label = _props$label === undefined ? '' : _props$label,
          className = _props.className,
          style = _props.style,
          inputRef = _props.inputRef,
          outlined = _props.outlined,
          fullwidth = _props.fullwidth,
          dense = _props.dense,
          invalid = _props.invalid,
          disabled = _props.disabled,
          withLeadingIcon = _props.withLeadingIcon,
          withTrailingIcon = _props.withTrailingIcon,
          children = _props.children,
          textarea = _props.textarea,
          _props$rootProps = _props.rootProps,
          rootProps = _props$rootProps === undefined ? {} : _props$rootProps,
          rest = _objectWithoutProperties(_props, ['label', 'className', 'style', 'inputRef', 'outlined', 'fullwidth', 'dense', 'invalid', 'disabled', 'withLeadingIcon', 'withTrailingIcon', 'children', 'textarea', 'rootProps']);

      var tagProps = Object.assign({
        disabled: disabled,
        elementRef: function elementRef(ref) {
          _this11.input_ = ref;
          typeof inputRef === 'function' && inputRef(ref);
        },
        id: rest['id'] || (0, _base.randomId)('text-field')
      }, this.propsList.input_.all(rest));

      var tag = textarea ? React.createElement(TextFieldTextarea, tagProps) : React.createElement(TextFieldInput, tagProps);

      return React.createElement(
        TextFieldRoot,
        Object.assign({}, rootProps, {
          invalid: invalid,
          withLeadingIcon: !!withLeadingIcon,
          withTrailingIcon: !!withTrailingIcon,
          textarea: textarea,
          dense: dense,
          disabled: disabled,
          outlined: outlined,
          fullwidth: fullwidth,
          elementRef: function elementRef(ref) {
            return _this11.root_ = ref;
          },
          className: [className, this.classList.root_.renderToString()].filter(Boolean).join(' '),
          style: style
        }, this.propsList.root_.all()),
        !!withLeadingIcon && this.renderIcon(withLeadingIcon, 'leadingIcon_'),
        children,
        tag,
        !!label && React.createElement(
          _floatingLabel.FloatingLabel,
          {
            ref: function ref(_ref5) {
              return _this11.label_ = _ref5 && _ref5.foundation_;
            },
            htmlFor: tagProps.id
          },
          label
        ),
        !!withTrailingIcon && this.renderIcon(withTrailingIcon, 'trailingIcon_'),
        !!outlined && React.createElement(_notchedOutline.NotchedOutline, {
          ref: function ref(_ref6) {
            return _this11.outline_ = _ref6 && _ref6.foundation_;
          }
        }),
        !!outlined ? React.createElement(_notchedOutline.NotchedOutlineIdle, null) : React.createElement(_lineRipple.LineRipple, {
          ref: function ref(_ref7) {
            return _this11.lineRipple_ = _ref7 && _ref7.foundation_;
          }
        })
      );
    }
  }]);

  return TextField;
}(_base.FoundationComponent);

/*********************************************************************
 * Helper Text
 *********************************************************************/


Object.defineProperty(TextField, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'TextField'
});

/** @extends React.Component */
/** A help text component */
var TextFieldHelperText = exports.TextFieldHelperText = function (_Component4) {
  _inherits(TextFieldHelperText, _Component4);

  function TextFieldHelperText() {
    var _ref8;

    var _temp4, _this12, _ret4;

    _classCallCheck(this, TextFieldHelperText);

    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return _ret4 = (_temp4 = (_this12 = _possibleConstructorReturn(this, (_ref8 = TextFieldHelperText.__proto__ || Object.getPrototypeOf(TextFieldHelperText)).call.apply(_ref8, [this].concat(args))), _this12), Object.defineProperty(_this12, 'tag', {
      enumerable: true,
      writable: true,
      value: 'p'
    }), Object.defineProperty(_this12, 'classNames', {
      enumerable: true,
      writable: true,
      value: function value(props) {
        return ['mdc-text-field-helper-text', {
          'mdc-text-field-helper-text--persistent': props.persistent,
          'mdc-text-field-helper-text--validation-msg': props.validationMsg
        }];
      }
    }), Object.defineProperty(_this12, 'consumeProps', {
      enumerable: true,
      writable: true,
      value: ['persistent', 'validationMsg']
    }), _temp4), _possibleConstructorReturn(_this12, _ret4);
  }

  return TextFieldHelperText;
}(_base.Component);

/*********************************************************************
 * Icon
 *********************************************************************/

/**
 * An Icon in a TextField
 */


Object.defineProperty(TextFieldHelperText, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'TextFieldHelperText'
});

var TextFieldIcon = exports.TextFieldIcon = function (_FoundationComponent2) {
  _inherits(TextFieldIcon, _FoundationComponent2);

  function TextFieldIcon(props) {
    _classCallCheck(this, TextFieldIcon);

    var _this13 = _possibleConstructorReturn(this, (TextFieldIcon.__proto__ || Object.getPrototypeOf(TextFieldIcon)).call(this, props));

    _this13.createClassList('root_');
    _this13.createPropsList('root_');
    return _this13;
  }

  _createClass(TextFieldIcon, [{
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this14 = this;

      return new _mdc.MDCTextFieldIconFoundation({
        getAttr: function getAttr(attr) {
          return _this14.propsList.root_.get(attr);
        },
        setAttr: function setAttr(attr, value) {
          return _this14.propsList.root_.add(attr, value);
        },
        removeAttr: function removeAttr(attr) {
          return _this14.propsList.root_.remove(attr);
        },
        setContent: function setContent(content) {
          _this14.root_ && (_this14.root_.textContent = content);
        },
        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
          return _this14.propsList.root_.addEventListener(evtType, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
          return _this14.propsList.root_.removeEventListener(evtType, handler);
        },
        notifyIconAction: function notifyIconAction() {
          return _this14.emit('onClick', {}, true);
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(_icon.Icon, Object.assign({}, this.props, this.propsList.root_.all(), {
        className: 'mdc-text-field__icon ' + this.classList.root_.renderToString()
      }));
    }
  }]);

  return TextFieldIcon;
}(_base.FoundationComponent);

Object.defineProperty(TextFieldIcon, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'TextFieldIcon'
});
exports.default = TextField;
