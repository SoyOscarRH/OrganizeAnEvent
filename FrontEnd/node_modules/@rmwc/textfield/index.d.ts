import { SimpleTagPropsT } from '@rmwc/base';
import { IconPropsT } from '@rmwc/icon';
import * as React from 'react';
import { Component, FoundationComponent } from '@rmwc/base';
/*********************************************************************
 * TextField
 *********************************************************************/
export declare type TextFieldPropsT = {
    /** Makes a multiline TextField. */
    textarea?: boolean;
    /** Sets the value for controlled TextFields. */
    value?: string | number;
    /** Makes the TextField fullwidth. */
    fullwidth?: boolean;
    /** A ref for the native input. */
    inputRef?: React.Ref<any>;
    /** Disables the input. */
    disabled?: boolean;
    /** Mark the input as required. */
    required?: boolean;
    /** Makes the TextField visually invalid. This is sometimes automatically applied in cases where required or pattern is used.  */
    invalid?: boolean;
    /** Makes the TextField dense */
    dense?: boolean;
    /** Outline the TextField */
    outlined?: boolean;
    /** A label for the input. */
    label?: React.ReactNode;
    /** Add a leading icon. */
    withLeadingIcon?: React.ReactNode;
    /** Add a trailing icon. */
    withTrailingIcon?: React.ReactNode;
    /** By default, props spread to the input. These props are for the component's root container. */
    rootProps?: Object;
    /** The type of input field to render */
    type?: string;
} & React.InputHTMLAttributes<HTMLInputElement>;
/** A TextField component for accepting text input from a user. */
export declare class TextField extends FoundationComponent<TextFieldPropsT> {
    static displayName: string;
    generatedId: string;
    root_: null | HTMLElement;
    input_: null | HTMLInputElement | HTMLTextAreaElement;
    label_: null | any;
    lineRipple_: null | any;
    leadingIcon_: null | any;
    trailingIcon_: null | any;
    outline_: null | any;
    constructor(props: TextFieldPropsT);
    getDefaultFoundation(): any;
    getLabelAdapterMethods_(): {
        shakeLabel: (shouldShake: boolean) => any;
        floatLabel: (shouldFloat: boolean) => any;
        hasLabel: () => boolean;
        getLabelWidth: () => any;
    };
    getLineRippleAdapterMethods_(): {
        activateLineRipple: () => void;
        deactivateLineRipple: () => void;
        setLineRippleTransformOrigin: (normalizedX: number) => void;
    };
    getOutlineAdapterMethods_(): {
        notchOutline: (labelWidth: number, isRtl: boolean) => void;
        closeOutline: () => any;
        hasOutline: () => boolean;
    };
    getInputAdapterMethods_(): {
        registerInputInteractionHandler: (evtType: string, handler: Function) => void;
        deregisterInputInteractionHandler: (evtType: string, handler: Function) => void;
        getNativeInput: () => HTMLInputElement | HTMLTextAreaElement | null;
    };
    getFoundationMap_(): {
        helperText: undefined;
        leadingIcon: any;
        trailingIcon: any;
    };
    renderIcon(iconNode: any, leadOrTrail: 'leadingIcon_' | 'trailingIcon_'): any;
    sync(props: TextFieldPropsT): void;
    render(): JSX.Element;
}
/*********************************************************************
 * Helper Text
 *********************************************************************/
export declare type TextFieldHelperTextPropsT = {
    /** Make the help text always visible */
    persistent?: boolean;
    /** Make the help a validation message style */
    validationMsg?: boolean;
} & SimpleTagPropsT;
/** @extends React.Component */
/** A help text component */
export declare class TextFieldHelperText extends Component<TextFieldHelperTextPropsT> {
    static displayName: string;
    tag: string;
    classNames: (props: TextFieldHelperTextPropsT) => (string | {
        'mdc-text-field-helper-text--persistent': boolean | undefined;
        'mdc-text-field-helper-text--validation-msg': boolean | undefined;
    })[];
    consumeProps: string[];
}
/*********************************************************************
 * Icon
 *********************************************************************/
/**
 * An Icon in a TextField
 */
export declare class TextFieldIcon extends FoundationComponent<IconPropsT> {
    static displayName: string;
    root_: null | HTMLElement;
    constructor(props: IconPropsT);
    getDefaultFoundation(): any;
    render(): JSX.Element;
}
export default TextField;
