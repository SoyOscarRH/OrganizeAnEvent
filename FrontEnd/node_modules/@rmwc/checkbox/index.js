'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Checkbox = undefined;

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _mdc = require('@material/checkbox/dist/mdc.checkbox');

var _formfield = require('@rmwc/formfield');

var _formfield2 = _interopRequireDefault(_formfield);

var _base = require('@rmwc/base');

var _randomId = require('@rmwc/base/utils/randomId');

var _ripple = require('@rmwc/ripple');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * This is an awful freaking bugfix
 * Basically, MDC decided that patching the native getter and setter
 * on a checkbox would be fun which consequently kills Reacts ability
 * to do the same.
 */
_mdc.MDCCheckboxFoundation.prototype.installPropertyChangeHooks_ = function () {};

var CheckboxRoot = (0, _ripple.withRipple)({
  surface: false,
  unbounded: true
})((_temp2 = _class = function (_Component) {
  _inherits(_class, _Component);

  function _class() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, _class);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), Object.defineProperty(_this, 'classNames', {
      enumerable: true,
      writable: true,
      value: function value(props) {
        return ['mdc-checkbox', {
          'mdc-checkbox--disabled': props.disabled
        }];
      }
    }), Object.defineProperty(_this, 'consumeProps', {
      enumerable: true,
      writable: true,
      value: ['disabled']
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  return _class;
}(_base.Component), Object.defineProperty(_class, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'CheckboxRoot'
}), _temp2));

var CheckboxNativeControl = function (_Component2) {
  _inherits(CheckboxNativeControl, _Component2);

  function CheckboxNativeControl() {
    var _ref2;

    var _temp3, _this2, _ret2;

    _classCallCheck(this, CheckboxNativeControl);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp3 = (_this2 = _possibleConstructorReturn(this, (_ref2 = CheckboxNativeControl.__proto__ || Object.getPrototypeOf(CheckboxNativeControl)).call.apply(_ref2, [this].concat(args))), _this2), Object.defineProperty(_this2, 'tag', {
      enumerable: true,
      writable: true,
      value: 'input'
    }), Object.defineProperty(_this2, 'classNames', {
      enumerable: true,
      writable: true,
      value: ['mdc-checkbox__native-control']
    }), _temp3), _possibleConstructorReturn(_this2, _ret2);
  }

  return CheckboxNativeControl;
}(_base.Component);

Object.defineProperty(CheckboxNativeControl, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'CheckboxNativeControl'
});
Object.defineProperty(CheckboxNativeControl, 'defaultProps', {
  enumerable: true,
  writable: true,
  value: {
    type: 'checkbox'
  }
});

var CheckboxBackground = function (_React$Component) {
  _inherits(CheckboxBackground, _React$Component);

  function CheckboxBackground() {
    _classCallCheck(this, CheckboxBackground);

    return _possibleConstructorReturn(this, (CheckboxBackground.__proto__ || Object.getPrototypeOf(CheckboxBackground)).apply(this, arguments));
  }

  _createClass(CheckboxBackground, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        { className: 'mdc-checkbox__background' },
        React.createElement(
          'svg',
          { className: 'mdc-checkbox__checkmark', viewBox: '0 0 24 24' },
          React.createElement('path', {
            className: 'mdc-checkbox__checkmark-path',
            fill: 'none',
            stroke: 'white',
            d: 'M1.73,12.91 8.1,19.28 22.79,4.59'
          })
        ),
        React.createElement('div', { className: 'mdc-checkbox__mixedmark' })
      );
    }
  }]);

  return CheckboxBackground;
}(React.Component);

Object.defineProperty(CheckboxBackground, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'CheckboxBackground'
});


var CheckboxLabel = function CheckboxLabel(_ref3) {
  var rest = _objectWithoutProperties(_ref3, []);

  return React.createElement('label', rest);
};
CheckboxLabel.displayName = 'CheckboxLabel';

/**
 * A Checkbox component
 */

var Checkbox = exports.Checkbox = function (_FoundationComponent) {
  _inherits(Checkbox, _FoundationComponent);

  function Checkbox(props) {
    _classCallCheck(this, Checkbox);

    var _this4 = _possibleConstructorReturn(this, (Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call(this, props));

    _this4.generatedId = (0, _randomId.randomId)('checkbox');
    _this4.createClassList('root_');
    _this4.createPropsList('nativeCb_');
    return _this4;
  }

  _createClass(Checkbox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this5 = this;

      _get(Checkbox.prototype.__proto__ || Object.getPrototypeOf(Checkbox.prototype), 'componentDidMount', this).call(this);
      this.handleChange_ = function () {
        return _this5.sync(_this5.props);
      };
      this.nativeCb_ && this.nativeCb_.addEventListener('change', this.handleChange_);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _get(Checkbox.prototype.__proto__ || Object.getPrototypeOf(Checkbox.prototype), 'componentWillUnmount', this).call(this);
      this.nativeCb_ && this.nativeCb_.removeEventListener('change', this.handleChange_);
    }
  }, {
    key: 'sync',
    value: function sync(nextProps) {
      this.foundation_.handleChange();

      if (this.nativeCb_ && nextProps.indeterminate !== this.nativeCb_.indeterminate) {
        this.nativeCb_.indeterminate = !!nextProps.indeterminate;
      }
    }
  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this6 = this;

      return new _mdc.MDCCheckboxFoundation({
        addClass: function addClass(className) {
          return _this6.classList.root_.add(className);
        },
        removeClass: function removeClass(className) {
          return _this6.classList.root_.remove(className);
        },
        setNativeControlAttr: function setNativeControlAttr(attr, value) {
          return _this6.propsList.nativeCb_.add(attr, value);
        },
        removeNativeControlAttr: function removeNativeControlAttr(attr) {
          return _this6.propsList.nativeCb_.remove(attr);
        },
        getNativeControl: function getNativeControl() {
          return _this6.nativeCb_;
        },
        isIndeterminate: function isIndeterminate() {
          return _this6.props.indeterminate;
        },
        isChecked: function isChecked() {
          return _this6.props.checked !== undefined ? _this6.props.checked : _this6.nativeCb_ && _this6.nativeCb_.checked;
        },
        hasNativeControl: function hasNativeControl() {
          return !!_this6.nativeCb_;
        },
        setNativeControlDisabled: function setNativeControlDisabled(disabled) {
          return _this6.nativeCb_ && (_this6.nativeCb_.disabled = disabled);
        },
        forceLayout: function forceLayout() {
          return _this6.root_ && _this6.root_.offsetWidth;
        },
        isAttachedToDOM: function isAttachedToDOM() {
          return true;
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this7 = this;

      var _props = this.props,
          _props$label = _props.label,
          label = _props$label === undefined ? '' : _props$label,
          id = _props.id,
          children = _props.children,
          indeterminate = _props.indeterminate,
          rest = _objectWithoutProperties(_props, ['label', 'id', 'children', 'indeterminate']);

      var labelId = id || this.generatedId;

      var checkbox = React.createElement(
        CheckboxRoot,
        {
          elementRef: function elementRef(ref) {
            return _this7.root_ = ref;
          },
          disabled: rest.disabled,
          className: this.classList.root_.renderToString()
        },
        React.createElement(CheckboxNativeControl, Object.assign({
          elementRef: function elementRef(ref) {
            return _this7.nativeCb_ = ref;
          },
          id: labelId
        }, this.propsList.nativeCb_.all(rest))),
        React.createElement(CheckboxBackground, null)
      );

      /**
       * We have to conditionally wrap our checkbox in a formfield
       * If we have a label
       */
      if (label.length || children) {
        return React.createElement(
          _formfield2.default,
          null,
          checkbox,
          React.createElement(
            CheckboxLabel,
            { id: labelId + 'label', htmlFor: labelId },
            label,
            children
          )
        );
      } else {
        return checkbox;
      }
    }
  }]);

  return Checkbox;
}(_base.FoundationComponent);

Object.defineProperty(Checkbox, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'Checkbox'
});
exports.default = Checkbox;
