'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineRipple = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _mdc = require('@material/line-ripple/dist/mdc.lineRipple');

var _base = require('@rmwc/base');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LineRipple = exports.LineRipple = function (_FoundationComponent) {
  _inherits(LineRipple, _FoundationComponent);

  function LineRipple(props) {
    _classCallCheck(this, LineRipple);

    var _this = _possibleConstructorReturn(this, (LineRipple.__proto__ || Object.getPrototypeOf(LineRipple)).call(this, props));

    _this.createClassList('root_');
    _this.createPropsList('root_');
    return _this;
  }

  _createClass(LineRipple, [{
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this2 = this;

      return new _mdc.MDCLineRippleFoundation({
        addClass: function addClass(className) {
          return _this2.classList.root_.add(className);
        },
        removeClass: function removeClass(className) {
          return _this2.classList.root_.remove(className);
        },
        hasClass: function hasClass(className) {
          return _this2.classList.root_.has(className);
        },
        setStyle: function setStyle(propertyName, value) {
          return _this2.root_ && (_this2.root_.style[propertyName] = value);
        },
        registerEventHandler: function registerEventHandler(evtType, handler) {
          return _this2.propsList.root_.addEventListener(evtType, handler);
        },
        deregisterEventHandler: function deregisterEventHandler(evtType, handler) {
          return _this2.propsList.root_.removeEventListener(evtType, handler);
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return React.createElement('div', Object.assign({}, this.props, this.propsList.root_.all(), {
        className: 'mdc-line-ripple ' + this.classList.root_.renderToString(),
        ref: function ref(_ref) {
          return _this3.root_ = _ref;
        }
      }));
    }
  }]);

  return LineRipple;
}(_base.FoundationComponent);

Object.defineProperty(LineRipple, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'LineRipple'
});
exports.default = LineRipple;
