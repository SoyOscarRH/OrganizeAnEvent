'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CircularProgress = exports.CircularProgressRoot = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _base = require('@rmwc/base');

var _react = require('react');

var React = _interopRequireWildcard(_react);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SIZE_MAP = {
  xsmall: 18,
  small: 20,
  medium: 24,
  large: 36,
  xlarge: 48
};

var CircularProgressRoot = exports.CircularProgressRoot = function (_Component) {
  _inherits(CircularProgressRoot, _Component);

  function CircularProgressRoot() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CircularProgressRoot);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CircularProgressRoot.__proto__ || Object.getPrototypeOf(CircularProgressRoot)).call.apply(_ref, [this].concat(args))), _this), Object.defineProperty(_this, 'classNames', {
      enumerable: true,
      writable: true,
      value: function value(props) {
        var _ref2;

        return ['rmwc-circular-progress', (_ref2 = {}, _defineProperty(_ref2, 'rmwc-circular-progress--size-' + props._size, typeof props._size === 'string'), _defineProperty(_ref2, 'rmwc-circular-progress--indeterminate', props._progress === undefined), _defineProperty(_ref2, 'rmwc-circular-progress--thickerstroke', props._size && (SIZE_MAP[props._size] || Number(props._size)) > 36), _ref2)];
      }
    }), Object.defineProperty(_this, 'consumeProps', {
      enumerable: true,
      writable: true,
      value: ['size', 'progress']
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  return CircularProgressRoot;
}(_base.Component);

/** A Circular Progress indicator. */


Object.defineProperty(CircularProgressRoot, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'CircularProgressRoot'
});

var CircularProgress = exports.CircularProgress = function (_React$Component) {
  _inherits(CircularProgress, _React$Component);

  function CircularProgress() {
    _classCallCheck(this, CircularProgress);

    return _possibleConstructorReturn(this, (CircularProgress.__proto__ || Object.getPrototypeOf(CircularProgress)).apply(this, arguments));
  }

  _createClass(CircularProgress, [{
    key: 'calculateRatio',
    value: function calculateRatio(value) {
      var _props = this.props,
          _props$min = _props.min,
          min = _props$min === undefined ? 0 : _props$min,
          _props$max = _props.max,
          max = _props$max === undefined ? 1 : _props$max;


      if (value < min) return 0;
      if (value > max) return 1;
      return (value - min) / (max - min);
    }
  }, {
    key: 'circularStyle',
    value: function circularStyle(size) {
      return this.props.progress !== undefined ? {
        strokeDasharray: 2 * Math.PI * (size / 2.4) * this.calculateRatio(this.props.progress) + ', 666.66%'
      } : undefined;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          max = _props2.max,
          min = _props2.min,
          _props2$size = _props2.size,
          size = _props2$size === undefined ? 'medium' : _props2$size,
          progress = _props2.progress,
          rest = _objectWithoutProperties(_props2, ['max', 'min', 'size', 'progress']);

      var style = rest.style;
      var _size = SIZE_MAP[size] || Number(size);

      if (!SIZE_MAP[size]) {
        style = Object.assign({}, rest.style, {
          fontSize: Number(size)
        });
      }
      return React.createElement(
        CircularProgressRoot,
        Object.assign({
          'aria-valuenow': progress,
          'aria-valuemin': min,
          'aria-valuemax': max,
          _size: size,
          _progress: progress
        }, rest, {
          style: style
        }),
        React.createElement(
          'svg',
          {
            className: 'rmwc-circular-progress__circle',
            viewBox: '0 0 ' + _size + ' ' + _size
          },
          React.createElement('circle', {
            className: 'rmwc-circular-progress__path',
            style: this.circularStyle(_size),
            cx: _size / 2,
            cy: _size / 2,
            r: _size / 2.4
          })
        )
      );
    }
  }]);

  return CircularProgress;
}(React.Component);

Object.defineProperty(CircularProgress, 'defaultProps', {
  enumerable: true,
  writable: true,
  value: {
    progress: undefined,
    size: 'medium'
  }
});
