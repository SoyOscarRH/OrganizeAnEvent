'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageListLabel = exports.ImageListSupporting = exports.ImageListImage = exports.ImageListImageAspectContainer = exports.ImageListItem = exports.ImageList = undefined;

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _base = require('@rmwc/base');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// eslint-disable-next-line no-unused-vars
var ImageListRoot = (0, _base.simpleTag)({
  displayName: 'ImageListRoot',
  tag: 'ul',
  classNames: function classNames(props) {
    return ['mdc-image-list', {
      'mdc-image-list--masonry': props.masonry,
      'mdc-image-list--with-text-protection': props.withTextProtection
    }];
  },
  consumeProps: ['masonry', 'withTextProtection']
});

/** Indicates the root Image List element. */
var ImageList = exports.ImageList = function ImageList(props) {
  return React.createElement(ImageListRoot, props);
};
ImageList.displayName = 'ImageList';

/** Indicates each item in an Image List. */
var ImageListItem = exports.ImageListItem = (0, _base.simpleTag)({
  displayName: 'ImageListItem',
  tag: 'li',
  classNames: 'mdc-image-list__item'
});

/** Optional. Parent of each itemâ€™s image element, responsible for constraining aspect ratio. This element may be omitted entirely if images are already sized to the correct aspect ratio. */
var ImageListImageAspectContainer = exports.ImageListImageAspectContainer = (0, _base.simpleTag)({
  displayName: 'ImageListImageAspectContainer',
  classNames: 'mdc-image-list__image-aspect-container'
});

/** Indicates the image element in each item. */
var ImageListImage = exports.ImageListImage = (0, _base.simpleTag)({
  displayName: 'ImageListImage',
  tag: 'img',
  classNames: 'mdc-image-list__image'
});

/** Optional. Indicates the area within each item containing the supporting text label, if the Image List contains text labels. */
var ImageListSupporting = exports.ImageListSupporting = (0, _base.simpleTag)({
  displayName: 'ImageListSupporting',
  classNames: 'mdc-image-list__supporting'
});

/** Optional. Indicates the text label in each item, if the Image List contains text labels. */
var ImageListLabel = exports.ImageListLabel = (0, _base.simpleTag)({
  displayName: 'ImageListLabel',
  classNames: 'mdc-image-list__label'
});
