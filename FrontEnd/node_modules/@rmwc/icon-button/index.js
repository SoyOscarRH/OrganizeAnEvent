'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconButton = exports.IconButtonIcon = exports.IconButtonRoot = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _mdc = require('@material/icon-button/dist/mdc.iconButton');

var _icon = require('@rmwc/icon');

var _ripple = require('@rmwc/ripple');

var _base = require('@rmwc/base');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IconButtonRoot = exports.IconButtonRoot = (0, _ripple.withRipple)({
  unbounded: true
})((0, _base.simpleTag)({
  displayName: 'IconButtonRoot',
  tag: 'button',
  classNames: function classNames(props) {
    return ['mdc-icon-button', {
      'mdc-icon-button--on': props.checked
    }];
  },
  defaultProps: {
    role: 'button',
    tabIndex: '0'
  },
  consumeProps: ['checked']
}));

var IconButtonIcon = exports.IconButtonIcon = (0, _base.simpleTag)({
  displayName: 'IconButtonIcon',
  tag: _icon.Icon,
  classNames: function classNames(props) {
    return ['mdc-icon-button__icon', {
      'mdc-icon-button__icon--on': props.on
    }];
  },
  consumeProps: ['on']
});

var IconButtonToggle = function (_withFoundation) {
  _inherits(IconButtonToggle, _withFoundation);

  function IconButtonToggle() {
    _classCallCheck(this, IconButtonToggle);

    return _possibleConstructorReturn(this, (IconButtonToggle.__proto__ || Object.getPrototypeOf(IconButtonToggle)).apply(this, arguments));
  }

  _createClass(IconButtonToggle, [{
    key: 'isOn',


    /** Takes into account our checked prop */
    value: function isOn() {
      if (this.props.checked !== undefined) {
        return this.props.checked;
      }

      return this.foundation_ && this.on;
    }
  }, {
    key: 'initialize',
    value: function initialize() {
      this.ripple_ = this.initRipple_();
      _get(IconButtonToggle.prototype.__proto__ || Object.getPrototypeOf(IconButtonToggle.prototype), 'initialize', this).call(this);
    }
  }, {
    key: 'syncWithProps',
    value: function syncWithProps(nextProps) {
      var _this2 = this;

      // checked
      (0, _base.syncFoundationProp)(nextProps.checked, this.on, function () {
        _this2.on = !!nextProps.checked;
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          checked = _props.checked,
          icon = _props.icon,
          iconOptions = _props.iconOptions,
          onIcon = _props.onIcon,
          onIconOptions = _props.onIconOptions,
          rest = _objectWithoutProperties(_props, ['checked', 'icon', 'iconOptions', 'onIcon', 'onIconOptions']);

      var root_ = this.foundationRefs.root_;

      var tsxIsOn = this.isOn();

      return React.createElement(
        IconButtonRoot,
        Object.assign({
          'aria-pressed': tsxIsOn,
          'aria-hidden': 'true'
        }, rest, {
          elementRef: root_
        }),
        React.createElement(IconButtonIcon, { icon: icon, iconOptions: iconOptions }),
        React.createElement(IconButtonIcon, { icon: onIcon, iconOptions: onIconOptions, on: true })
      );
    }
  }]);

  return IconButtonToggle;
}((0, _base.withFoundation)({
  constructor: _mdc.MDCIconButtonToggle
}));

Object.defineProperty(IconButtonToggle, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'IconButton'
});
var IconButton = function IconButton(_ref) {
  var icon = _ref.icon,
      iconOptions = _ref.iconOptions,
      rest = _objectWithoutProperties(_ref, ['icon', 'iconOptions']);

  if (rest.onIcon) {
    return React.createElement(IconButtonToggle, Object.assign({}, rest, { icon: icon, iconOptions: iconOptions }));
  }

  return React.createElement(
    IconButtonRoot,
    Object.assign({ 'aria-hidden': 'true' }, rest),
    React.createElement(IconButtonIcon, { icon: icon, iconOptions: iconOptions })
  );
};

exports.IconButton = IconButton;
exports.default = IconButton;
