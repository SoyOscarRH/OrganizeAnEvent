'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleMenuSurface = exports.SimpleMenu = exports.MenuSurfaceAnchor = exports.MenuSurface = exports.MenuSurfaceRoot = exports.Menu = exports.MenuItem = exports.MenuItems = exports.MenuRoot = undefined;

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _mdc = require('@material/menu/dist/mdc.menu');

var _mdc2 = require('@material/menu-surface/dist/mdc.menuSurface');

var _list = require('@rmwc/list');

var _base = require('@rmwc/base');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ANCHOR_CORNER_MAP = {
  bottomEnd: 'BOTTOM_END',
  bottomLeft: 'BOTTOM_LEFT',
  bottomRight: 'BOTTOM_RIGHT',
  bottomStart: 'BOTTOM_START',
  topEnd: 'TOP_END',
  topLeft: 'TOP_LEFT',
  topRight: 'TOP_RIGHT',
  topStart: 'TOP_START'
};

// prettier-ignore


/****************************************************************
 * Menu
 ****************************************************************/
var MenuRoot = exports.MenuRoot = (0, _base.simpleTag)({
  displayName: 'MenuRoot',
  classNames: function classNames(props) {
    return ['mdc-menu', 'mdc-menu-surface', {
      'mdc-menu-surface--fixed': props.fixed
    }];
  },
  consumeProps: ['fixed'],
  defaultProps: {
    tabIndex: '-1'
  }
});

var MenuItems = exports.MenuItems = (0, _base.simpleTag)({
  displayName: 'MenuItems',
  tag: _list.List,
  classNames: 'mdc-list mdc-menu__items',
  defaultProps: {
    role: 'menu',
    'aria-hidden': 'true'
  }
});

/** This is just the ListItem component exported from the Menu module for convenience. You can use `ListItem` or `SimpleListItem` components from the List section as long as you add `role="menuitem"` and `tabIndex="0"` to the components for accessibility. */

var MenuItem = exports.MenuItem = function (_React$Component) {
  _inherits(MenuItem, _React$Component);

  function MenuItem() {
    _classCallCheck(this, MenuItem);

    return _possibleConstructorReturn(this, (MenuItem.__proto__ || Object.getPrototypeOf(MenuItem)).apply(this, arguments));
  }

  _createClass(MenuItem, [{
    key: 'render',
    value: function render() {
      return React.createElement(_list.ListItem, Object.assign({ role: 'menuitem', tabIndex: 0 }, this.props));
    }
  }]);

  return MenuItem;
}(React.Component);

/** A menu component for displaying lists items. */


Object.defineProperty(MenuItem, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'MenuItem'
});

var Menu = exports.Menu = function (_withFoundation) {
  _inherits(Menu, _withFoundation);

  function Menu(props) {
    _classCallCheck(this, Menu);

    //$FlowFixMe
    var _this2 = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));

    _this2.onCloseHandler_ = _this2.onCloseHandler_.bind(_this2);
    return _this2;
  }

  _createClass(Menu, [{
    key: 'syncWithProps',
    value: function syncWithProps(nextProps) {
      var _this3 = this;

      // open
      (0, _base.syncFoundationProp)(nextProps.open, this.open, function () {
        _this3.open = !!nextProps.open;
      });

      // anchorCorner
      if (this.foundation_ && nextProps.anchorCorner !== undefined && _mdc2.MDCMenuSurfaceFoundation.Corner[ANCHOR_CORNER_MAP[nextProps.anchorCorner]] !== this.foundation_.anchorCorner_) {
        this.setAnchorCorner(_mdc2.MDCMenuSurfaceFoundation.Corner[ANCHOR_CORNER_MAP[nextProps.anchorCorner]]);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), 'componentDidMount', this).call(this);
      this.menuSurface_.listen(_mdc2.MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, this.onCloseHandler_);

      if (this.foundation_) {
        this.foundation_.preventDefaultEvent_ = function (evt) {
          var target = evt.target;
          var tagName = ('' + target.tagName).toLowerCase();
          if (['input', 'button', 'textarea', 'select', 'a'].indexOf(tagName) === -1) {
            evt.preventDefault();
          }
        };
      }
    }
  }, {
    key: 'onCloseHandler_',
    value: function onCloseHandler_(evt) {
      this.props.onClose && this.props.onClose(evt);

      // little hack. We need to broadcast an CustomEvent from this component
      // in order to keep MDC and React in sync.
      // Otherwise, the internal state of the component can change and not be reflected in React
      this.emit('RESYNC', {});
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.menuSurface_.unlisten(_mdc2.MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, this.onCloseHandler_);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          open = _props.open,
          onClose = _props.onClose,
          onSelect = _props.onSelect,
          anchorCorner = _props.anchorCorner,
          rest = _objectWithoutProperties(_props, ['children', 'open', 'onClose', 'onSelect', 'anchorCorner']);

      var root_ = this.foundationRefs.root_;


      return React.createElement(
        MenuRoot,
        Object.assign({}, rest, { elementRef: root_ }),
        React.createElement(
          MenuItems,
          null,
          children
        )
      );
    }
  }]);

  return Menu;
}((0, _base.withFoundation)({
  constructor: _mdc.MDCMenu,
  adapter: {}
}));

/****************************************************************
 * MenuSurface
 ****************************************************************/


Object.defineProperty(Menu, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'Menu'
});
var MenuSurfaceRoot = exports.MenuSurfaceRoot = (0, _base.simpleTag)({
  displayName: 'MenuSurfaceRoot',
  classNames: function classNames(props) {
    return ['mdc-menu-surface', {
      'mdc-menu-surface--fixed': props.fixed
    }];
  },
  consumeProps: ['fixed']
});

/** A generic menu component for displaying any type of content. */

var MenuSurface = exports.MenuSurface = function (_withFoundation2) {
  _inherits(MenuSurface, _withFoundation2);

  function MenuSurface() {
    _classCallCheck(this, MenuSurface);

    return _possibleConstructorReturn(this, (MenuSurface.__proto__ || Object.getPrototypeOf(MenuSurface)).apply(this, arguments));
  }

  _createClass(MenuSurface, [{
    key: 'syncWithProps',
    value: function syncWithProps(nextProps) {
      var _this5 = this;

      //open
      (0, _base.syncFoundationProp)(nextProps.open, this.open, function () {
        _this5.open = !!nextProps.open;
      });

      // anchorCorner
      if (nextProps.anchorCorner !== undefined && _mdc2.MDCMenuSurfaceFoundation.Corner[ANCHOR_CORNER_MAP[nextProps.anchorCorner]] !== this.foundation_.anchorCorner_) {
        this.setAnchorCorner(_mdc2.MDCMenuSurfaceFoundation.Corner[ANCHOR_CORNER_MAP[nextProps.anchorCorner]]);
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      _get(MenuSurface.prototype.__proto__ || Object.getPrototypeOf(MenuSurface.prototype), 'destroy', this).call(this);
      // Some extra cleanup to avoid JS errors from MDC
      this.foundation_.adapter_.removeClass = function () {};
      this.deregisterBodyClickListener_();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          open = _props2.open,
          anchorCorner = _props2.anchorCorner,
          onOpen = _props2.onOpen,
          onClose = _props2.onClose,
          rest = _objectWithoutProperties(_props2, ['children', 'open', 'anchorCorner', 'onOpen', 'onClose']);

      var root_ = this.foundationRefs.root_;

      return React.createElement(
        MenuSurfaceRoot,
        Object.assign({}, rest, { elementRef: root_ }),
        children
      );
    }
  }]);

  return MenuSurface;
}((0, _base.withFoundation)({
  constructor: _mdc2.MDCMenuSurface,
  adapter: {}
}));

/****************************************************************
 * MenuSurfaceAnchor
 ****************************************************************/

/** A Menu Anchor. When using the anchorCorner prop of Menu, you must set MenuSurfaceAnchors css style position to absolute. */


var MenuSurfaceAnchor = exports.MenuSurfaceAnchor = (0, _base.simpleTag)({
  displayName: 'MenuSurfaceAnchor',
  classNames: 'mdc-menu-surface--anchor'
});

/****************************************************************
 * Simple Menu
 ****************************************************************/


var simpleMenuFactory = function simpleMenuFactory(MenuComponent) {
  var _class, _temp2;

  return _temp2 = _class = function (_React$Component2) {
    _inherits(_class, _React$Component2);

    function _class() {
      var _ref;

      var _temp, _this6, _ret;

      _classCallCheck(this, _class);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this6 = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this6), Object.defineProperty(_this6, 'state', {
        enumerable: true,
        writable: true,
        value: {
          open: false
        }
      }), _temp), _possibleConstructorReturn(_this6, _ret);
    }

    _createClass(_class, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this.syncWithOpenProp(this.props.open);
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this.syncWithOpenProp(nextProps.open);
      }
    }, {
      key: 'syncWithOpenProp',
      value: function syncWithOpenProp(open) {
        if (open !== undefined && this.state.open !== open) {
          this.setState({ open: open });
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _this7 = this;

        var _props3 = this.props,
            handle = _props3.handle,
            onClose = _props3.onClose,
            children = _props3.children,
            _props3$rootProps = _props3.rootProps,
            rootProps = _props3$rootProps === undefined ? {} : _props3$rootProps,
            open = _props3.open,
            rest = _objectWithoutProperties(_props3, ['handle', 'onClose', 'children', 'rootProps', 'open']);

        var wrappedHandle = React.cloneElement(handle, Object.assign({}, handle.props, {
          onClick: function onClick(evt) {
            _this7.setState({ open: true });
            if (handle.props.onClick) {
              handle.props.onClick(evt);
            }
          }
        }));

        var wrappedOnClose = function wrappedOnClose(evt) {
          _this7.setState({ open: open || false });
          if (onClose) {
            onClose(evt);
          }
        };

        return React.createElement(
          MenuSurfaceAnchor,
          rootProps,
          React.createElement(
            MenuComponent,
            Object.assign({}, rest, {
              onClose: wrappedOnClose,
              open: this.state.open
            }),
            children
          ),
          wrappedHandle
        );
      }
    }]);

    return _class;
  }(React.Component), Object.defineProperty(_class, 'displayName', {
    enumerable: true,
    writable: true,
    value: 'SimpleMenu'
  }), _temp2;
};

var SimpleMenuRoot = simpleMenuFactory(Menu);

/**
 * A Simplified menu component that allows you to pass a handle element and will automatically control the open state and add a MenuSurfaceAnchor
 */
var SimpleMenu = exports.SimpleMenu = function SimpleMenu(props) {
  return React.createElement(SimpleMenuRoot, props);
};

var SimpleMenuSurfaceRoot = simpleMenuFactory(MenuSurface);

/**
 * The same as SimpleMenu, but a generic surface.
 */
var SimpleMenuSurface = exports.SimpleMenuSurface = function SimpleMenuSurface(props) {
  return React.createElement(SimpleMenuSurfaceRoot, props);
};
