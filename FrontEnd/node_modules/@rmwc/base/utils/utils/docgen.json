{
  "src/Base/utils/DocumentComponent.js": [
    {
      "description": "",
      "displayName": "DocumentComponent",
      "methods": [],
      "props": {
        "composes": {
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
  "src/Button/index.js": [
    {
      "description": "An icon that goes inside of buttons. This is an instance of the Icon component.",
      "displayName": "ButtonIcon",
      "methods": []
    },
    {
      "description": "The Button component. Buttons also accepts all of the props from the Ripple component.",
      "displayName": "Button",
      "methods": [],
      "props": {
        "dense": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the Button dense.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "raised": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the Button raised.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "unelevated": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the button unelevated.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "outlined": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the button outlined.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "make the button disabled"
        },
        "ripple": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Enable / disable the ripple.",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      },
      "context": {
        "RMWCOptions": {
          "type": {
            "name": "object"
          },
          "required": false
        }
      }
    }
  ],
  "src/Card/index.js": [
    {
      "description": "A Card Component",
      "displayName": "Card",
      "methods": [],
      "props": {
        "outlined": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Removes the shadow and displays a hairline outline instead"
        }
      }
    },
    {
      "description": "Media area that displays a custom background-image with background-size: cover",
      "displayName": "CardMedia",
      "methods": [],
      "props": {
        "square": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Automatically scales the media area’s height to equal its width"
        },
        "sixteenByNine": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Automatically scales the media area’s height according to its width, maintaining a 16:9 aspect ratio"
        }
      }
    },
    {
      "description": "An absolutely-positioned box the same size as the media area, for displaying a title or icon on top of the background-image",
      "displayName": "CardMediaContent",
      "methods": []
    },
    {
      "description": "The main clickable area for the primary content of the card",
      "displayName": "CardPrimaryAction",
      "methods": []
    },
    {
      "description": "Row containing action buttons and/or icons",
      "displayName": "CardActions",
      "methods": [],
      "props": {
        "fullBleed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Removes the action area’s padding and causes its only child (an mdc-card__action element) to consume 100% of the action area’s width"
        }
      }
    },
    {
      "description": "A group of action buttons, displayed on the left side of the card (in LTR), adjacent to CardActionIcons",
      "displayName": "CardActionButtons",
      "methods": []
    },
    {
      "description": "A group of supplemental action icons, displayed on the right side of the card (in LTR), adjacent to CardActionButtons",
      "displayName": "CardActionIcons",
      "methods": []
    },
    {
      "description": "A Card action Button. Depending on the props that are passed, this will either render an instance of the Button component, or the IconButton component.",
      "displayName": "CardAction",
      "methods": []
    }
  ],
  "src/Checkbox/index.js": [
    {
      "description": "",
      "displayName": "CheckboxRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** A DOM ID for the toggle. */\n  id?: string,\n  /** Disables the control. */\n  disabled?: boolean,\n  /** Toggle the control on and off. */\n  checked?: boolean | string,\n  /** The value of the control. */\n  value?: boolean | string | number,\n  /** Make the control indeterminate */\n  indeterminate?: boolean,\n  /** A label for the control. */\n  label?: string\n} & SimpleTagPropsT &\n  //$FlowFixMe\n  React.InputHTMLAttributes<HTMLInputElement>",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** A DOM ID for the toggle. */\n  id?: string,\n  /** Disables the control. */\n  disabled?: boolean,\n  /** Toggle the control on and off. */\n  checked?: boolean | string,\n  /** The value of the control. */\n  value?: boolean | string | number,\n  /** Make the control indeterminate */\n  indeterminate?: boolean,\n  /** A label for the control. */\n  label?: string\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "checked",
                          "value": {
                            "name": "union",
                            "raw": "boolean | string",
                            "elements": [
                              {
                                "name": "boolean"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "boolean | string | number",
                            "elements": [
                              {
                                "name": "boolean"
                              },
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "indeterminate",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  },
                  {
                    "name": "ReactInputHTMLAttributes",
                    "raw": "React.InputHTMLAttributes<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  }
                ],
                "alias": "CheckboxPropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "CheckboxNativeControl",
      "methods": [],
      "props": {
        "type": {
          "defaultValue": {
            "value": "'checkbox'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "CheckboxBackground",
      "methods": []
    },
    {
      "description": "",
      "displayName": "CheckboxCheckmark",
      "methods": [],
      "props": {
        "viewBox": {
          "defaultValue": {
            "value": "'0 0 24 24'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "CheckboxCheckmarkPath",
      "methods": [],
      "props": {
        "fill": {
          "defaultValue": {
            "value": "'none'",
            "computed": false
          },
          "required": false
        },
        "stroke": {
          "defaultValue": {
            "value": "'white'",
            "computed": false
          },
          "required": false
        },
        "d": {
          "defaultValue": {
            "value": "'M1.73,12.91 8.1,19.28 22.79,4.59'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "CheckboxMixedmark",
      "methods": []
    },
    {
      "description": "",
      "displayName": "CheckboxLabel",
      "methods": []
    },
    {
      "description": "A Checkbox component",
      "displayName": "Checkbox",
      "methods": [
        {
          "name": "destroy",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** A DOM ID for the toggle. */\n  id?: string,\n  /** Disables the control. */\n  disabled?: boolean,\n  /** Toggle the control on and off. */\n  checked?: boolean | string,\n  /** The value of the control. */\n  value?: boolean | string | number,\n  /** Make the control indeterminate */\n  indeterminate?: boolean,\n  /** A label for the control. */\n  label?: string\n} & SimpleTagPropsT &\n  React.InputHTMLAttributes<HTMLInputElement>",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** A DOM ID for the toggle. */\n  id?: string,\n  /** Disables the control. */\n  disabled?: boolean,\n  /** Toggle the control on and off. */\n  checked?: boolean | string,\n  /** The value of the control. */\n  value?: boolean | string | number,\n  /** Make the control indeterminate */\n  indeterminate?: boolean,\n  /** A label for the control. */\n  label?: string\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "checked",
                          "value": {
                            "name": "union",
                            "raw": "boolean | string",
                            "elements": [
                              {
                                "name": "boolean"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "boolean | string | number",
                            "elements": [
                              {
                                "name": "boolean"
                              },
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "indeterminate",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  },
                  {
                    "name": "ReactInputHTMLAttributes",
                    "raw": "React.InputHTMLAttributes<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  }
                ],
                "alias": "CheckboxPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "id": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A DOM ID for the toggle."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the control."
        },
        "checked": {
          "flowType": {
            "name": "union",
            "raw": "boolean | string",
            "elements": [
              {
                "name": "boolean"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Toggle the control on and off."
        },
        "value": {
          "flowType": {
            "name": "union",
            "raw": "boolean | string | number",
            "elements": [
              {
                "name": "boolean"
              },
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "The value of the control."
        },
        "indeterminate": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the control indeterminate"
        },
        "label": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A label for the control."
        }
      }
    }
  ],
  "src/Chip/index.js": [
    {
      "description": "A chip component.",
      "displayName": "ChipRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** A custom event you can use from MCW. You can also just use onClick instead. */\n  onInteraction?: (evt: Event) => mixed,\n  /** A custom event for the trailing icon that you can use from MCW. You can also just use onClick instead. */\n  onTrailingIconInteraction?: (evt: Event) => mixed,\n  /** A custom event for when the chip is removed. */\n  onRemoval?: (evt: Event) => mixed,\n  /** makes the Chip appear selected. */\n  selected?: boolean\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** A custom event you can use from MCW. You can also just use onClick instead. */\n  onInteraction?: (evt: Event) => mixed,\n  /** A custom event for the trailing icon that you can use from MCW. You can also just use onClick instead. */\n  onTrailingIconInteraction?: (evt: Event) => mixed,\n  /** A custom event for when the chip is removed. */\n  onRemoval?: (evt: Event) => mixed,\n  /** makes the Chip appear selected. */\n  selected?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "onInteraction",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: Event) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "Event"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "onTrailingIconInteraction",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: Event) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "Event"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "onRemoval",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: Event) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "Event"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "selected",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "ChipPropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "Chip",
      "methods": [
        {
          "name": "initialize",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "onInteraction": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "A custom event you can use from MCW. You can also just use onClick instead."
        },
        "onTrailingIconInteraction": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "A custom event for the trailing icon that you can use from MCW. You can also just use onClick instead."
        },
        "onRemoval": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: Event) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "Event"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "A custom event for when the chip is removed."
        },
        "selected": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "makes the Chip appear selected."
        }
      }
    },
    {
      "description": "A checkmark for chip selection and filtering.",
      "displayName": "ChipCheckmark",
      "methods": []
    },
    {
      "description": "Text for a chip.",
      "displayName": "ChipText",
      "methods": []
    },
    {
      "description": "Icons inside of a chip. This is an instance of the Icon component. To make the icons interactive, add props tabIndex=\"0\" and role=\"button\".",
      "displayName": "ChipIconRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Make it a leading icon */\n  leading?: boolean,\n  /** Make it a trailing icon */\n  trailing?: boolean\n} & SimpleTagPropsT &\n  IconPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Make it a leading icon */\n  leading?: boolean,\n  /** Make it a trailing icon */\n  trailing?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "leading",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "trailing",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  },
                  {
                    "name": "IconPropsT"
                  }
                ],
                "alias": "ChipIconPropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "ChipIcon",
      "methods": [],
      "props": {
        "leading": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make it a leading icon"
        },
        "trailing": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make it a trailing icon"
        }
      }
    },
    {
      "description": "",
      "displayName": "ChipSetRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "signature",
                "type": "object",
                "raw": "{\n  /** Creates a choice chipset */\n  choice?: boolean,\n  /** Creates a filter chipset */\n  filter?: boolean\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "choice",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    },
                    {
                      "key": "filter",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    }
                  ]
                },
                "alias": "ChipSetPropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "A container for multiple Chip components.",
      "displayName": "ChipSet",
      "methods": [],
      "props": {
        "choice": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Creates a choice chipset"
        },
        "filter": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Creates a filter chipset"
        }
      }
    },
    {
      "description": "A non-standard abbreviated way for rendering chips.",
      "displayName": "SimpleChip",
      "methods": [],
      "props": {
        "text": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Text for your Chip"
        },
        "leadingIcon": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Instance of an Icon Component"
        },
        "trailingIcon": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Instance of an Icon Component"
        },
        "checkmark": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Includes a checkmark for the selected state"
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Additional children will be rendered in the text area"
        }
      }
    }
  ],
  "src/Dialog/index.js": [
    {
      "description": "",
      "displayName": "DialogRoot",
      "methods": [],
      "props": {
        "role": {
          "defaultValue": {
            "value": "'alertdialog'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "The Dialog backdrop",
      "displayName": "DialogBackdrop",
      "methods": []
    },
    {
      "description": "The Dialog surface",
      "displayName": "DialogSurface",
      "methods": []
    },
    {
      "description": "The Dialog header",
      "displayName": "DialogHeader",
      "methods": []
    },
    {
      "description": "The Dialog title",
      "displayName": "DialogHeaderTitle",
      "methods": []
    },
    {
      "description": "The Dialog body",
      "displayName": "DialogBody",
      "methods": [],
      "props": {
        "scrollable": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make it scrollable."
        }
      }
    },
    {
      "description": "The Dialog footer",
      "displayName": "DialogFooter",
      "methods": []
    },
    {
      "description": "A Dialog footer button",
      "displayName": "DialogFooterButton",
      "methods": []
    },
    {
      "description": "",
      "displayName": "Dialog",
      "methods": [
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "signature",
                "type": "object",
                "raw": "{\n  /** Whether or not the Dialog is showing. */\n  open: boolean,\n  /** Callback for when the accept Button is pressed. */\n  onAccept?: (evt: CustomEventT<void>) => mixed,\n  /** Callback for when the Dialog was closed without acceptance. */\n  onCancel?: (evt: CustomEventT<void>) => mixed,\n  /** Callback for when the Dialog closes. */\n  onClose?: (evt: CustomEventT<void>) => mixed\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "open",
                      "value": {
                        "name": "boolean",
                        "required": true
                      }
                    },
                    {
                      "key": "onAccept",
                      "value": {
                        "name": "signature",
                        "type": "function",
                        "raw": "(evt: CustomEventT<void>) => mixed",
                        "signature": {
                          "arguments": [
                            {
                              "name": "evt",
                              "type": {
                                "name": "CustomEventT",
                                "elements": [
                                  {
                                    "name": "void"
                                  }
                                ],
                                "raw": "CustomEventT<void>"
                              }
                            }
                          ],
                          "return": {
                            "name": "mixed"
                          }
                        },
                        "required": false
                      }
                    },
                    {
                      "key": "onCancel",
                      "value": {
                        "name": "signature",
                        "type": "function",
                        "raw": "(evt: CustomEventT<void>) => mixed",
                        "signature": {
                          "arguments": [
                            {
                              "name": "evt",
                              "type": {
                                "name": "CustomEventT",
                                "elements": [
                                  {
                                    "name": "void"
                                  }
                                ],
                                "raw": "CustomEventT<void>"
                              }
                            }
                          ],
                          "return": {
                            "name": "mixed"
                          }
                        },
                        "required": false
                      }
                    },
                    {
                      "key": "onClose",
                      "value": {
                        "name": "signature",
                        "type": "function",
                        "raw": "(evt: CustomEventT<void>) => mixed",
                        "signature": {
                          "arguments": [
                            {
                              "name": "evt",
                              "type": {
                                "name": "CustomEventT",
                                "elements": [
                                  {
                                    "name": "void"
                                  }
                                ],
                                "raw": "CustomEventT<void>"
                              }
                            }
                          ],
                          "return": {
                            "name": "mixed"
                          }
                        },
                        "required": false
                      }
                    }
                  ]
                },
                "alias": "DialogPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "open": {
          "flowType": {
            "name": "boolean"
          },
          "required": true,
          "description": "Whether or not the Dialog is showing."
        },
        "onAccept": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback for when the accept Button is pressed."
        },
        "onCancel": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback for when the Dialog was closed without acceptance."
        },
        "onClose": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback for when the Dialog closes."
        }
      }
    },
    {
      "description": "A non-standard SimpleDialog component for ease of use.",
      "displayName": "SimpleDialog",
      "methods": [],
      "props": {
        "title": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "A title for the default Dialog template.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "header": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Additional Dialog header content for the default Dialog template.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "body": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Body content for the default Dialog template, rendered before children.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "footer": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Additional footer content for the default Dialog template, rendered before any buttons.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "acceptLabel": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Creates an accept button for the default Dialog template with a given label. You can pass `null` to remove the button.",
          "defaultValue": {
            "value": "'Accept'",
            "computed": false
          }
        },
        "cancelLabel": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Creates an cancel button for the default Dialog with a given label. You can pass `null` to remove the button.",
          "defaultValue": {
            "value": "'Cancel'",
            "computed": false
          }
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Any children will be rendered in the body of the default Dialog template.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "scrollable": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Allow the body to be scrollable",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "open": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Whether or not the Dialog is showing.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onAccept": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback for when the accept Button is pressed.",
          "defaultValue": {
            "value": "noop",
            "computed": true
          }
        },
        "onCancel": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback for when the Dialog was closed without acceptance.",
          "defaultValue": {
            "value": "noop",
            "computed": true
          }
        },
        "onClose": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback for when the Dialog closes.",
          "defaultValue": {
            "value": "noop",
            "computed": true
          }
        }
      }
    }
  ],
  "src/Drawer/index.js": [
    {
      "description": "An optional header for the Drawer.",
      "displayName": "DrawerHeader",
      "methods": []
    },
    {
      "description": "An title for the DrawerHeader.",
      "displayName": "DrawerTitle",
      "methods": []
    },
    {
      "description": "A subtitle for the DrawerHeader.",
      "displayName": "DrawerSubtitle",
      "methods": []
    },
    {
      "description": "Content for Drawers. Please note this is an instance of mdc-list by default. You can change this to a a non list container by specifying the tag as 'div' or anything else.",
      "displayName": "DrawerContent",
      "methods": []
    },
    {
      "description": "Protects the app's UI from interactions while a modal drawer is open.\nThis is automatically included if you're using React 16 and above.\nFor React 15, you must manually include it immediately after a modal Drawer.",
      "displayName": "DrawerScrim",
      "methods": []
    },
    {
      "description": "For the Dismissible variant only. Sibling element that is resized when the drawer opens/closes.",
      "displayName": "DrawerAppContent",
      "methods": []
    },
    {
      "description": "",
      "displayName": "DrawerRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Opens or closes the Drawer. */\n  open?: boolean,\n  /** Callback that fires when the Drawer is closed. */\n  onClose?: (evt: CustomEventT<void>) => mixed,\n  /** Callback that fires when the Drawer is opened. */\n  onOpen?: (evt: CustomEventT<void>) => mixed,\n  /** Makes a dismissible drawer. */\n  dismissible?: boolean,\n  /** Makes a modal / temporary drawer. */\n  modal?: boolean\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Opens or closes the Drawer. */\n  open?: boolean,\n  /** Callback that fires when the Drawer is closed. */\n  onClose?: (evt: CustomEventT<void>) => mixed,\n  /** Callback that fires when the Drawer is opened. */\n  onOpen?: (evt: CustomEventT<void>) => mixed,\n  /** Makes a dismissible drawer. */\n  dismissible?: boolean,\n  /** Makes a modal / temporary drawer. */\n  modal?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "open",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "onClose",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<void>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "void"
                                      }
                                    ],
                                    "raw": "CustomEventT<void>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "onOpen",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<void>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "void"
                                      }
                                    ],
                                    "raw": "CustomEventT<void>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "dismissible",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "modal",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "DrawerPropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "Drawer",
      "methods": [],
      "props": {
        "open": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Opens or closes the Drawer."
        },
        "onClose": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that fires when the Drawer is closed."
        },
        "onOpen": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that fires when the Drawer is opened."
        },
        "dismissible": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes a dismissible drawer."
        },
        "modal": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes a modal / temporary drawer."
        }
      }
    }
  ],
  "src/Elevation/index.js": [
    {
      "description": "The Elevation Component",
      "displayName": "Elevation",
      "methods": [],
      "props": {
        "z": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": true,
          "description": "A number from 0 - 24 for different levels of elevation"
        },
        "transition": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Allows for smooth transitions between elevations when the z value changes."
        }
      }
    }
  ],
  "src/Fab/index.js": [
    {
      "description": "",
      "displayName": "FabIcon",
      "methods": []
    },
    {
      "description": "",
      "displayName": "FabLabel",
      "methods": []
    },
    {
      "description": "A floating action button component",
      "displayName": "Fab",
      "methods": [],
      "props": {
        "mini": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the Fab smaller."
        },
        "label": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Make the Fab extended with a label."
        },
        "exited": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Animates the FAB out of view. When this class is removed, the FAB will return to view."
        },
        "ripple": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Enable / disable the ripple.",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        }
      },
      "context": {
        "RMWCOptions": {
          "type": {
            "name": "object"
          },
          "required": false
        }
      }
    }
  ],
  "src/FloatingLabel/index.js": [
    {
      "description": "",
      "displayName": "FloatingLabel",
      "methods": []
    }
  ],
  "src/FormField/index.js": [
    {
      "description": "",
      "displayName": "FormFieldRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Position the input after the label. */\n  alignEnd?: boolean\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Position the input after the label. */\n  alignEnd?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "alignEnd",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "FormFieldRootPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "alignEnd": {
          "defaultValue": {
            "value": "undefined",
            "computed": true
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "FormField",
      "methods": [],
      "props": {
        "alignEnd": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Position the input after the label."
        }
      }
    }
  ],
  "src/Grid/index.js": [
    {
      "description": "",
      "displayName": "GridRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Specifies the grid should have fixed column width. */\n  fixedColumnWidth?: boolean,\n  /** Specifies the alignment of the whole grid. */\n  align?: 'left' | 'right'\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Specifies the grid should have fixed column width. */\n  fixedColumnWidth?: boolean,\n  /** Specifies the alignment of the whole grid. */\n  align?: 'left' | 'right'\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "fixedColumnWidth",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "align",
                          "value": {
                            "name": "union",
                            "raw": "'left' | 'right'",
                            "elements": [
                              {
                                "name": "literal",
                                "value": "'left'"
                              },
                              {
                                "name": "literal",
                                "value": "'right'"
                              }
                            ],
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "GridPropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "A Grid cell",
      "displayName": "GridCell",
      "methods": [],
      "props": {
        "span": {
          "flowType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Default number of columns to span."
        },
        "phone": {
          "flowType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of columns to span on a phone."
        },
        "tablet": {
          "flowType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of columns to span on a tablet."
        },
        "desktop": {
          "flowType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Number of columns to span on a desktop."
        },
        "order": {
          "flowType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Specifies the order of the cell."
        },
        "align": {
          "flowType": {
            "name": "union",
            "raw": "'top' | 'middle' | 'bottom'",
            "elements": [
              {
                "name": "literal",
                "value": "'top'"
              },
              {
                "name": "literal",
                "value": "'middle'"
              },
              {
                "name": "literal",
                "value": "'bottom'"
              }
            ]
          },
          "required": false,
          "description": "Specifies the alignment of cell"
        }
      }
    },
    {
      "description": "By default, an inner grid component is included inside of <Grid>. Use GridInner when doing nested Grids.",
      "displayName": "GridInner",
      "methods": []
    },
    {
      "description": "A Grid component",
      "displayName": "Grid",
      "methods": [],
      "props": {
        "fixedColumnWidth": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Specifies the grid should have fixed column width."
        },
        "align": {
          "flowType": {
            "name": "union",
            "raw": "'left' | 'right'",
            "elements": [
              {
                "name": "literal",
                "value": "'left'"
              },
              {
                "name": "literal",
                "value": "'right'"
              }
            ]
          },
          "required": false,
          "description": "Specifies the alignment of the whole grid."
        }
      }
    }
  ],
  "src/GridList/index.js": [
    {
      "description": "",
      "displayName": "GridListRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Use a 1px gutter. */\n  tileGutter1?: boolean,\n  /** Move the caption to the top of the card. */\n  headerCaption?: boolean,\n  /** Make the caption two lines. */\n  twolineCaption?: boolean,\n  /** Leaves space for a start aligned icon. */\n  withIconAlignStart?: boolean,\n  /** One of the following values: 1x1, 16x9, 2x3, 3x2, 4x3, 3x4. */\n  tileAspect?: '1x1' | '16x9' | '2x3' | '3x2' | '4x3' | '3x4'\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Use a 1px gutter. */\n  tileGutter1?: boolean,\n  /** Move the caption to the top of the card. */\n  headerCaption?: boolean,\n  /** Make the caption two lines. */\n  twolineCaption?: boolean,\n  /** Leaves space for a start aligned icon. */\n  withIconAlignStart?: boolean,\n  /** One of the following values: 1x1, 16x9, 2x3, 3x2, 4x3, 3x4. */\n  tileAspect?: '1x1' | '16x9' | '2x3' | '3x2' | '4x3' | '3x4'\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "tileGutter1",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "headerCaption",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "twolineCaption",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "withIconAlignStart",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "tileAspect",
                          "value": {
                            "name": "union",
                            "raw": "'1x1' | '16x9' | '2x3' | '3x2' | '4x3' | '3x4'",
                            "elements": [
                              {
                                "name": "literal",
                                "value": "'1x1'"
                              },
                              {
                                "name": "literal",
                                "value": "'16x9'"
                              },
                              {
                                "name": "literal",
                                "value": "'2x3'"
                              },
                              {
                                "name": "literal",
                                "value": "'3x2'"
                              },
                              {
                                "name": "literal",
                                "value": "'4x3'"
                              },
                              {
                                "name": "literal",
                                "value": "'3x4'"
                              }
                            ],
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "GridListPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "tileGutter1": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        },
        "headerCaption": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        },
        "twolineCaption": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        },
        "withIconAlignStart": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        },
        "tileAspect": {
          "defaultValue": {
            "value": "'1x1'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "GridListTiles",
      "methods": []
    },
    {
      "description": "The primary content for a Grid tile",
      "displayName": "GridTilePrimary",
      "methods": []
    },
    {
      "description": "",
      "displayName": "GridTilePrimaryContent",
      "methods": [],
      "props": {
        "wrap": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "A grid tile",
      "displayName": "GridTile",
      "methods": []
    },
    {
      "description": "The secondary content for a Grid tile",
      "displayName": "GridTileSecondary",
      "methods": []
    },
    {
      "description": "The icon for a Grid tile. This is an instance of Icon component.",
      "displayName": "GridTileIcon",
      "methods": []
    },
    {
      "description": "The title for a Grid tile",
      "displayName": "GridTileTitle",
      "methods": []
    },
    {
      "description": "Supporting Text for the Grid Tile",
      "displayName": "GridTileTitleSupportText",
      "methods": []
    },
    {
      "description": "Grid List Component",
      "displayName": "GridList",
      "methods": [],
      "props": {
        "tileGutter1": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Use a 1px gutter."
        },
        "headerCaption": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Move the caption to the top of the card."
        },
        "twolineCaption": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the caption two lines."
        },
        "withIconAlignStart": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Leaves space for a start aligned icon."
        },
        "tileAspect": {
          "flowType": {
            "name": "union",
            "raw": "'1x1' | '16x9' | '2x3' | '3x2' | '4x3' | '3x4'",
            "elements": [
              {
                "name": "literal",
                "value": "'1x1'"
              },
              {
                "name": "literal",
                "value": "'16x9'"
              },
              {
                "name": "literal",
                "value": "'2x3'"
              },
              {
                "name": "literal",
                "value": "'3x2'"
              },
              {
                "name": "literal",
                "value": "'4x3'"
              },
              {
                "name": "literal",
                "value": "'3x4'"
              }
            ]
          },
          "required": false,
          "description": "One of the following values: 1x1, 16x9, 2x3, 3x2, 4x3, 3x4."
        }
      }
    }
  ],
  "src/Icon/index.js": [
    {
      "description": "",
      "displayName": "IconRoot",
      "methods": []
    },
    {
      "description": "An Icon component. Most of these options can be set once globally, read the documentation on Provider for more info.",
      "displayName": "Icon",
      "methods": [],
      "props": {
        "icon": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "The icon to use. This can be a string for a font icon, a url, or whatever the selected strategy needs."
        },
        "iconOptions": {
          "flowType": {
            "name": "IconOptionsT"
          },
          "required": false,
          "description": "Additional Icon Options. See the Icon component documentation."
        }
      },
      "context": {
        "RMWCOptions": {
          "type": {
            "name": "object"
          },
          "required": false
        }
      }
    }
  ],
  "src/IconButton/index.js": [
    {
      "description": "",
      "displayName": "IconButtonIcon",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "signature",
                "type": "object",
                "raw": "{ on: boolean }",
                "signature": {
                  "properties": [
                    {
                      "key": "on",
                      "value": {
                        "name": "boolean",
                        "required": true
                      }
                    }
                  ]
                }
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "IconButton",
      "methods": [],
      "props": {
        "checked": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Controls the on / off state of the a toggleable button."
        },
        "onChange": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<{ isOn: boolean }>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{ isOn: boolean }",
                        "signature": {
                          "properties": [
                            {
                              "key": "isOn",
                              "value": {
                                "name": "boolean",
                                "required": true
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "raw": "CustomEventT<{ isOn: boolean }>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "An onChange callback that receives a custom event."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the button disabled"
        },
        "onIcon": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "If specified, renders a toggle with this icon as the on state."
        },
        "onIconOptions": {
          "flowType": {
            "name": "IconOptionsT"
          },
          "required": false,
          "description": "Options for the onIcon"
        }
      }
    }
  ],
  "src/IconToggle/index.js": [
    {
      "description": "",
      "displayName": "IconToggleRoot",
      "methods": [],
      "props": {
        "role": {
          "defaultValue": {
            "value": "'button'",
            "computed": false
          },
          "required": false
        },
        "tabIndex": {
          "defaultValue": {
            "value": "'0'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "IconToggle",
      "methods": [
        {
          "name": "initialize",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "intersection",
                "raw": "{\n  /* prettier-ignore */\n  /** An onChange callback that receives a custom event. */\n  onChange?: (evt: CustomEventT<IconToggleChangeEventDetailT>) => mixed,\n  /** An object that can be parsed as valid JSON that gets passed to the MDC constructor. */\n  on: Object,\n  /** An object that can be parsed as valid JSON that gets passed to the MDC constructor. */\n  off: Object,\n  /** Whether the toggle is on or off */\n  checked?: boolean,\n  /** Disables the iconToggle */\n  disabled?: boolean\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /* prettier-ignore */\n  /** An onChange callback that receives a custom event. */\n  onChange?: (evt: CustomEventT<IconToggleChangeEventDetailT>) => mixed,\n  /** An object that can be parsed as valid JSON that gets passed to the MDC constructor. */\n  on: Object,\n  /** An object that can be parsed as valid JSON that gets passed to the MDC constructor. */\n  off: Object,\n  /** Whether the toggle is on or off */\n  checked?: boolean,\n  /** Disables the iconToggle */\n  disabled?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "onChange",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<IconToggleChangeEventDetailT>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "signature",
                                        "type": "object",
                                        "raw": "{\n    isOn: boolean;\n}",
                                        "signature": {
                                          "properties": [
                                            {
                                              "key": "isOn",
                                              "value": {
                                                "name": "boolean",
                                                "required": true
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "raw": "CustomEventT<IconToggleChangeEventDetailT>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "on",
                          "value": {
                            "name": "Object",
                            "required": true
                          }
                        },
                        {
                          "key": "off",
                          "value": {
                            "name": "Object",
                            "required": true
                          }
                        },
                        {
                          "key": "checked",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "IconTogglePropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "onChange": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<IconToggleChangeEventDetailT>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n    isOn: boolean;\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "isOn",
                              "value": {
                                "name": "boolean",
                                "required": true
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "raw": "CustomEventT<IconToggleChangeEventDetailT>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "An onChange callback that receives a custom event.",
          "defaultValue": {
            "value": "noop",
            "computed": true
          }
        },
        "on": {
          "flowType": {
            "name": "Object"
          },
          "required": false,
          "description": "An object that can be parsed as valid JSON that gets passed to the MDC constructor.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "off": {
          "flowType": {
            "name": "Object"
          },
          "required": false,
          "description": "An object that can be parsed as valid JSON that gets passed to the MDC constructor.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "checked": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Whether the toggle is on or off",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the iconToggle"
        }
      }
    }
  ],
  "src/ImageList/index.js": [
    {
      "description": "Indicates the root Image List element.",
      "displayName": "ImageList",
      "methods": [],
      "props": {
        "masonry": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Indicates that this Image List should use the Masonry variant."
        },
        "withTextProtection": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Indicates that supporting content should be positioned in a scrim overlaying each image (instead of positioned separately under each image)."
        }
      }
    },
    {
      "description": "Indicates each item in an Image List.",
      "displayName": "ImageListItem",
      "methods": []
    },
    {
      "description": "Optional. Parent of each item’s image element, responsible for constraining aspect ratio. This element may be omitted entirely if images are already sized to the correct aspect ratio.",
      "displayName": "ImageListImageAspectContainer",
      "methods": []
    },
    {
      "description": "Indicates the image element in each item.",
      "displayName": "ImageListImage",
      "methods": []
    },
    {
      "description": "Optional. Indicates the area within each item containing the supporting text label, if the Image List contains text labels.",
      "displayName": "ImageListSupporting",
      "methods": []
    },
    {
      "description": "Optional. Indicates the text label in each item, if the Image List contains text labels.",
      "displayName": "ImageListLabel",
      "methods": []
    }
  ],
  "src/LineRipple/index.js": [
    {
      "description": "",
      "displayName": "LineRipple",
      "methods": []
    }
  ],
  "src/LinearProgress/index.js": [
    {
      "description": "",
      "displayName": "LinearProgressRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Progress float percentage between 0 and 1. */\n  progress?: number | string,\n  /** A Progress buffer float percentage between 0 and 1. */\n  buffer?: number | string,\n  /** Whether or not the Progress bar is determinate. */\n  determinate?: boolean,\n  /** Progress goes from right to left. */\n  reversed?: boolean,\n  /** Hides the progress bar. Adding / removing this prop will trigger an animation in or out.  */\n  closed?: boolean\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Progress float percentage between 0 and 1. */\n  progress?: number | string,\n  /** A Progress buffer float percentage between 0 and 1. */\n  buffer?: number | string,\n  /** Whether or not the Progress bar is determinate. */\n  determinate?: boolean,\n  /** Progress goes from right to left. */\n  reversed?: boolean,\n  /** Hides the progress bar. Adding / removing this prop will trigger an animation in or out.  */\n  closed?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "progress",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "buffer",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "determinate",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "reversed",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "closed",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "LinearProgressPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "role": {
          "defaultValue": {
            "value": "'progressbar'",
            "computed": false
          },
          "required": false
        },
        "determinate": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "required": false
        },
        "reversed": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        },
        "accent": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "LinearProgressBufferingDots",
      "methods": []
    },
    {
      "description": "",
      "displayName": "LinearProgressBuffer",
      "methods": []
    },
    {
      "description": "",
      "displayName": "LinearProgressPrimaryBar",
      "methods": []
    },
    {
      "description": "",
      "displayName": "LinearProgressSecondaryBar",
      "methods": []
    },
    {
      "description": "",
      "displayName": "LinearProgressBarInner",
      "methods": []
    },
    {
      "description": "",
      "displayName": "LinearProgress",
      "methods": [
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Progress float percentage between 0 and 1. */\n  progress?: number | string,\n  /** A Progress buffer float percentage between 0 and 1. */\n  buffer?: number | string,\n  /** Whether or not the Progress bar is determinate. */\n  determinate?: boolean,\n  /** Progress goes from right to left. */\n  reversed?: boolean,\n  /** Hides the progress bar. Adding / removing this prop will trigger an animation in or out.  */\n  closed?: boolean\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Progress float percentage between 0 and 1. */\n  progress?: number | string,\n  /** A Progress buffer float percentage between 0 and 1. */\n  buffer?: number | string,\n  /** Whether or not the Progress bar is determinate. */\n  determinate?: boolean,\n  /** Progress goes from right to left. */\n  reversed?: boolean,\n  /** Hides the progress bar. Adding / removing this prop will trigger an animation in or out.  */\n  closed?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "progress",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "buffer",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "determinate",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "reversed",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "closed",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "LinearProgressPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "progress": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Progress float percentage between 0 and 1.",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "buffer": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "A Progress buffer float percentage between 0 and 1.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "determinate": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Whether or not the Progress bar is determinate.",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "reversed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Progress goes from right to left.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "closed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Hides the progress bar. Adding / removing this prop will trigger an animation in or out."
        }
      }
    }
  ],
  "src/List/index.js": [
    {
      "description": "The ListItem component.",
      "displayName": "ListItem",
      "methods": [],
      "props": {
        "selected": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "A modifier for a selected state."
        },
        "activated": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "A modifier for an active state."
        },
        "ripple": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Enable / disable the ripple.",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "tabIndex": {
          "defaultValue": {
            "value": "0",
            "computed": false
          },
          "required": false
        }
      },
      "context": {
        "RMWCOptions": {
          "type": {
            "name": "object"
          },
          "required": false
        }
      }
    },
    {
      "description": "Text Wrapper for the ListItem",
      "displayName": "ListItemText",
      "methods": []
    },
    {
      "description": "Primary Text for the ListItem",
      "displayName": "ListItemPrimaryText",
      "methods": []
    },
    {
      "description": "Secondary text for the ListItem",
      "displayName": "ListItemSecondaryText",
      "methods": []
    },
    {
      "description": "A graphic / icon for the ListItem",
      "displayName": "ListItemGraphic",
      "methods": []
    },
    {
      "description": "A meta icon for the ListItem. By default this is an icon component. If you need to render text, specify a tag=\"span\" and basename=\"\" to ensure proper rendering. See the examples above.",
      "displayName": "ListItemMeta",
      "methods": [],
      "props": {
        "className": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "icon": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": ""
        }
      }
    },
    {
      "description": "A container to group ListItems",
      "displayName": "ListGroup",
      "methods": []
    },
    {
      "description": "A subheader for the ListGroup",
      "displayName": "ListGroupSubheader",
      "methods": []
    },
    {
      "description": "A divider for the List",
      "displayName": "ListDivider",
      "methods": []
    },
    {
      "description": "A List Component",
      "displayName": "List",
      "methods": [],
      "props": {
        "dense": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Reduces the padding on List items."
        },
        "twoLine": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Gives more space for dual lined list items."
        },
        "avatarList": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the list start detail circular for avatars."
        },
        "nonInteractive": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the list non interactive. In addition, you'll have to set `ripple={false}` on the individual ListItems."
        }
      }
    },
    {
      "description": "",
      "displayName": "SimpleListItem",
      "methods": [],
      "props": {
        "text": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Text for the ListItem."
        },
        "secondaryText": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Secondary Text for the ListItem."
        },
        "graphic": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "A graphic icon for the ListItem."
        },
        "meta": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "A meta icon for the ListItem"
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Children to render"
        },
        "selected": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "A modifier for a selected state."
        },
        "activated": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "A modifier for an active state."
        },
        "ripple": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Enable / disable the ripple."
        }
      }
    }
  ],
  "src/Menu/index.js": [
    {
      "description": "",
      "displayName": "MenuRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Whether or not the Menu is open. */\n  open?: boolean,\n  /** Make the menu position fixed. */\n  fixed?: boolean,\n  /** Callback that when the menu is closed. */\n  onClose?: (evt: CustomEventT<void>) => mixed,\n  /** Callback that fires when a Menu item is selected. */\n  onSelect?: (evt: CustomEventT<SelectedEventDetailT>) => mixed,\n  /** Manually position the menu to one of the corners. */\n  anchorCorner?: AnchorT\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Whether or not the Menu is open. */\n  open?: boolean,\n  /** Make the menu position fixed. */\n  fixed?: boolean,\n  /** Callback that when the menu is closed. */\n  onClose?: (evt: CustomEventT<void>) => mixed,\n  /** Callback that fires when a Menu item is selected. */\n  onSelect?: (evt: CustomEventT<SelectedEventDetailT>) => mixed,\n  /** Manually position the menu to one of the corners. */\n  anchorCorner?: AnchorT\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "open",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "fixed",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "onClose",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<void>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "void"
                                      }
                                    ],
                                    "raw": "CustomEventT<void>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "onSelect",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<SelectedEventDetailT>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "signature",
                                        "type": "object",
                                        "raw": "{\n  index: number,\n  item: HTMLElement\n}",
                                        "signature": {
                                          "properties": [
                                            {
                                              "key": "index",
                                              "value": {
                                                "name": "number",
                                                "required": true
                                              }
                                            },
                                            {
                                              "key": "item",
                                              "value": {
                                                "name": "HTMLElement",
                                                "required": true
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "raw": "CustomEventT<SelectedEventDetailT>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "anchorCorner",
                          "value": {
                            "name": "union",
                            "raw": "'bottomEnd' | 'bottomLeft' | 'bottomRight' | 'bottomStart' | 'topEnd' | 'topLeft' | 'topRight' | 'topStart'",
                            "elements": [
                              {
                                "name": "literal",
                                "value": "'bottomEnd'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomLeft'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomRight'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomStart'"
                              },
                              {
                                "name": "literal",
                                "value": "'topEnd'"
                              },
                              {
                                "name": "literal",
                                "value": "'topLeft'"
                              },
                              {
                                "name": "literal",
                                "value": "'topRight'"
                              },
                              {
                                "name": "literal",
                                "value": "'topStart'"
                              }
                            ],
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "MenuPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "tabIndex": {
          "defaultValue": {
            "value": "'-1'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "MenuItems",
      "methods": [],
      "props": {
        "role": {
          "defaultValue": {
            "value": "'menu'",
            "computed": false
          },
          "required": false
        },
        "aria-hidden": {
          "defaultValue": {
            "value": "'true'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "This is just the ListItem component exported from the Menu module for convenience. You can use `ListItem` or `SimpleListItem` components from the List section as long as you add `role=\"menuitem\"` and `tabIndex=\"0\"` to the components for accessibility.",
      "displayName": "MenuItem",
      "methods": []
    },
    {
      "description": "A menu component for displaying lists items.",
      "displayName": "Menu",
      "methods": [
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Whether or not the Menu is open. */\n  open?: boolean,\n  /** Make the menu position fixed. */\n  fixed?: boolean,\n  /** Callback that when the menu is closed. */\n  onClose?: (evt: CustomEventT<void>) => mixed,\n  /** Callback that fires when a Menu item is selected. */\n  onSelect?: (evt: CustomEventT<SelectedEventDetailT>) => mixed,\n  /** Manually position the menu to one of the corners. */\n  anchorCorner?: AnchorT\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Whether or not the Menu is open. */\n  open?: boolean,\n  /** Make the menu position fixed. */\n  fixed?: boolean,\n  /** Callback that when the menu is closed. */\n  onClose?: (evt: CustomEventT<void>) => mixed,\n  /** Callback that fires when a Menu item is selected. */\n  onSelect?: (evt: CustomEventT<SelectedEventDetailT>) => mixed,\n  /** Manually position the menu to one of the corners. */\n  anchorCorner?: AnchorT\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "open",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "fixed",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "onClose",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<void>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "void"
                                      }
                                    ],
                                    "raw": "CustomEventT<void>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "onSelect",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<SelectedEventDetailT>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "signature",
                                        "type": "object",
                                        "raw": "{\n  index: number,\n  item: HTMLElement\n}",
                                        "signature": {
                                          "properties": [
                                            {
                                              "key": "index",
                                              "value": {
                                                "name": "number",
                                                "required": true
                                              }
                                            },
                                            {
                                              "key": "item",
                                              "value": {
                                                "name": "HTMLElement",
                                                "required": true
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "raw": "CustomEventT<SelectedEventDetailT>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "anchorCorner",
                          "value": {
                            "name": "union",
                            "raw": "'bottomEnd' | 'bottomLeft' | 'bottomRight' | 'bottomStart' | 'topEnd' | 'topLeft' | 'topRight' | 'topStart'",
                            "elements": [
                              {
                                "name": "literal",
                                "value": "'bottomEnd'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomLeft'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomRight'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomStart'"
                              },
                              {
                                "name": "literal",
                                "value": "'topEnd'"
                              },
                              {
                                "name": "literal",
                                "value": "'topLeft'"
                              },
                              {
                                "name": "literal",
                                "value": "'topRight'"
                              },
                              {
                                "name": "literal",
                                "value": "'topStart'"
                              }
                            ],
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "MenuPropsT"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onCloseHandler_",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "evt",
              "type": {
                "name": "CustomEventT",
                "elements": [
                  {
                    "name": "void"
                  }
                ],
                "raw": "CustomEventT<void>",
                "alias": "CustomEventT"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "destroy",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "open": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Whether or not the Menu is open."
        },
        "fixed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the menu position fixed."
        },
        "onClose": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that when the menu is closed."
        },
        "onSelect": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<SelectedEventDetailT>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  index: number,\n  item: HTMLElement\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "index",
                              "value": {
                                "name": "number",
                                "required": true
                              }
                            },
                            {
                              "key": "item",
                              "value": {
                                "name": "HTMLElement",
                                "required": true
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "raw": "CustomEventT<SelectedEventDetailT>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that fires when a Menu item is selected."
        },
        "anchorCorner": {
          "flowType": {
            "name": "union",
            "raw": "'bottomEnd' | 'bottomLeft' | 'bottomRight' | 'bottomStart' | 'topEnd' | 'topLeft' | 'topRight' | 'topStart'",
            "elements": [
              {
                "name": "literal",
                "value": "'bottomEnd'"
              },
              {
                "name": "literal",
                "value": "'bottomLeft'"
              },
              {
                "name": "literal",
                "value": "'bottomRight'"
              },
              {
                "name": "literal",
                "value": "'bottomStart'"
              },
              {
                "name": "literal",
                "value": "'topEnd'"
              },
              {
                "name": "literal",
                "value": "'topLeft'"
              },
              {
                "name": "literal",
                "value": "'topRight'"
              },
              {
                "name": "literal",
                "value": "'topStart'"
              }
            ]
          },
          "required": false,
          "description": "Manually position the menu to one of the corners."
        }
      }
    },
    {
      "description": "",
      "displayName": "MenuSurfaceRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Opens the menu. */\n  open?: boolean,\n  /** Make the menu position fixed. */\n  fixed?: boolean,\n  /** Manually position the menu to one of the corners. */\n  anchorCorner?: AnchorT,\n  /** Callback for when the menu is opened. */\n  onOpen?: (evt: CustomEventT<void>) => mixed,\n  /** Callback for when the menu is closed. */\n  onClose?: (evt: CustomEventT<void>) => mixed,\n  /** Children to render. */\n  children?: React.Node\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Opens the menu. */\n  open?: boolean,\n  /** Make the menu position fixed. */\n  fixed?: boolean,\n  /** Manually position the menu to one of the corners. */\n  anchorCorner?: AnchorT,\n  /** Callback for when the menu is opened. */\n  onOpen?: (evt: CustomEventT<void>) => mixed,\n  /** Callback for when the menu is closed. */\n  onClose?: (evt: CustomEventT<void>) => mixed,\n  /** Children to render. */\n  children?: React.Node\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "open",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "fixed",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "anchorCorner",
                          "value": {
                            "name": "union",
                            "raw": "'bottomEnd' | 'bottomLeft' | 'bottomRight' | 'bottomStart' | 'topEnd' | 'topLeft' | 'topRight' | 'topStart'",
                            "elements": [
                              {
                                "name": "literal",
                                "value": "'bottomEnd'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomLeft'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomRight'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomStart'"
                              },
                              {
                                "name": "literal",
                                "value": "'topEnd'"
                              },
                              {
                                "name": "literal",
                                "value": "'topLeft'"
                              },
                              {
                                "name": "literal",
                                "value": "'topRight'"
                              },
                              {
                                "name": "literal",
                                "value": "'topStart'"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "onOpen",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<void>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "void"
                                      }
                                    ],
                                    "raw": "CustomEventT<void>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "onClose",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<void>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "void"
                                      }
                                    ],
                                    "raw": "CustomEventT<void>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "children",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "MenuSurfacePropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "A generic menu component for displaying any type of content.",
      "displayName": "MenuSurface",
      "methods": [
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Opens the menu. */\n  open?: boolean,\n  /** Make the menu position fixed. */\n  fixed?: boolean,\n  /** Manually position the menu to one of the corners. */\n  anchorCorner?: AnchorT,\n  /** Callback for when the menu is opened. */\n  onOpen?: (evt: CustomEventT<void>) => mixed,\n  /** Callback for when the menu is closed. */\n  onClose?: (evt: CustomEventT<void>) => mixed,\n  /** Children to render. */\n  children?: React.Node\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Opens the menu. */\n  open?: boolean,\n  /** Make the menu position fixed. */\n  fixed?: boolean,\n  /** Manually position the menu to one of the corners. */\n  anchorCorner?: AnchorT,\n  /** Callback for when the menu is opened. */\n  onOpen?: (evt: CustomEventT<void>) => mixed,\n  /** Callback for when the menu is closed. */\n  onClose?: (evt: CustomEventT<void>) => mixed,\n  /** Children to render. */\n  children?: React.Node\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "open",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "fixed",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "anchorCorner",
                          "value": {
                            "name": "union",
                            "raw": "'bottomEnd' | 'bottomLeft' | 'bottomRight' | 'bottomStart' | 'topEnd' | 'topLeft' | 'topRight' | 'topStart'",
                            "elements": [
                              {
                                "name": "literal",
                                "value": "'bottomEnd'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomLeft'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomRight'"
                              },
                              {
                                "name": "literal",
                                "value": "'bottomStart'"
                              },
                              {
                                "name": "literal",
                                "value": "'topEnd'"
                              },
                              {
                                "name": "literal",
                                "value": "'topLeft'"
                              },
                              {
                                "name": "literal",
                                "value": "'topRight'"
                              },
                              {
                                "name": "literal",
                                "value": "'topStart'"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "onOpen",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<void>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "void"
                                      }
                                    ],
                                    "raw": "CustomEventT<void>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "onClose",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<void>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "void"
                                      }
                                    ],
                                    "raw": "CustomEventT<void>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "children",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "MenuSurfacePropsT"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "destroy",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "open": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Opens the menu."
        },
        "fixed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the menu position fixed."
        },
        "anchorCorner": {
          "flowType": {
            "name": "union",
            "raw": "'bottomEnd' | 'bottomLeft' | 'bottomRight' | 'bottomStart' | 'topEnd' | 'topLeft' | 'topRight' | 'topStart'",
            "elements": [
              {
                "name": "literal",
                "value": "'bottomEnd'"
              },
              {
                "name": "literal",
                "value": "'bottomLeft'"
              },
              {
                "name": "literal",
                "value": "'bottomRight'"
              },
              {
                "name": "literal",
                "value": "'bottomStart'"
              },
              {
                "name": "literal",
                "value": "'topEnd'"
              },
              {
                "name": "literal",
                "value": "'topLeft'"
              },
              {
                "name": "literal",
                "value": "'topRight'"
              },
              {
                "name": "literal",
                "value": "'topStart'"
              }
            ]
          },
          "required": false,
          "description": "Manually position the menu to one of the corners."
        },
        "onOpen": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback for when the menu is opened."
        },
        "onClose": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback for when the menu is closed."
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Children to render."
        }
      }
    },
    {
      "description": "A Menu Anchor. When using the anchorCorner prop of Menu, you must set MenuSurfaceAnchors css style position to absolute.",
      "displayName": "MenuSurfaceAnchor",
      "methods": []
    },
    {
      "description": "A Simplified menu component that allows you to pass a handle element and will automatically control the open state and add a MenuSurfaceAnchor",
      "displayName": "SimpleMenu",
      "methods": [],
      "props": {
        "handle": {
          "flowType": {
            "name": "ReactElement",
            "raw": "React.Element<any>",
            "elements": [
              {
                "name": "any"
              }
            ]
          },
          "required": true,
          "description": "An element that will open the menu when clicked"
        },
        "rootProps": {
          "flowType": {
            "name": "Object"
          },
          "required": false,
          "description": "By default, props spread to the Menu component. These will spread to the MenuSurfaceAnchor which is useful for things like overall positioning of the anchor."
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Children to render"
        },
        "open": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Whether or not the Menu is open."
        },
        "fixed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the menu position fixed."
        },
        "onClose": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that when the menu is closed."
        },
        "onSelect": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<SelectedEventDetailT>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  index: number,\n  item: HTMLElement\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "index",
                              "value": {
                                "name": "number",
                                "required": true
                              }
                            },
                            {
                              "key": "item",
                              "value": {
                                "name": "HTMLElement",
                                "required": true
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "raw": "CustomEventT<SelectedEventDetailT>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that fires when a Menu item is selected."
        },
        "anchorCorner": {
          "flowType": {
            "name": "union",
            "raw": "'bottomEnd' | 'bottomLeft' | 'bottomRight' | 'bottomStart' | 'topEnd' | 'topLeft' | 'topRight' | 'topStart'",
            "elements": [
              {
                "name": "literal",
                "value": "'bottomEnd'"
              },
              {
                "name": "literal",
                "value": "'bottomLeft'"
              },
              {
                "name": "literal",
                "value": "'bottomRight'"
              },
              {
                "name": "literal",
                "value": "'bottomStart'"
              },
              {
                "name": "literal",
                "value": "'topEnd'"
              },
              {
                "name": "literal",
                "value": "'topLeft'"
              },
              {
                "name": "literal",
                "value": "'topRight'"
              },
              {
                "name": "literal",
                "value": "'topStart'"
              }
            ]
          },
          "required": false,
          "description": "Manually position the menu to one of the corners."
        }
      }
    },
    {
      "description": "The same as SimpleMenu, but a generic surface.",
      "displayName": "SimpleMenuSurface",
      "methods": [],
      "props": {
        "handle": {
          "flowType": {
            "name": "ReactElement",
            "raw": "React.Element<any>",
            "elements": [
              {
                "name": "any"
              }
            ]
          },
          "required": true,
          "description": "An element that will open the menu when clicked"
        },
        "rootProps": {
          "flowType": {
            "name": "Object"
          },
          "required": false,
          "description": "By default, props spread to the Menu component. These will spread to the MenuSurfaceAnchor which is useful for things like overall positioning of the anchor."
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Children to render"
        },
        "open": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Opens the menu."
        },
        "fixed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the menu position fixed."
        },
        "anchorCorner": {
          "flowType": {
            "name": "union",
            "raw": "'bottomEnd' | 'bottomLeft' | 'bottomRight' | 'bottomStart' | 'topEnd' | 'topLeft' | 'topRight' | 'topStart'",
            "elements": [
              {
                "name": "literal",
                "value": "'bottomEnd'"
              },
              {
                "name": "literal",
                "value": "'bottomLeft'"
              },
              {
                "name": "literal",
                "value": "'bottomRight'"
              },
              {
                "name": "literal",
                "value": "'bottomStart'"
              },
              {
                "name": "literal",
                "value": "'topEnd'"
              },
              {
                "name": "literal",
                "value": "'topLeft'"
              },
              {
                "name": "literal",
                "value": "'topRight'"
              },
              {
                "name": "literal",
                "value": "'topStart'"
              }
            ]
          },
          "required": false,
          "description": "Manually position the menu to one of the corners."
        },
        "onOpen": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback for when the menu is opened."
        },
        "onClose": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback for when the menu is closed."
        }
      }
    }
  ],
  "src/NotchedOutline/index.js": [
    {
      "description": "",
      "displayName": "NotchedOutline",
      "methods": []
    },
    {
      "description": "",
      "displayName": "NotchedOutlineIdle",
      "methods": []
    }
  ],
  "src/Provider/index.js": [
    {
      "description": "Provides default options for children\nProp override options in providerDefaults with the same name",
      "displayName": "RMWCProvider",
      "methods": [
        {
          "name": "buildOptions",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "signature",
                "type": "object",
                "raw": "{\n  /** Set the buttons ripple effect globally */\n  buttonDefaultRipple?: boolean,\n  /** Set the listItems ripple effect globally */\n  listItemDefaultRipple?: boolean,\n  /** Set the iconClassNameBase. Read the icon docs for more info. */\n  iconClassNameBase?: string,\n  /** Set the iconClassNamePrefix. Read the icon docs for more info. */\n  iconClassNamePrefix?: string,\n  /** Set the default iconStrategy. Read the icon docs for more info. */\n  iconStrategy?: IconStrategyT,\n  /** Sets a default render function to be used when the iconStrategy is custom */\n  iconRender?: (props: { content: React.Node, className: string }) => mixed,\n  /** Children to render */\n  children: React.Node\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "buttonDefaultRipple",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    },
                    {
                      "key": "listItemDefaultRipple",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    },
                    {
                      "key": "iconClassNameBase",
                      "value": {
                        "name": "string",
                        "required": false
                      }
                    },
                    {
                      "key": "iconClassNamePrefix",
                      "value": {
                        "name": "string",
                        "required": false
                      }
                    },
                    {
                      "key": "iconStrategy",
                      "value": {
                        "name": "union",
                        "raw": "'auto' | 'ligature' | 'className' | 'url' | 'component' | 'custom'",
                        "elements": [
                          {
                            "name": "literal",
                            "value": "'auto'"
                          },
                          {
                            "name": "literal",
                            "value": "'ligature'"
                          },
                          {
                            "name": "literal",
                            "value": "'className'"
                          },
                          {
                            "name": "literal",
                            "value": "'url'"
                          },
                          {
                            "name": "literal",
                            "value": "'component'"
                          },
                          {
                            "name": "literal",
                            "value": "'custom'"
                          }
                        ],
                        "required": false
                      }
                    },
                    {
                      "key": "iconRender",
                      "value": {
                        "name": "signature",
                        "type": "function",
                        "raw": "(props: { content: React.Node, className: string }) => mixed",
                        "signature": {
                          "arguments": [
                            {
                              "name": "props",
                              "type": {
                                "name": "signature",
                                "type": "object",
                                "raw": "{ content: React.Node, className: string }",
                                "signature": {
                                  "properties": [
                                    {
                                      "key": "content",
                                      "value": {
                                        "name": "ReactNode",
                                        "raw": "React.Node",
                                        "required": true
                                      }
                                    },
                                    {
                                      "key": "className",
                                      "value": {
                                        "name": "string",
                                        "required": true
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          "return": {
                            "name": "mixed"
                          }
                        },
                        "required": false
                      }
                    },
                    {
                      "key": "children",
                      "value": {
                        "name": "ReactNode",
                        "raw": "React.Node",
                        "required": true
                      }
                    }
                  ]
                },
                "alias": "RMWCProviderOptionsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "buttonDefaultRipple": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Set the buttons ripple effect globally",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "listItemDefaultRipple": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Set the listItems ripple effect globally",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "iconClassNameBase": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "Set the iconClassNameBase. Read the icon docs for more info.",
          "defaultValue": {
            "value": "'material-icons'",
            "computed": false
          }
        },
        "iconClassNamePrefix": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "Set the iconClassNamePrefix. Read the icon docs for more info.",
          "defaultValue": {
            "value": "''",
            "computed": false
          }
        },
        "iconStrategy": {
          "flowType": {
            "name": "union",
            "raw": "'auto' | 'ligature' | 'className' | 'url' | 'component' | 'custom'",
            "elements": [
              {
                "name": "literal",
                "value": "'auto'"
              },
              {
                "name": "literal",
                "value": "'ligature'"
              },
              {
                "name": "literal",
                "value": "'className'"
              },
              {
                "name": "literal",
                "value": "'url'"
              },
              {
                "name": "literal",
                "value": "'component'"
              },
              {
                "name": "literal",
                "value": "'custom'"
              }
            ]
          },
          "required": false,
          "description": "Set the default iconStrategy. Read the icon docs for more info.",
          "defaultValue": {
            "value": "'auto'",
            "computed": false
          }
        },
        "iconRender": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(props: { content: React.Node, className: string }) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "props",
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{ content: React.Node, className: string }",
                    "signature": {
                      "properties": [
                        {
                          "key": "content",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": true
                          }
                        },
                        {
                          "key": "className",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        }
                      ]
                    }
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Sets a default render function to be used when the iconStrategy is custom",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Children to render",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        }
      },
      "childContext": {
        "RMWCOptions": {
          "type": {
            "name": "object"
          },
          "required": false
        }
      }
    }
  ],
  "src/Radio/index.js": [
    {
      "description": "",
      "displayName": "RadioRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** A DOM ID for the toggle. */\n  id?: string,\n  /** Disables the control. */\n  disabled?: boolean,\n  /** Toggle the control on and off. */\n  checked?: boolean | string,\n  /** The value of the control. */\n  value?: boolean | string | number,\n  /** A label for the control. */\n  label?: string,\n  /** Children to render */\n  children?: React.Node\n} & SimpleTagPropsT &\n  //$FlowFixMe\n  React.InputHTMLAttributes<HTMLInputElement>",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** A DOM ID for the toggle. */\n  id?: string,\n  /** Disables the control. */\n  disabled?: boolean,\n  /** Toggle the control on and off. */\n  checked?: boolean | string,\n  /** The value of the control. */\n  value?: boolean | string | number,\n  /** A label for the control. */\n  label?: string,\n  /** Children to render */\n  children?: React.Node\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "checked",
                          "value": {
                            "name": "union",
                            "raw": "boolean | string",
                            "elements": [
                              {
                                "name": "boolean"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "boolean | string | number",
                            "elements": [
                              {
                                "name": "boolean"
                              },
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "children",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  },
                  {
                    "name": "ReactInputHTMLAttributes",
                    "raw": "React.InputHTMLAttributes<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  }
                ],
                "alias": "RadioPropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "RadioNativeControl",
      "methods": [],
      "props": {
        "type": {
          "defaultValue": {
            "value": "'radio'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "RadioBackground",
      "methods": []
    },
    {
      "description": "",
      "displayName": "RadioOuterCircle",
      "methods": []
    },
    {
      "description": "",
      "displayName": "RadioInnerCircle",
      "methods": []
    },
    {
      "description": "",
      "displayName": "RadioLabel",
      "methods": []
    },
    {
      "description": "",
      "displayName": "Radio",
      "methods": [
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** A DOM ID for the toggle. */\n  id?: string,\n  /** Disables the control. */\n  disabled?: boolean,\n  /** Toggle the control on and off. */\n  checked?: boolean | string,\n  /** The value of the control. */\n  value?: boolean | string | number,\n  /** A label for the control. */\n  label?: string,\n  /** Children to render */\n  children?: React.Node\n} & SimpleTagPropsT &\n  React.InputHTMLAttributes<HTMLInputElement>",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** A DOM ID for the toggle. */\n  id?: string,\n  /** Disables the control. */\n  disabled?: boolean,\n  /** Toggle the control on and off. */\n  checked?: boolean | string,\n  /** The value of the control. */\n  value?: boolean | string | number,\n  /** A label for the control. */\n  label?: string,\n  /** Children to render */\n  children?: React.Node\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "checked",
                          "value": {
                            "name": "union",
                            "raw": "boolean | string",
                            "elements": [
                              {
                                "name": "boolean"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "boolean | string | number",
                            "elements": [
                              {
                                "name": "boolean"
                              },
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "children",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  },
                  {
                    "name": "ReactInputHTMLAttributes",
                    "raw": "React.InputHTMLAttributes<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  }
                ],
                "alias": "RadioPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "id": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A DOM ID for the toggle."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the control."
        },
        "checked": {
          "flowType": {
            "name": "union",
            "raw": "boolean | string",
            "elements": [
              {
                "name": "boolean"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Toggle the control on and off."
        },
        "value": {
          "flowType": {
            "name": "union",
            "raw": "boolean | string | number",
            "elements": [
              {
                "name": "boolean"
              },
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "The value of the control."
        },
        "label": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A label for the control."
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Children to render"
        }
      }
    }
  ],
  "src/Ripple/index.js": [
    {
      "description": "",
      "displayName": "Ripple",
      "methods": [
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "signature",
                "type": "object",
                "raw": "{\n  /** Makes the ripple unbounded */\n  unbounded?: boolean,\n  /** Makes the ripple primary */\n  primary?: boolean,\n  /** Makes the ripple an accent color*/\n  accent?: boolean,\n  /** makes the ripple disabled */\n  disabled?: boolean\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "unbounded",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    },
                    {
                      "key": "primary",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    },
                    {
                      "key": "accent",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    },
                    {
                      "key": "disabled",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    }
                  ]
                },
                "alias": "RipplePropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "unbounded": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the ripple unbounded"
        },
        "primary": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the ripple primary"
        },
        "accent": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the ripple an accent color"
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "makes the ripple disabled"
        },
        "surface": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/Select/index.js": [
    {
      "description": "",
      "displayName": "SelectRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** The value for a controlled select. */\n  value?: mixed,\n  /** Options accepts flat arrays, value => label maps, and more. See examples for details. */\n  options?: string[] | { [value: string]: string } | any[],\n  /** A label for the form control. */\n  label?: string,\n  /** Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label. */\n  placeholder?: string,\n  /** Makes the select outlined. */\n  outlined?: boolean,\n  /** Disables the form control. */\n  disabled?: boolean,\n  /** Makes the Select have a visual box. */\n  box?: boolean,\n  /** Props for the root element. By default, additional props spread to the native select element.  */\n  rootProps?: Object,\n  /** A className for the root element. */\n  className?: string\n} & SimpleTagPropsT &\n  //$FlowFixMe\n  React.InputHTMLAttributes<HTMLInputElement>",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** The value for a controlled select. */\n  value?: mixed,\n  /** Options accepts flat arrays, value => label maps, and more. See examples for details. */\n  options?: string[] | { [value: string]: string } | any[],\n  /** A label for the form control. */\n  label?: string,\n  /** Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label. */\n  placeholder?: string,\n  /** Makes the select outlined. */\n  outlined?: boolean,\n  /** Disables the form control. */\n  disabled?: boolean,\n  /** Makes the Select have a visual box. */\n  box?: boolean,\n  /** Props for the root element. By default, additional props spread to the native select element.  */\n  rootProps?: Object,\n  /** A className for the root element. */\n  className?: string\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "mixed",
                            "required": false
                          }
                        },
                        {
                          "key": "options",
                          "value": {
                            "name": "union",
                            "raw": "string[] | { [value: string]: string } | any[]",
                            "elements": [
                              {
                                "name": "Array",
                                "elements": [
                                  {
                                    "name": "string"
                                  }
                                ],
                                "raw": "string[]"
                              },
                              {
                                "name": "signature",
                                "type": "object",
                                "raw": "{ [value: string]: string }",
                                "signature": {
                                  "properties": [
                                    {
                                      "key": {
                                        "name": "string"
                                      },
                                      "value": {
                                        "name": "string",
                                        "required": true
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "name": "Array",
                                "elements": [
                                  {
                                    "name": "any"
                                  }
                                ],
                                "raw": "any[]"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "placeholder",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "outlined",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "box",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "rootProps",
                          "value": {
                            "name": "Object",
                            "required": false
                          }
                        },
                        {
                          "key": "className",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  },
                  {
                    "name": "ReactInputHTMLAttributes",
                    "raw": "React.InputHTMLAttributes<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  }
                ],
                "alias": "SelectPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "role": {
          "defaultValue": {
            "value": "'listbox'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "SelectSurface",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SelectSelectedText",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SelectBottomLine",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SelectNativeControl",
      "methods": []
    },
    {
      "description": "",
      "displayName": "Select",
      "methods": [
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** The value for a controlled select. */\n  value?: mixed,\n  /** Options accepts flat arrays, value => label maps, and more. See examples for details. */\n  options?: string[] | { [value: string]: string } | any[],\n  /** A label for the form control. */\n  label?: string,\n  /** Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label. */\n  placeholder?: string,\n  /** Makes the select outlined. */\n  outlined?: boolean,\n  /** Disables the form control. */\n  disabled?: boolean,\n  /** Makes the Select have a visual box. */\n  box?: boolean,\n  /** Props for the root element. By default, additional props spread to the native select element.  */\n  rootProps?: Object,\n  /** A className for the root element. */\n  className?: string\n} & SimpleTagPropsT &\n  React.InputHTMLAttributes<HTMLInputElement>",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** The value for a controlled select. */\n  value?: mixed,\n  /** Options accepts flat arrays, value => label maps, and more. See examples for details. */\n  options?: string[] | { [value: string]: string } | any[],\n  /** A label for the form control. */\n  label?: string,\n  /** Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label. */\n  placeholder?: string,\n  /** Makes the select outlined. */\n  outlined?: boolean,\n  /** Disables the form control. */\n  disabled?: boolean,\n  /** Makes the Select have a visual box. */\n  box?: boolean,\n  /** Props for the root element. By default, additional props spread to the native select element.  */\n  rootProps?: Object,\n  /** A className for the root element. */\n  className?: string\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "mixed",
                            "required": false
                          }
                        },
                        {
                          "key": "options",
                          "value": {
                            "name": "union",
                            "raw": "string[] | { [value: string]: string } | any[]",
                            "elements": [
                              {
                                "name": "Array",
                                "elements": [
                                  {
                                    "name": "string"
                                  }
                                ],
                                "raw": "string[]"
                              },
                              {
                                "name": "signature",
                                "type": "object",
                                "raw": "{ [value: string]: string }",
                                "signature": {
                                  "properties": [
                                    {
                                      "key": {
                                        "name": "string"
                                      },
                                      "value": {
                                        "name": "string",
                                        "required": true
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "name": "Array",
                                "elements": [
                                  {
                                    "name": "any"
                                  }
                                ],
                                "raw": "any[]"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "placeholder",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "outlined",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "box",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "rootProps",
                          "value": {
                            "name": "Object",
                            "required": false
                          }
                        },
                        {
                          "key": "className",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  },
                  {
                    "name": "ReactInputHTMLAttributes",
                    "raw": "React.InputHTMLAttributes<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  }
                ],
                "alias": "SelectPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "value": {
          "flowType": {
            "name": "mixed"
          },
          "required": false,
          "description": "The value for a controlled select."
        },
        "options": {
          "flowType": {
            "name": "union",
            "raw": "string[] | { [value: string]: string } | any[]",
            "elements": [
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "string"
                  }
                ],
                "raw": "string[]"
              },
              {
                "name": "signature",
                "type": "object",
                "raw": "{ [value: string]: string }",
                "signature": {
                  "properties": [
                    {
                      "key": {
                        "name": "string"
                      },
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    }
                  ]
                }
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "any"
                  }
                ],
                "raw": "any[]"
              }
            ]
          },
          "required": false,
          "description": "Options accepts flat arrays, value => label maps, and more. See examples for details."
        },
        "label": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A label for the form control."
        },
        "placeholder": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "Placeholder text for the form control. Set to a blank string to create a non-floating placeholder label."
        },
        "outlined": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the select outlined."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the form control."
        },
        "box": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the Select have a visual box."
        },
        "rootProps": {
          "flowType": {
            "name": "Object"
          },
          "required": false,
          "description": "Props for the root element. By default, additional props spread to the native select element."
        },
        "className": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A className for the root element."
        }
      }
    }
  ],
  "src/Shape/index.js": [
    {
      "description": "A container for shaping other components.",
      "displayName": "ShapeContainer",
      "methods": [],
      "props": {
        "backgroundColor": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "The background fill color for the corner",
          "defaultValue": {
            "value": "'#fff'",
            "computed": false
          }
        },
        "corner": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The corner length. Will be used for all sides that are left unset."
        },
        "topLeftCorner": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The top left corner length."
        },
        "topRightCorner": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The top right corner length."
        },
        "bottomRightCorner": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The bottom right corner length."
        },
        "bottomLeftCorner": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The bottom left corner length."
        },
        "outlineWidth": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Sets the width of an outlined corner."
        },
        "outlineColor": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "Sets the color outlined corner."
        },
        "outlineStyle": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "Sets the border style of an outlined corner."
        },
        "className": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "Custom className to add"
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Children to render."
        }
      }
    }
  ],
  "src/Slider/index.js": [
    {
      "description": "",
      "displayName": "SliderRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** A callback that fires when the Slider stops sliding which takes an event with event.detail.value set to the Slider's value. */\n  onChange?: (\n    evt: CustomEventT<{\n      value: number\n    }>\n  ) => mixed,\n  /** A callback that fires continuously while the Slider is sliding that takes an event with event.detail.value set to the Slider's value. */\n  onInput?: (\n    evt: CustomEventT<{\n      value: number\n    }>\n  ) => mixed,\n  /** The value of the Slider. */\n  value?: number | string,\n  /** The minimum value of the Slider. */\n  min?: number | string,\n  /** The maximum value of the Slider. */\n  max?: number | string,\n  /** A step to quantize values by. */\n  step?: number | string,\n  /** Displays the exact value of the Slider on the knob. */\n  discrete?: boolean,\n  /** Displays the individual step markers on the Slider track. */\n  displayMarkers?: boolean,\n  /** Disables the control. */\n  disabled?: boolean\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** A callback that fires when the Slider stops sliding which takes an event with event.detail.value set to the Slider's value. */\n  onChange?: (\n    evt: CustomEventT<{\n      value: number\n    }>\n  ) => mixed,\n  /** A callback that fires continuously while the Slider is sliding that takes an event with event.detail.value set to the Slider's value. */\n  onInput?: (\n    evt: CustomEventT<{\n      value: number\n    }>\n  ) => mixed,\n  /** The value of the Slider. */\n  value?: number | string,\n  /** The minimum value of the Slider. */\n  min?: number | string,\n  /** The maximum value of the Slider. */\n  max?: number | string,\n  /** A step to quantize values by. */\n  step?: number | string,\n  /** Displays the exact value of the Slider on the knob. */\n  discrete?: boolean,\n  /** Displays the individual step markers on the Slider track. */\n  displayMarkers?: boolean,\n  /** Disables the control. */\n  disabled?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "onChange",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(\n  evt: CustomEventT<{\n    value: number\n  }>\n) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "signature",
                                        "type": "object",
                                        "raw": "{\n  value: number\n}",
                                        "signature": {
                                          "properties": [
                                            {
                                              "key": "value",
                                              "value": {
                                                "name": "number",
                                                "required": true
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "raw": "CustomEventT<{\n  value: number\n}>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "onInput",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(\n  evt: CustomEventT<{\n    value: number\n  }>\n) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "signature",
                                        "type": "object",
                                        "raw": "{\n  value: number\n}",
                                        "signature": {
                                          "properties": [
                                            {
                                              "key": "value",
                                              "value": {
                                                "name": "number",
                                                "required": true
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "raw": "CustomEventT<{\n  value: number\n}>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "min",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "max",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "step",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "discrete",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "displayMarkers",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "SliderPropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "SliderTrackContainer",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderTrack",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderTrackMarkerContainer",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderThumbContainer",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderPin",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderPinValueMarker",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderThumb",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SliderFocusRing",
      "methods": []
    },
    {
      "description": "",
      "displayName": "Slider",
      "methods": [
        {
          "name": "discrete",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": {
            "type": {
              "name": "boolean"
            }
          }
        },
        {
          "name": "discrete",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "isDiscrete",
              "type": {
                "name": "boolean"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "displayMarkers",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": {
            "type": {
              "name": "boolean"
            }
          }
        },
        {
          "name": "displayMarkers",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "isDisplayMarkers",
              "type": {
                "name": "boolean"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** A callback that fires when the Slider stops sliding which takes an event with event.detail.value set to the Slider's value. */\n  onChange?: (\n    evt: CustomEventT<{\n      value: number\n    }>\n  ) => mixed,\n  /** A callback that fires continuously while the Slider is sliding that takes an event with event.detail.value set to the Slider's value. */\n  onInput?: (\n    evt: CustomEventT<{\n      value: number\n    }>\n  ) => mixed,\n  /** The value of the Slider. */\n  value?: number | string,\n  /** The minimum value of the Slider. */\n  min?: number | string,\n  /** The maximum value of the Slider. */\n  max?: number | string,\n  /** A step to quantize values by. */\n  step?: number | string,\n  /** Displays the exact value of the Slider on the knob. */\n  discrete?: boolean,\n  /** Displays the individual step markers on the Slider track. */\n  displayMarkers?: boolean,\n  /** Disables the control. */\n  disabled?: boolean\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** A callback that fires when the Slider stops sliding which takes an event with event.detail.value set to the Slider's value. */\n  onChange?: (\n    evt: CustomEventT<{\n      value: number\n    }>\n  ) => mixed,\n  /** A callback that fires continuously while the Slider is sliding that takes an event with event.detail.value set to the Slider's value. */\n  onInput?: (\n    evt: CustomEventT<{\n      value: number\n    }>\n  ) => mixed,\n  /** The value of the Slider. */\n  value?: number | string,\n  /** The minimum value of the Slider. */\n  min?: number | string,\n  /** The maximum value of the Slider. */\n  max?: number | string,\n  /** A step to quantize values by. */\n  step?: number | string,\n  /** Displays the exact value of the Slider on the knob. */\n  discrete?: boolean,\n  /** Displays the individual step markers on the Slider track. */\n  displayMarkers?: boolean,\n  /** Disables the control. */\n  disabled?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "onChange",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(\n  evt: CustomEventT<{\n    value: number\n  }>\n) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "signature",
                                        "type": "object",
                                        "raw": "{\n  value: number\n}",
                                        "signature": {
                                          "properties": [
                                            {
                                              "key": "value",
                                              "value": {
                                                "name": "number",
                                                "required": true
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "raw": "CustomEventT<{\n  value: number\n}>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "onInput",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(\n  evt: CustomEventT<{\n    value: number\n  }>\n) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "signature",
                                        "type": "object",
                                        "raw": "{\n  value: number\n}",
                                        "signature": {
                                          "properties": [
                                            {
                                              "key": "value",
                                              "value": {
                                                "name": "number",
                                                "required": true
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "raw": "CustomEventT<{\n  value: number\n}>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "min",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "max",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "step",
                          "value": {
                            "name": "union",
                            "raw": "number | string",
                            "elements": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "discrete",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "displayMarkers",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "SliderPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "onChange": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(\n  evt: CustomEventT<{\n    value: number\n  }>\n) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  value: number\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "value",
                              "value": {
                                "name": "number",
                                "required": true
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "raw": "CustomEventT<{\n  value: number\n}>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "A callback that fires when the Slider stops sliding which takes an event with event.detail.value set to the Slider's value."
        },
        "onInput": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(\n  evt: CustomEventT<{\n    value: number\n  }>\n) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  value: number\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "value",
                              "value": {
                                "name": "number",
                                "required": true
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "raw": "CustomEventT<{\n  value: number\n}>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "A callback that fires continuously while the Slider is sliding that takes an event with event.detail.value set to the Slider's value."
        },
        "value": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The value of the Slider."
        },
        "min": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The minimum value of the Slider."
        },
        "max": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "The maximum value of the Slider."
        },
        "step": {
          "flowType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "A step to quantize values by."
        },
        "discrete": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Displays the exact value of the Slider on the knob."
        },
        "displayMarkers": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Displays the individual step markers on the Slider track."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the control."
        }
      }
    }
  ],
  "src/Snackbar/index.js": [
    {
      "description": "",
      "displayName": "SnackbarRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Show the Snackbar. */\n  show?: boolean,\n  /** A callback thats fired when the Snackbar shows. */\n  onShow?: () => mixed,\n  /** A callback thats fired when the Snackbar hides. */\n  onHide?: () => mixed,\n  /** A string or other renderable JSX to be used as the message body. */\n  message?: React.Node,\n  /** Milliseconds to show the Snackbar for. */\n  timeout?: number,\n  /** Callback that fires when action is pressed. The actionText property must be set to use this. */\n  actionHandler?: () => mixed,\n  /** Label for the action button. */\n  actionText?: React.Node,\n  /** Lets the Snackbar text overflow onto multiple lines. */\n  multiline?: boolean,\n  /** Places the action underneath the message text. */\n  actionOnBottom?: boolean,\n  /** Whether or not the Snackbar dismisses on the action press. */\n  dismissesOnAction?: boolean,\n  /* Aligns the Snackbar to the start of the screen. */\n  alignStart?: boolean\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Show the Snackbar. */\n  show?: boolean,\n  /** A callback thats fired when the Snackbar shows. */\n  onShow?: () => mixed,\n  /** A callback thats fired when the Snackbar hides. */\n  onHide?: () => mixed,\n  /** A string or other renderable JSX to be used as the message body. */\n  message?: React.Node,\n  /** Milliseconds to show the Snackbar for. */\n  timeout?: number,\n  /** Callback that fires when action is pressed. The actionText property must be set to use this. */\n  actionHandler?: () => mixed,\n  /** Label for the action button. */\n  actionText?: React.Node,\n  /** Lets the Snackbar text overflow onto multiple lines. */\n  multiline?: boolean,\n  /** Places the action underneath the message text. */\n  actionOnBottom?: boolean,\n  /** Whether or not the Snackbar dismisses on the action press. */\n  dismissesOnAction?: boolean,\n  /* Aligns the Snackbar to the start of the screen. */\n  alignStart?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "show",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "onShow",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "() => mixed",
                            "signature": {
                              "arguments": [],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "onHide",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "() => mixed",
                            "signature": {
                              "arguments": [],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "message",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        },
                        {
                          "key": "timeout",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        },
                        {
                          "key": "actionHandler",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "() => mixed",
                            "signature": {
                              "arguments": [],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "actionText",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        },
                        {
                          "key": "multiline",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "actionOnBottom",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "dismissesOnAction",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "alignStart",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "SnackbarPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "alignStart": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        },
        "aria-live": {
          "defaultValue": {
            "value": "'assertive'",
            "computed": false
          },
          "required": false
        },
        "aria-atomic": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "required": false
        },
        "aria-hidden": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "SnackbarText",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SnackbarActionWrapper",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SnackbarActionButton",
      "methods": []
    },
    {
      "description": "A Snackbar component for notifications.",
      "displayName": "Snackbar",
      "methods": [
        {
          "name": "isShowing",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "isShowing",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "isShowing",
              "type": {
                "name": "boolean"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "MDCSnackbar",
                "alias": "MDCSnackbar"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "show": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Show the Snackbar.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onShow": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "() => mixed",
            "signature": {
              "arguments": [],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "A callback thats fired when the Snackbar shows.",
          "defaultValue": {
            "value": "noop",
            "computed": true
          }
        },
        "onHide": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "() => mixed",
            "signature": {
              "arguments": [],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "A callback thats fired when the Snackbar hides.",
          "defaultValue": {
            "value": "noop",
            "computed": true
          }
        },
        "message": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "A string or other renderable JSX to be used as the message body.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "timeout": {
          "flowType": {
            "name": "number"
          },
          "required": false,
          "description": "Milliseconds to show the Snackbar for.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "actionHandler": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "() => mixed",
            "signature": {
              "arguments": [],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback that fires when action is pressed. The actionText property must be set to use this.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "actionText": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Label for the action button.",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "multiline": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Lets the Snackbar text overflow onto multiple lines.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "actionOnBottom": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Places the action underneath the message text.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "dismissesOnAction": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Whether or not the Snackbar dismisses on the action press.",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "alignStart": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ],
  "src/Switch/index.js": [
    {
      "description": "",
      "displayName": "SwitchRoot",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SwitchNativeControl",
      "methods": [],
      "props": {
        "type": {
          "defaultValue": {
            "value": "'checkbox'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "SwitchTrack",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SwitchThumbUnderlay",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SwitchThumb",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SwitchKnob",
      "methods": []
    },
    {
      "description": "",
      "displayName": "SwitchLabel",
      "methods": []
    },
    {
      "description": "",
      "displayName": "Switch",
      "methods": [
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** A DOM ID for the toggle. */\n  id?: string,\n  /** Disables the control. */\n  disabled?: boolean,\n  /** Toggle the control on and off. */\n  checked?: boolean | string,\n  /** A label for the control. */\n  label?: string,\n  /** Props for the root element. By default, props spread to the input. */\n  rootProps?: any,\n  /** Any children to render. */\n  children?: React.Node\n} & SimpleTagPropsT &\n  //$FlowFixMe\n  React.InputHTMLAttributes<HTMLInputElement>",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** A DOM ID for the toggle. */\n  id?: string,\n  /** Disables the control. */\n  disabled?: boolean,\n  /** Toggle the control on and off. */\n  checked?: boolean | string,\n  /** A label for the control. */\n  label?: string,\n  /** Props for the root element. By default, props spread to the input. */\n  rootProps?: any,\n  /** Any children to render. */\n  children?: React.Node\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "checked",
                          "value": {
                            "name": "union",
                            "raw": "boolean | string",
                            "elements": [
                              {
                                "name": "boolean"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "rootProps",
                          "value": {
                            "name": "any",
                            "required": false
                          }
                        },
                        {
                          "key": "children",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  },
                  {
                    "name": "ReactInputHTMLAttributes",
                    "raw": "React.InputHTMLAttributes<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  }
                ],
                "alias": "SwitchPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "id": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A DOM ID for the toggle."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the control."
        },
        "checked": {
          "flowType": {
            "name": "union",
            "raw": "boolean | string",
            "elements": [
              {
                "name": "boolean"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Toggle the control on and off."
        },
        "label": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "A label for the control."
        },
        "rootProps": {
          "flowType": {
            "name": "any"
          },
          "required": false,
          "description": "Props for the root element. By default, props spread to the input."
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Any children to render."
        }
      }
    }
  ],
  "src/Tabs/index.js": [
    {
      "description": "",
      "displayName": "TabBarRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "TabBarPropsT & { isTabScroller?: boolean }",
                "elements": [
                  {
                    "name": "intersection",
                    "raw": "{\n  /** Callback when the active tab changes. Receives event as an argument with event.target.value set to the activeTabIndex. */\n  onActivate?: (evt: CustomEventT<TabBarEventDetailT>) => mixed,\n  /** The index of the active tab. */\n  activeTabIndex?: number\n} & SimpleTagPropsT",
                    "elements": [
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  /** Callback when the active tab changes. Receives event as an argument with event.target.value set to the activeTabIndex. */\n  onActivate?: (evt: CustomEventT<TabBarEventDetailT>) => mixed,\n  /** The index of the active tab. */\n  activeTabIndex?: number\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "onActivate",
                              "value": {
                                "name": "signature",
                                "type": "function",
                                "raw": "(evt: CustomEventT<TabBarEventDetailT>) => mixed",
                                "signature": {
                                  "arguments": [
                                    {
                                      "name": "evt",
                                      "type": {
                                        "name": "CustomEventT",
                                        "elements": [
                                          {
                                            "name": "signature",
                                            "type": "object",
                                            "raw": "{\n  index: number\n}",
                                            "signature": {
                                              "properties": [
                                                {
                                                  "key": "index",
                                                  "value": {
                                                    "name": "number",
                                                    "required": true
                                                  }
                                                }
                                              ]
                                            }
                                          }
                                        ],
                                        "raw": "CustomEventT<TabBarEventDetailT>"
                                      }
                                    }
                                  ],
                                  "return": {
                                    "name": "mixed"
                                  }
                                },
                                "required": false
                              }
                            },
                            {
                              "key": "activeTabIndex",
                              "value": {
                                "name": "number",
                                "required": false
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "SimpleTagPropsT"
                      }
                    ]
                  },
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{ isTabScroller?: boolean }",
                    "signature": {
                      "properties": [
                        {
                          "key": "isTabScroller",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "TabScroller",
      "methods": []
    },
    {
      "description": "",
      "displayName": "TabScrollerScrollArea",
      "methods": []
    },
    {
      "description": "",
      "displayName": "TabScrollerScrollContent",
      "methods": []
    },
    {
      "description": "The TabBar component",
      "displayName": "TabBar",
      "methods": [
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Callback when the active tab changes. Receives event as an argument with event.target.value set to the activeTabIndex. */\n  onActivate?: (evt: CustomEventT<TabBarEventDetailT>) => mixed,\n  /** The index of the active tab. */\n  activeTabIndex?: number\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Callback when the active tab changes. Receives event as an argument with event.target.value set to the activeTabIndex. */\n  onActivate?: (evt: CustomEventT<TabBarEventDetailT>) => mixed,\n  /** The index of the active tab. */\n  activeTabIndex?: number\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "onActivate",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<TabBarEventDetailT>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "signature",
                                        "type": "object",
                                        "raw": "{\n  index: number\n}",
                                        "signature": {
                                          "properties": [
                                            {
                                              "key": "index",
                                              "value": {
                                                "name": "number",
                                                "required": true
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ],
                                    "raw": "CustomEventT<TabBarEventDetailT>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "activeTabIndex",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "TabBarPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "onActivate": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<TabBarEventDetailT>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  index: number\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "index",
                              "value": {
                                "name": "number",
                                "required": true
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "raw": "CustomEventT<TabBarEventDetailT>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Callback when the active tab changes. Receives event as an argument with event.target.value set to the activeTabIndex."
        },
        "activeTabIndex": {
          "flowType": {
            "name": "number"
          },
          "required": false,
          "description": "The index of the active tab."
        }
      }
    },
    {
      "description": "",
      "displayName": "TabRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** A label for the tab. */\n  label?: React.Node,\n  /** The label for the tab, passed as children. */\n  children?: React.Node,\n  /** The icon to use for the tab. */\n  icon?: React.Node,\n  /** Stacks the icon on top of the text label */\n  stacked?: boolean,\n  /** Restricts the indicator to the content */\n  restrictIndicator?: boolean\n} & IconPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** A label for the tab. */\n  label?: React.Node,\n  /** The label for the tab, passed as children. */\n  children?: React.Node,\n  /** The icon to use for the tab. */\n  icon?: React.Node,\n  /** Stacks the icon on top of the text label */\n  stacked?: boolean,\n  /** Restricts the indicator to the content */\n  restrictIndicator?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "label",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        },
                        {
                          "key": "children",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        },
                        {
                          "key": "icon",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        },
                        {
                          "key": "stacked",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "restrictIndicator",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "IconPropsT"
                  }
                ],
                "alias": "TabPropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "TabIndicator",
      "methods": []
    },
    {
      "description": "A Tab icon. This is an instance of the Icon component.",
      "displayName": "TabIcon",
      "methods": []
    },
    {
      "description": "A Tab component",
      "displayName": "Tab",
      "methods": [],
      "props": {
        "label": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "A label for the tab."
        },
        "children": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "The label for the tab, passed as children."
        },
        "icon": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "The icon to use for the tab."
        },
        "stacked": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Stacks the icon on top of the text label"
        },
        "restrictIndicator": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Restricts the indicator to the content"
        }
      }
    }
  ],
  "src/TextField/index.js": [
    {
      "description": "",
      "displayName": "TextFieldRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Makes a multiline TextField. */\n  textarea?: boolean,\n  /** Sets the value for controlled TextFields. */\n  value?: string | number,\n  /** Makes the TextField fullwidth. */\n  fullwidth?: boolean,\n  /** Makes the TextField have a visual box. */\n  box?: boolean,\n  /** A ref for the native input. */\n  inputRef?: React.Ref<any>,\n  /** Disables the input. */\n  disabled?: boolean,\n  /** Mark the input as required. */\n  required?: boolean,\n  /** Makes the TextField visually invalid. This is sometimes automatically applied in cases where required or pattern is used.  */\n  invalid?: boolean,\n  /** Makes the TextField dense */\n  dense?: boolean,\n  /** Outline the TextField */\n  outlined?: boolean,\n  /** A label for the input. */\n  label?: React.Node,\n  /** Add a leading icon. */\n  withLeadingIcon?: React.Node,\n  /** Add a trailing icon. */\n  withTrailingIcon?: React.Node,\n  /** By default, props spread to the input. These props are for the component's root container. */\n  rootProps?: Object,\n  /** The type of input field to render */\n  type?: string\n} & SimpleTagPropsT &\n  //$FlowFixMe\n  React.InputHTMLAttributes<HTMLInputElement>",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Makes a multiline TextField. */\n  textarea?: boolean,\n  /** Sets the value for controlled TextFields. */\n  value?: string | number,\n  /** Makes the TextField fullwidth. */\n  fullwidth?: boolean,\n  /** Makes the TextField have a visual box. */\n  box?: boolean,\n  /** A ref for the native input. */\n  inputRef?: React.Ref<any>,\n  /** Disables the input. */\n  disabled?: boolean,\n  /** Mark the input as required. */\n  required?: boolean,\n  /** Makes the TextField visually invalid. This is sometimes automatically applied in cases where required or pattern is used.  */\n  invalid?: boolean,\n  /** Makes the TextField dense */\n  dense?: boolean,\n  /** Outline the TextField */\n  outlined?: boolean,\n  /** A label for the input. */\n  label?: React.Node,\n  /** Add a leading icon. */\n  withLeadingIcon?: React.Node,\n  /** Add a trailing icon. */\n  withTrailingIcon?: React.Node,\n  /** By default, props spread to the input. These props are for the component's root container. */\n  rootProps?: Object,\n  /** The type of input field to render */\n  type?: string\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "textarea",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "string | number",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "fullwidth",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "box",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "inputRef",
                          "value": {
                            "name": "ReactRef",
                            "raw": "React.Ref<any>",
                            "elements": [
                              {
                                "name": "any"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "required",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "invalid",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "dense",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "outlined",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        },
                        {
                          "key": "withLeadingIcon",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        },
                        {
                          "key": "withTrailingIcon",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        },
                        {
                          "key": "rootProps",
                          "value": {
                            "name": "Object",
                            "required": false
                          }
                        },
                        {
                          "key": "type",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  },
                  {
                    "name": "ReactInputHTMLAttributes",
                    "raw": "React.InputHTMLAttributes<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  }
                ],
                "alias": "TextFieldPropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "",
      "displayName": "TextFieldInput",
      "methods": [],
      "props": {
        "type": {
          "defaultValue": {
            "value": "'text'",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "",
      "displayName": "TextFieldTextarea",
      "methods": []
    },
    {
      "description": "A TextField component for accepting text input from a user.",
      "displayName": "TextField",
      "methods": [
        {
          "name": "syncWithProps",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "nextProps",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Makes a multiline TextField. */\n  textarea?: boolean,\n  /** Sets the value for controlled TextFields. */\n  value?: string | number,\n  /** Makes the TextField fullwidth. */\n  fullwidth?: boolean,\n  /** Makes the TextField have a visual box. */\n  box?: boolean,\n  /** A ref for the native input. */\n  inputRef?: React.Ref<any>,\n  /** Disables the input. */\n  disabled?: boolean,\n  /** Mark the input as required. */\n  required?: boolean,\n  /** Makes the TextField visually invalid. This is sometimes automatically applied in cases where required or pattern is used.  */\n  invalid?: boolean,\n  /** Makes the TextField dense */\n  dense?: boolean,\n  /** Outline the TextField */\n  outlined?: boolean,\n  /** A label for the input. */\n  label?: React.Node,\n  /** Add a leading icon. */\n  withLeadingIcon?: React.Node,\n  /** Add a trailing icon. */\n  withTrailingIcon?: React.Node,\n  /** By default, props spread to the input. These props are for the component's root container. */\n  rootProps?: Object,\n  /** The type of input field to render */\n  type?: string\n} & SimpleTagPropsT &\n  React.InputHTMLAttributes<HTMLInputElement>",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Makes a multiline TextField. */\n  textarea?: boolean,\n  /** Sets the value for controlled TextFields. */\n  value?: string | number,\n  /** Makes the TextField fullwidth. */\n  fullwidth?: boolean,\n  /** Makes the TextField have a visual box. */\n  box?: boolean,\n  /** A ref for the native input. */\n  inputRef?: React.Ref<any>,\n  /** Disables the input. */\n  disabled?: boolean,\n  /** Mark the input as required. */\n  required?: boolean,\n  /** Makes the TextField visually invalid. This is sometimes automatically applied in cases where required or pattern is used.  */\n  invalid?: boolean,\n  /** Makes the TextField dense */\n  dense?: boolean,\n  /** Outline the TextField */\n  outlined?: boolean,\n  /** A label for the input. */\n  label?: React.Node,\n  /** Add a leading icon. */\n  withLeadingIcon?: React.Node,\n  /** Add a trailing icon. */\n  withTrailingIcon?: React.Node,\n  /** By default, props spread to the input. These props are for the component's root container. */\n  rootProps?: Object,\n  /** The type of input field to render */\n  type?: string\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "textarea",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "string | number",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "number"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "fullwidth",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "box",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "inputRef",
                          "value": {
                            "name": "ReactRef",
                            "raw": "React.Ref<any>",
                            "elements": [
                              {
                                "name": "any"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "disabled",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "required",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "invalid",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "dense",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "outlined",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "label",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        },
                        {
                          "key": "withLeadingIcon",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        },
                        {
                          "key": "withTrailingIcon",
                          "value": {
                            "name": "ReactNode",
                            "raw": "React.Node",
                            "required": false
                          }
                        },
                        {
                          "key": "rootProps",
                          "value": {
                            "name": "Object",
                            "required": false
                          }
                        },
                        {
                          "key": "type",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  },
                  {
                    "name": "ReactInputHTMLAttributes",
                    "raw": "React.InputHTMLAttributes<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  }
                ],
                "alias": "TextFieldPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "textarea": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes a multiline TextField."
        },
        "value": {
          "flowType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false,
          "description": "Sets the value for controlled TextFields."
        },
        "fullwidth": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the TextField fullwidth."
        },
        "box": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the TextField have a visual box."
        },
        "inputRef": {
          "flowType": {
            "name": "ReactRef",
            "raw": "React.Ref<any>",
            "elements": [
              {
                "name": "any"
              }
            ]
          },
          "required": false,
          "description": "A ref for the native input."
        },
        "disabled": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Disables the input."
        },
        "required": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Mark the input as required."
        },
        "invalid": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the TextField visually invalid. This is sometimes automatically applied in cases where required or pattern is used."
        },
        "dense": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the TextField dense"
        },
        "outlined": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Outline the TextField"
        },
        "label": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "A label for the input."
        },
        "withLeadingIcon": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Add a leading icon."
        },
        "withTrailingIcon": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Add a trailing icon."
        },
        "rootProps": {
          "flowType": {
            "name": "Object"
          },
          "required": false,
          "description": "By default, props spread to the input. These props are for the component's root container."
        },
        "type": {
          "flowType": {
            "name": "string"
          },
          "required": false,
          "description": "The type of input field to render"
        }
      }
    },
    {
      "description": "A help text component",
      "displayName": "TextFieldHelperText",
      "methods": [],
      "props": {
        "persistent": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the help text always visible"
        },
        "validationMsg": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Make the help a validation message style"
        }
      }
    },
    {
      "description": "",
      "displayName": "TextFieldIcon",
      "methods": []
    }
  ],
  "src/Theme/index.js": [
    {
      "description": "A Theme Component.",
      "displayName": "Theme",
      "methods": [],
      "props": {
        "use": {
          "flowType": {
            "name": "union",
            "raw": "string | ThemeOptionT[]",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "union",
                    "raw": "'primary' | 'secondary' | 'background' | 'surface' | 'onPrimary' | 'onSecondary' | 'onSurface' | 'textPrimaryOnBackground' | 'textSecondaryOnBackground' | 'textHintOnBackground' | 'textDisabledOnBackground' | 'textIconOnBackground' | 'textPrimaryOnLight' | 'textSecondaryOnLight' | 'textHintOnLight' | 'textDisabledOnLight' | 'textIconOnLight' | 'textPrimaryOnDark' | 'textSecondaryOnDark' | 'textHintOnDark' | 'textDisabledOnDark' | 'textIconOnDark'",
                    "elements": [
                      {
                        "name": "literal",
                        "value": "'primary'"
                      },
                      {
                        "name": "literal",
                        "value": "'secondary'"
                      },
                      {
                        "name": "literal",
                        "value": "'background'"
                      },
                      {
                        "name": "literal",
                        "value": "'surface'"
                      },
                      {
                        "name": "literal",
                        "value": "'onPrimary'"
                      },
                      {
                        "name": "literal",
                        "value": "'onSecondary'"
                      },
                      {
                        "name": "literal",
                        "value": "'onSurface'"
                      },
                      {
                        "name": "literal",
                        "value": "'textPrimaryOnBackground'"
                      },
                      {
                        "name": "literal",
                        "value": "'textSecondaryOnBackground'"
                      },
                      {
                        "name": "literal",
                        "value": "'textHintOnBackground'"
                      },
                      {
                        "name": "literal",
                        "value": "'textDisabledOnBackground'"
                      },
                      {
                        "name": "literal",
                        "value": "'textIconOnBackground'"
                      },
                      {
                        "name": "literal",
                        "value": "'textPrimaryOnLight'"
                      },
                      {
                        "name": "literal",
                        "value": "'textSecondaryOnLight'"
                      },
                      {
                        "name": "literal",
                        "value": "'textHintOnLight'"
                      },
                      {
                        "name": "literal",
                        "value": "'textDisabledOnLight'"
                      },
                      {
                        "name": "literal",
                        "value": "'textIconOnLight'"
                      },
                      {
                        "name": "literal",
                        "value": "'textPrimaryOnDark'"
                      },
                      {
                        "name": "literal",
                        "value": "'textSecondaryOnDark'"
                      },
                      {
                        "name": "literal",
                        "value": "'textHintOnDark'"
                      },
                      {
                        "name": "literal",
                        "value": "'textDisabledOnDark'"
                      },
                      {
                        "name": "literal",
                        "value": "'textIconOnDark'"
                      }
                    ]
                  }
                ],
                "raw": "ThemeOptionT[]"
              }
            ]
          },
          "required": true,
          "description": "A theme option as a string, a space separated string for multiple values, or an array of valid theme options."
        },
        "wrap": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Collapse the styles directly onto the child component. This eliminates the need for a wrapping `span` element and may be required for applying things like background-colors."
        }
      }
    },
    {
      "description": "A ThemeProvider. This sets theme colors for its child tree.",
      "displayName": "ThemeProvider",
      "methods": [
        {
          "name": "colors",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "props": {
        "options": {
          "flowType": {
            "name": "signature",
            "type": "object",
            "raw": "{ [key: string]: string }",
            "signature": {
              "properties": [
                {
                  "key": {
                    "name": "string"
                  },
                  "value": {
                    "name": "string",
                    "required": true
                  }
                }
              ]
            }
          },
          "required": true,
          "description": "Any theme option pointing to a valid CSS value."
        },
        "style": {
          "flowType": {
            "name": "Object"
          },
          "required": false,
          "description": "Additional standard inline styles that will be merged into the style tag."
        }
      }
    }
  ],
  "src/Toolbar/index.js": [
    {
      "description": "",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Makes the toolbar fixed */\n  fixed?: boolean,\n  /** Adds a waterfall effect on scroll */\n  waterfall?: boolean,\n  /** Fixes the last row of a multi-row toolbar */\n  fixedLastrowOnly?: boolean,\n  /** makes the toolbar flexible */\n  flexible?: boolean,\n  /** further defines the background and title movement behavior, use in conjunction with flexible. */\n  flexibleDefaultBehavior?: boolean\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Makes the toolbar fixed */\n  fixed?: boolean,\n  /** Adds a waterfall effect on scroll */\n  waterfall?: boolean,\n  /** Fixes the last row of a multi-row toolbar */\n  fixedLastrowOnly?: boolean,\n  /** makes the toolbar flexible */\n  flexible?: boolean,\n  /** further defines the background and title movement behavior, use in conjunction with flexible. */\n  flexibleDefaultBehavior?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "fixed",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "waterfall",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "fixedLastrowOnly",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "flexible",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "flexibleDefaultBehavior",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "ToolbarPropsT"
              }
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "fixed": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        },
        "waterfall": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        },
        "fixedLastrowOnly": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        },
        "flexible": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        },
        "flexibleDefaultBehavior": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "required": false
        }
      }
    },
    {
      "description": "A Toolbar title",
      "displayName": "ToolbarTitle",
      "methods": []
    },
    {
      "description": "A section of the Toolbar",
      "displayName": "ToolbarSection",
      "methods": [],
      "props": {
        "alignStart": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Aligns the ToolbarSection at the start."
        },
        "alignEnd": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Aligns the ToolbarSection at the end."
        },
        "shrinkToFit": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the ToolbarSection shrink to fit."
        }
      }
    },
    {
      "description": "A Toolbar row",
      "displayName": "ToolbarRow",
      "methods": []
    },
    {
      "description": "This component can be placed after a fixed Toolbar component to fill in the space.",
      "displayName": "ToolbarFixedAdjust",
      "methods": []
    },
    {
      "description": "A Menu Icon For the Toolbar. This is an instance of the Icon component.",
      "displayName": "ToolbarMenuIcon",
      "methods": []
    },
    {
      "description": "A standard Icon for toolbar actions. This is an instance of the Icon component.",
      "displayName": "ToolbarIcon",
      "methods": []
    },
    {
      "description": "",
      "displayName": "Toolbar",
      "methods": [],
      "props": {
        "fixed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Makes the toolbar fixed"
        },
        "waterfall": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Adds a waterfall effect on scroll"
        },
        "fixedLastrowOnly": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Fixes the last row of a multi-row toolbar"
        },
        "flexible": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "makes the toolbar flexible"
        },
        "flexibleDefaultBehavior": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "further defines the background and title movement behavior, use in conjunction with flexible."
        }
      }
    }
  ],
  "src/TopAppBar/index.js": [
    {
      "description": "",
      "displayName": "TopAppBarRoot",
      "methods": [
        {
          "name": "classNames",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "props",
              "type": {
                "name": "intersection",
                "raw": "{\n  /** Emits when the navigation icon is clicked. */\n  onNav?: (evt: CustomEventT<void>) => mixed,\n  /** Styles the top app bar as a fixed top app bar. */\n  fixed?: boolean,\n  /** Styles the top app bar as a prominent top app bar. */\n  prominent?: boolean,\n  /** Styles the top app bar as a short top app bar. */\n  short?: boolean,\n  /** Styles the top app bar to always be collapsed. */\n  shortCollapsed?: boolean,\n  /** Styles the top app bar to be dense. */\n  dense?: boolean\n} & SimpleTagPropsT",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  /** Emits when the navigation icon is clicked. */\n  onNav?: (evt: CustomEventT<void>) => mixed,\n  /** Styles the top app bar as a fixed top app bar. */\n  fixed?: boolean,\n  /** Styles the top app bar as a prominent top app bar. */\n  prominent?: boolean,\n  /** Styles the top app bar as a short top app bar. */\n  short?: boolean,\n  /** Styles the top app bar to always be collapsed. */\n  shortCollapsed?: boolean,\n  /** Styles the top app bar to be dense. */\n  dense?: boolean\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "onNav",
                          "value": {
                            "name": "signature",
                            "type": "function",
                            "raw": "(evt: CustomEventT<void>) => mixed",
                            "signature": {
                              "arguments": [
                                {
                                  "name": "evt",
                                  "type": {
                                    "name": "CustomEventT",
                                    "elements": [
                                      {
                                        "name": "void"
                                      }
                                    ],
                                    "raw": "CustomEventT<void>"
                                  }
                                }
                              ],
                              "return": {
                                "name": "mixed"
                              }
                            },
                            "required": false
                          }
                        },
                        {
                          "key": "fixed",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "prominent",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "short",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "shortCollapsed",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        },
                        {
                          "key": "dense",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "SimpleTagPropsT"
                  }
                ],
                "alias": "TopAppAppBarPropsT"
              }
            }
          ],
          "returns": null
        }
      ]
    },
    {
      "description": "A row for the app bar.",
      "displayName": "TopAppBarRow",
      "methods": []
    },
    {
      "description": "A section for the app bar.",
      "displayName": "TopAppBarSection",
      "methods": [],
      "props": {
        "alignStart": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Aligns the section to the start."
        },
        "alignEnd": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Aligns the section to the end."
        }
      }
    },
    {
      "description": "A navigation icon for the top app bar. This is an instance of the Icon component.",
      "displayName": "TopAppBarNavigationIcon",
      "methods": []
    },
    {
      "description": "Action items for the top app bar. This is an instance of the Icon component.",
      "displayName": "TopAppBarActionItem",
      "methods": []
    },
    {
      "description": "A title for the top app bar.",
      "displayName": "TopAppBarTitle",
      "methods": []
    },
    {
      "description": "An optional component to fill the space when the TopAppBar is fixed. Place it directly after the TopAppBar.",
      "displayName": "TopAppBarFixedAdjust",
      "methods": []
    },
    {
      "description": "A TopAppBar component",
      "displayName": "TopAppBar",
      "methods": [],
      "props": {
        "onNav": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Emits when the navigation icon is clicked."
        },
        "fixed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Styles the top app bar as a fixed top app bar."
        },
        "prominent": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Styles the top app bar as a prominent top app bar."
        },
        "short": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Styles the top app bar as a short top app bar."
        },
        "shortCollapsed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Styles the top app bar to always be collapsed."
        },
        "dense": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Styles the top app bar to be dense."
        }
      }
    },
    {
      "description": "A simplified syntax for creating an AppBar.",
      "displayName": "SimpleTopAppBar",
      "methods": [],
      "props": {
        "title": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "The title for the App Bar."
        },
        "actionItems": {
          "flowType": {
            "name": "Array",
            "elements": [
              {
                "name": "Object"
              }
            ],
            "raw": "Object[]"
          },
          "required": false,
          "description": "An array of props that will be used to create TopAppBarActionItems."
        },
        "navigationIcon": {
          "flowType": {
            "name": "union",
            "raw": "Object | boolean",
            "elements": [
              {
                "name": "Object"
              },
              {
                "name": "boolean"
              }
            ]
          },
          "required": false,
          "description": "Props for the NavigationIcon, which is an instance of the Icon component. You can also set this to `true` and use the `onNav` prop to handle interactions."
        },
        "startContent": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Additional content to place in the start section."
        },
        "endContent": {
          "flowType": {
            "name": "ReactNode",
            "raw": "React.Node"
          },
          "required": false,
          "description": "Additional content to place in the end section."
        },
        "onNav": {
          "flowType": {
            "name": "signature",
            "type": "function",
            "raw": "(evt: CustomEventT<void>) => mixed",
            "signature": {
              "arguments": [
                {
                  "name": "evt",
                  "type": {
                    "name": "CustomEventT",
                    "elements": [
                      {
                        "name": "void"
                      }
                    ],
                    "raw": "CustomEventT<void>"
                  }
                }
              ],
              "return": {
                "name": "mixed"
              }
            }
          },
          "required": false,
          "description": "Emits when the navigation icon is clicked."
        },
        "fixed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Styles the top app bar as a fixed top app bar."
        },
        "prominent": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Styles the top app bar as a prominent top app bar."
        },
        "short": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Styles the top app bar as a short top app bar."
        },
        "shortCollapsed": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Styles the top app bar to always be collapsed."
        },
        "dense": {
          "flowType": {
            "name": "boolean"
          },
          "required": false,
          "description": "Styles the top app bar to be dense."
        }
      }
    }
  ],
  "src/Typography/index.js": [
    {
      "description": "The Typography Component",
      "displayName": "Typography",
      "methods": [],
      "props": {
        "use": {
          "flowType": {
            "name": "union",
            "raw": "'headline1' | 'headline2' | 'headline3' | 'headline4' | 'headline5' | 'headline6' | 'subtitle1' | 'subtitle2' | 'body1' | 'body2' | 'caption' | 'button' | 'overline'",
            "elements": [
              {
                "name": "literal",
                "value": "'headline1'"
              },
              {
                "name": "literal",
                "value": "'headline2'"
              },
              {
                "name": "literal",
                "value": "'headline3'"
              },
              {
                "name": "literal",
                "value": "'headline4'"
              },
              {
                "name": "literal",
                "value": "'headline5'"
              },
              {
                "name": "literal",
                "value": "'headline6'"
              },
              {
                "name": "literal",
                "value": "'subtitle1'"
              },
              {
                "name": "literal",
                "value": "'subtitle2'"
              },
              {
                "name": "literal",
                "value": "'body1'"
              },
              {
                "name": "literal",
                "value": "'body2'"
              },
              {
                "name": "literal",
                "value": "'caption'"
              },
              {
                "name": "literal",
                "value": "'button'"
              },
              {
                "name": "literal",
                "value": "'overline'"
              }
            ]
          },
          "required": true,
          "description": "The typography style."
        }
      }
    }
  ],
  "src/docs/App.js": [
    {
      "description": "",
      "displayName": "App",
      "methods": [
        {
          "name": "doSizeCheck",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "initial",
              "type": null
            }
          ],
          "returns": null
        }
      ]
    }
  ],
  "src/docs/Home.js": [
    {
      "description": "",
      "displayName": "Home",
      "methods": []
    }
  ],
  "src/docs/Submenu.js": [
    {
      "description": "",
      "displayName": "Submenu",
      "methods": [],
      "props": {
        "label": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ]
}