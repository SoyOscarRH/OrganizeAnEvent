import * as React from 'react';
declare type ComponentPropsT<P> = {
    className?: string;
    elementRef?: React.Ref<any>;
    theme?: string | string[];
    tag?: string | React.ComponentType<any>;
} & P & React.HTMLAttributes<any> & React.HTMLProps<any>;
export declare class Component<P> extends React.Component<ComponentPropsT<P>> {
    static displayName: string;
    tag: string | React.ComponentType<any>;
    consumeProps: string[];
    classNames: ((props: any) => any[]) | string[];
    deprecate: {
        [oldPropName: string]: string | [string, (value: any) => any];
    };
    /**
     * All of these functions mutate the props object directly
     */
    handleClassNames(props: any): void;
    handleTag(props: any): void;
    handleElementRef(props: any): void;
    handleDeprecations(props: any): void;
    handleConsumeProps(props: any): void;
    /**
     * A convenience function fro getting the props that are safe to pass
     * To the final rendered tag
     */
    getProps(): any;
    /**
     * Gets the tag to render
     */
    getTag(): any;
    render(): JSX.Element;
}
export {};
