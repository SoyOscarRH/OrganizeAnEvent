'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Component = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withTheme = require('./withTheme');

var _deprecationWarning = require('./utils/deprecationWarning');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Component = exports.Component = function (_React$Component) {
  _inherits(Component, _React$Component);

  function Component() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Component);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Component.__proto__ || Object.getPrototypeOf(Component)).call.apply(_ref, [this].concat(args))), _this), Object.defineProperty(_this, 'tag', {
      enumerable: true,
      writable: true,
      value: 'div'
    }), Object.defineProperty(_this, 'consumeProps', {
      enumerable: true,
      writable: true,
      value: []
    }), Object.defineProperty(_this, 'classNames', {
      enumerable: true,
      writable: true,
      value: function value() {
        return [];
      }
    }), Object.defineProperty(_this, 'deprecate', {
      enumerable: true,
      writable: true,
      value: {}
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Component, [{
    key: 'handleClassNames',


    /**
     * All of these functions mutate the props object directly
     */
    value: function handleClassNames(props) {
      var _props = this.props,
          className = _props.className,
          theme = _props.theme;

      var tsxSafeTheme = theme;
      props.className = _classnames2.default.apply(undefined, [className].concat(_toConsumableArray(!!tsxSafeTheme ? (0, _withTheme.parseThemeOptions)(tsxSafeTheme) : []), _toConsumableArray(typeof this.classNames === 'function' ? this.classNames(this.props) : this.classNames)));
    }
  }, {
    key: 'handleTag',
    value: function handleTag(props) {
      var tag = this.props.tag;
      // Handle the case where we are extending a component but passing
      // a string as a tag. For instance, extending an Icon but rendering a span

      if (typeof this.tag === 'function' && typeof tag === 'string') {
        props.tag = tag;
      }
    }
  }, {
    key: 'handleElementRef',
    value: function handleElementRef(props) {
      var elementRef = this.props.elementRef;

      // handle elementRefs

      if (elementRef) {
        // if the tag is a string, make our ref
        // otherwise pass elementRef along
        if (typeof this.tag === 'string') {
          props.ref = elementRef;
        } else {
          props.elementRef = elementRef;
        }
      }
    }
  }, {
    key: 'handleDeprecations',
    value: function handleDeprecations(props) {
      for (var _oldPropName in this.deprecate) {
        var newProp = this.deprecate[_oldPropName];
        var displayName = this.constructor['displayName'];
        var newPropName = void 0;
        var transformProp = function transformProp(value) {
          return value;
        };

        if (Array.isArray(newProp)) {
          newPropName = newProp[0];
          transformProp = newProp[1];
        } else {
          newPropName = newProp;
        }

        if (props[_oldPropName] !== undefined) {
          if (newPropName === '') {
            (0, _deprecationWarning.deprecationWarning)('prop \'' + _oldPropName + '\' has been removed from the ' + (displayName || '') + ' component and is no longer a valid prop.');
          } else {
            props[newPropName] = transformProp(props[_oldPropName]);
            var propTransformMessage = '';
            if (props[newPropName] !== props[_oldPropName]) {
              propTransformMessage = ' The old value has also been converted from \'' + props[newPropName] + '\' to \'' + props[_oldPropName] + '\'';
            }

            (0, _deprecationWarning.deprecationWarning)('prop \'' + _oldPropName + '\' has been replaced with \'' + newPropName + '\' on the ' + (displayName || '') + ' component.' + propTransformMessage);
          }

          delete props[_oldPropName];
        }
      }
    }
  }, {
    key: 'handleConsumeProps',
    value: function handleConsumeProps(props) {
      this.consumeProps.forEach(function (p) {
        delete props[p];
      });
    }

    /**
     * A convenience function fro getting the props that are safe to pass
     * To the final rendered tag
     */

  }, {
    key: 'getProps',
    value: function getProps() {
      var tsxSafeProps = this.props;

      var elementRef = tsxSafeProps.elementRef,
          className = tsxSafeProps.className,
          theme = tsxSafeProps.theme,
          tag = tsxSafeProps.tag,
          rest = _objectWithoutProperties(tsxSafeProps, ['elementRef', 'className', 'theme', 'tag']);

      var props = rest;

      this.handleClassNames(props);
      this.handleTag(props);
      this.handleElementRef(props);
      this.handleDeprecations(props);
      this.handleConsumeProps(props);
      return props;
    }

    /**
     * Gets the tag to render
     */

  }, {
    key: 'getTag',
    value: function getTag() {
      return typeof this.tag === 'function' && typeof this.props.tag === 'string' ? this.tag : this.props.tag || this.tag;
    }
  }, {
    key: 'render',
    value: function render() {
      var Tag = this.getTag();
      return React.createElement(Tag, this.getProps());
    }
  }]);

  return Component;
}(React.Component);

Object.defineProperty(Component, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'UnknownComponent'
});
