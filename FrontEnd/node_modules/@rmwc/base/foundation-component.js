'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FoundationComponent = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _eventsMap = require('./utils/events-map');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var reactPropFromEventName = function reactPropFromEventName(evtName) {
  return _eventsMap.eventsMap[evtName];
};

var PropsList = function () {
  function PropsList(update) {
    _classCallCheck(this, PropsList);

    Object.defineProperty(this, 'props', {
      enumerable: true,
      writable: true,
      value: {}
    });

    this.update = update;
  }

  _createClass(PropsList, [{
    key: 'add',
    value: function add(propName, value) {
      this.props = Object.assign({}, this.props, _defineProperty({}, propName, value));
      this.update();
    }
  }, {
    key: 'remove',
    value: function remove(propName) {
      delete this.props[propName];
      this.props = Object.assign({}, this.props);
      this.update();
    }
  }, {
    key: 'all',
    value: function all(mergeProps) {
      var _this = this;

      if (mergeProps) {
        var merged = Object.entries(mergeProps).reduce(function (acc, _ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              val = _ref2[1];

          if (typeof _this.props[key] === 'function' && typeof val === 'function') {
            var oldFunc = _this.props[key];
            var wrappedFunc = function wrappedFunc(evt) {
              oldFunc(evt);
              val(evt);
            };

            acc[key] = wrappedFunc;
          }
          return acc;
        }, {});

        return Object.assign({}, mergeProps, this.props, merged);
      }

      return this.props;
    }
  }, {
    key: 'get',
    value: function get(attr) {
      return this.props[attr];
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener(evtName, callback) {
      this.add(reactPropFromEventName(evtName), callback);
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(evtName, callback) {
      this.remove(reactPropFromEventName(evtName));
    }
  }]);

  return PropsList;
}();

var FoundationComponent = exports.FoundationComponent = function (_React$Component) {
  _inherits(FoundationComponent, _React$Component);

  function FoundationComponent(props) {
    _classCallCheck(this, FoundationComponent);

    var _this2 = _possibleConstructorReturn(this, (FoundationComponent.__proto__ || Object.getPrototypeOf(FoundationComponent)).call(this, props));

    Object.defineProperty(_this2, 'classList', {
      enumerable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(_this2, 'propsList', {
      enumerable: true,
      writable: true,
      value: {}
    });

    _this2.foundation_ = _this2.getDefaultFoundation();
    return _this2;
  }

  _createClass(FoundationComponent, [{
    key: 'createClassList',
    value: function createClassList(elementName) {
      var _this3 = this;

      var classes = new Set();
      this.classList[elementName] = {
        renderToString: function renderToString() {
          return (0, _classnames2.default)(elementName === 'root_' && _this3.props.className, [].concat(_toConsumableArray(classes)));
        },
        has: function has(className) {
          return classes.has(className);
        },
        add: function add(className) {
          if (!classes.has(className)) {
            classes.add(className);
            _this3.setState({});
          }
        },
        remove: function remove(className) {
          if (classes.has(className)) {
            classes.delete(className);
            _this3.setState({});
          }
        }
      };
    }
  }, {
    key: 'createPropsList',
    value: function createPropsList(elementName) {
      var _this4 = this;

      this.propsList[elementName] = new PropsList(function () {
        return _this4.setState({});
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.foundation_.init();
      this.sync(this.props);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.sync(this.props);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.foundation_ && this.foundation_.destroy();
      this.propsList = {};
      this.classList = {};
    }
  }, {
    key: 'sync',
    value: function sync(props) {}
  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {}

    /**
     * Fires a cross-browser-compatible custom event from the component root of the given type,
     */

  }, {
    key: 'emit',
    value: function emit(evtType, evtData) {
      var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var evt = void 0;
      if (typeof CustomEvent === 'function') {
        evt = new CustomEvent(evtType, {
          detail: evtData,
          bubbles: shouldBubble
        });
      } else {
        evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(evtType, shouldBubble, false, evtData);
      }

      // Custom handling for React
      var propName = evtType;

      // check to see if the foundation still exists. If not, we are
      // probably unmounted or destroyed and dont want to call any more handlers
      // This happens when MDC broadcasts certain events on timers
      if (this.foundation_) {
        if (this.props[propName]) {
          // covers calling variations of events. onOpened, onClosed -> onOpen, onClose
          this.props[propName](evt);
        }
      }

      return evt;
    }
  }]);

  return FoundationComponent;
}(React.Component);
