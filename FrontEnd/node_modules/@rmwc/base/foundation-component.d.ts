import * as React from 'react';
declare type ClassListT = {
    renderToString: () => string;
    add: (className: string) => void;
    has: (className: string) => boolean;
    remove: (className: string) => void;
};
declare class PropsList {
    update: Function;
    props: {};
    constructor(update: any);
    add(propName: any, value: any): void;
    remove(propName: any): void;
    all(mergeProps?: Object): {
        constructor: Function;
        toString(): string;
        toLocaleString(): string;
        valueOf(): Object;
        hasOwnProperty(v: string | number | symbol): boolean;
        isPrototypeOf(v: Object): boolean;
        propertyIsEnumerable(v: string | number | symbol): boolean;
    };
    get(attr: string): any;
    addEventListener(evtName: any, callback: any): void;
    removeEventListener(evtName: any, callback: any): void;
}
declare type FoundationPropsT<P> = P & React.HTMLAttributes<any> & React.HTMLProps<any>;
export declare class FoundationComponent<P, S = {}> extends React.Component<FoundationPropsT<P>, S> {
    foundation_: any;
    classList: {
        [key: string]: ClassListT;
    };
    propsList: {
        [key: string]: PropsList;
    };
    constructor(props: FoundationPropsT<P>);
    createClassList(elementName: string): void;
    createPropsList(elementName: string): void;
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentWillUnmount(): void;
    sync(props: any): void;
    getDefaultFoundation(): void;
    /**
     * Fires a cross-browser-compatible custom event from the component root of the given type,
     */
    emit(evtType: string, evtData: Object, shouldBubble?: boolean): any;
}
export {};
