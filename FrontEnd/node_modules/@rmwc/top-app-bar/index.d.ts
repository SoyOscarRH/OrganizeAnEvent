import { SimpleTagPropsT, CustomEventT } from '@rmwc/base';
import { IconPropsT } from '@rmwc/icon';
import * as React from 'react';
declare type TopAppAppBarPropsT = {
    /** Emits when the navigation icon is clicked. */
    onNav?: (evt: CustomEventT<void>) => any;
    /** Styles the top app bar as a fixed top app bar. */
    fixed?: boolean;
    /** Styles the top app bar as a prominent top app bar. */
    prominent?: boolean;
    /** Styles the top app bar as a short top app bar. */
    short?: boolean;
    /** Styles the top app bar to always be collapsed. */
    shortCollapsed?: boolean;
    /** Styles the top app bar to be dense. */
    dense?: boolean;
} & SimpleTagPropsT;
export declare const TopAppBarRoot: React.ComponentType<TopAppAppBarPropsT>;
/** A row for the app bar. */
export declare const TopAppBarRow: React.ComponentType<SimpleTagPropsT>;
declare type TopAppBarSectionPropsT = {
    /** Aligns the section to the start. */
    alignStart?: boolean;
    /** Aligns the section to the end. */
    alignEnd?: boolean;
} & SimpleTagPropsT;
/** A section for the app bar. */
export declare const TopAppBarSection: React.ComponentType<TopAppBarSectionPropsT>;
/** A navigation icon for the top app bar. This is an instance of the Icon component. */
export declare const TopAppBarNavigationIcon: React.ComponentType<IconPropsT>;
/** Action items for the top app bar. This is an instance of the Icon component.*/
export declare const TopAppBarActionItem: React.ComponentType<IconPropsT>;
/** A title for the top app bar. */
export declare const TopAppBarTitle: React.ComponentType<SimpleTagPropsT>;
declare type TopAppBarFixedAdjustPropsT = {
    /** Class used to style the content below the dense top app bar to prevent the top app bar from covering it. */
    dense?: boolean;
    /** Class used to style the content below the prominent top app bar to prevent the top app bar from covering it. */
    prominent?: boolean;
    /** Class used to style the content below the top app bar when styled as both prominent and dense, to prevent the top app bar from covering it. */
    denseProminent?: boolean;
    /** Class used to style the content below the short top app bar to prevent the top app bar from covering it. */
    short?: boolean;
} & SimpleTagPropsT;
/** An optional component to fill the space when the TopAppBar is fixed. Place it directly after the TopAppBar. */
export declare const TopAppBarFixedAdjust: React.ComponentType<TopAppBarFixedAdjustPropsT>;
declare const TopAppBar_base: {
    new <P>(props: P & {
        tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
        wrap?: boolean | undefined;
        elementRef?: any;
        theme?: string | string[] | undefined;
        apiRef?: (<S>(api: S) => S) | undefined;
    } & React.HTMLAttributes<any> & React.HTMLProps<any>): {
        foundation_: {
            [key: string]: any;
            adapter_: any;
            init: Function;
            destroy: Function;
        } | null;
        foundationRefs: {
            [name: string]: (ref: HTMLElement) => any;
        };
        root_: Element | Text | null;
        props: P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>;
        componentDidMount(): void;
        componentWillReceiveProps(nextProps: P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>): void;
        componentWillUnmount(): void;
        _safeSyncWithProps(props: Object): void;
        initFoundation(): void;
        destroyComponent(): void;
        syncWithProps(nextProps: Object): void;
        initialize(...args: any[]): void;
        initialSyncWithDOM(): void;
        destroy(): void;
        getDefaultFoundation(): {
            adapter_: {};
            init: () => void;
            destroy: () => void;
        };
        emit(evtType: string, evtData: Object, shouldBubble?: boolean, sync?: boolean): any;
        listen(evtType: string, handler: Function): void;
        unlisten(evtType: string, handler: Function): void;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        render(): React.ReactNode;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
};
/** A TopAppBar component */
export declare class TopAppBar extends TopAppBar_base<TopAppAppBarPropsT> {
    static displayName: string;
    render(): JSX.Element;
}
export declare type SimpleTopAppBarPropsT = {
    /** The title for the App Bar. */
    title?: React.ReactNode;
    /** An array of props that will be used to create TopAppBarActionItems. */
    actionItems?: Object[];
    /** Props for the NavigationIcon, which is an instance of the Icon component. You can also set this to `true` and use the `onNav` prop to handle interactions.*/
    navigationIcon?: Object | boolean;
    /** Additional content to place in the start section. */
    startContent?: React.ReactNode;
    /** Additional content to place in the end section. */
    endContent?: React.ReactNode;
} & TopAppAppBarPropsT;
/** A simplified syntax for creating an AppBar. */
export declare class SimpleTopAppBar extends React.Component<SimpleTopAppBarPropsT> {
    static displayName: string;
    render(): JSX.Element;
}
export {};
