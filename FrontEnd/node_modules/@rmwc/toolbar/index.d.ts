import { IconPropsT } from '@rmwc/icon';
import { SimpleTagPropsT } from '@rmwc/base';
import * as React from 'react';
export declare type ToolbarPropsT = {
    /** Makes the toolbar fixed */
    fixed?: boolean;
    /** Adds a waterfall effect on scroll */
    waterfall?: boolean;
    /** Fixes the last row of a multi-row toolbar */
    fixedLastrowOnly?: boolean;
    /** makes the toolbar flexible */
    flexible?: boolean;
    /** further defines the background and title movement behavior, use in conjunction with flexible. */
    flexibleDefaultBehavior?: boolean;
} & SimpleTagPropsT;
export declare const ToolbarRoot: React.ComponentType<SimpleTagPropsT>;
/** A Toolbar title  */
export declare const ToolbarTitle: React.ComponentType<SimpleTagPropsT>;
declare type ToolbarSectionPropsT = {
    /** Aligns the ToolbarSection at the start. */
    alignStart?: boolean;
    /** Aligns the ToolbarSection at the end. */
    alignEnd?: boolean;
    /** Makes the ToolbarSection shrink to fit. */
    shrinkToFit?: boolean;
} & SimpleTagPropsT;
/** A section of the Toolbar */
export declare const ToolbarSection: React.ComponentType<ToolbarSectionPropsT>;
/** A Toolbar row  */
export declare const ToolbarRow: React.ComponentType<SimpleTagPropsT>;
/**
 * This component can be placed after a fixed Toolbar component to fill in the space.
 */
export declare const ToolbarFixedAdjust: React.ComponentType<SimpleTagPropsT>;
/**
 * A Menu Icon For the Toolbar. This is an instance of the Icon component.
 */
export declare const ToolbarMenuIcon: React.ComponentType<IconPropsT>;
/**
 * A standard Icon for toolbar actions. This is an instance of the Icon component.
 */
export declare const ToolbarIcon: React.ComponentType<IconPropsT>;
declare const Toolbar_base: {
    new <P>(props: P & {
        tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
        wrap?: boolean | undefined;
        elementRef?: any;
        theme?: string | string[] | undefined;
        apiRef?: (<S>(api: S) => S) | undefined;
    } & React.HTMLAttributes<any> & React.HTMLProps<any>): {
        foundation_: {
            [key: string]: any;
            adapter_: any;
            init: Function;
            destroy: Function;
        } | null;
        foundationRefs: {
            [name: string]: (ref: HTMLElement) => any;
        };
        root_: Element | Text | null;
        props: P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>;
        /**
         * A standard Icon for toolbar actions. This is an instance of the Icon component.
         */
        componentDidMount(): void;
        componentWillReceiveProps(nextProps: P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>): void;
        componentWillUnmount(): void;
        _safeSyncWithProps(props: Object): void;
        initFoundation(): void;
        destroyComponent(): void;
        syncWithProps(nextProps: Object): void;
        initialize(...args: any[]): void;
        initialSyncWithDOM(): void;
        destroy(): void;
        getDefaultFoundation(): {
            adapter_: {};
            init: () => void;
            destroy: () => void;
        };
        emit(evtType: string, evtData: Object, shouldBubble?: boolean, sync?: boolean): any;
        listen(evtType: string, handler: Function): void;
        unlisten(evtType: string, handler: Function): void;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        render(): React.ReactNode;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
};
export declare class Toolbar extends Toolbar_base<ToolbarPropsT> {
    static displayName: string;
    fixedAdjustElement: any;
    root_: any;
    componentDidMount(): void;
    render(): JSX.Element;
}
export {};
