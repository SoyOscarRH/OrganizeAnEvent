import { SimpleTagPropsT } from '@rmwc/base';
import * as React from 'react';
export declare type SwitchPropsT = {
    /** A DOM ID for the toggle. */
    id?: string;
    /** Disables the control. */
    disabled?: boolean;
    /** Toggle the control on and off. */
    checked?: boolean | string;
    /** A label for the control. */
    label?: string;
    /** Props for the root element. By default, props spread to the input. */
    rootProps?: any;
    /** Any children to render. */
    children?: React.ReactNode;
} & SimpleTagPropsT & React.InputHTMLAttributes<HTMLInputElement>;
export declare const SwitchRoot: React.ComponentType<SimpleTagPropsT>;
export declare const SwitchNativeControl: React.ComponentType<SimpleTagPropsT>;
export declare const SwitchTrack: React.ComponentType<SimpleTagPropsT>;
export declare const SwitchThumbUnderlay: React.ComponentType<SimpleTagPropsT>;
export declare const SwitchThumb: React.ComponentType<SimpleTagPropsT>;
export declare const SwitchKnob: React.ComponentType<SimpleTagPropsT>;
export declare const SwitchLabel: React.ComponentType<SimpleTagPropsT>;
declare const Switch_base: {
    new <P>(props: P & {
        tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
        wrap?: boolean | undefined;
        elementRef?: any;
        theme?: string | string[] | undefined;
        apiRef?: (<S>(api: S) => S) | undefined;
    } & React.HTMLAttributes<any> & React.HTMLProps<any>): {
        foundation_: {
            [key: string]: any;
            adapter_: any;
            init: Function;
            destroy: Function;
        } | null;
        foundationRefs: {
            [name: string]: (ref: HTMLElement) => any;
        };
        root_: Element | Text | null;
        props: P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>;
        componentDidMount(): void;
        componentWillReceiveProps(nextProps: P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>): void;
        componentWillUnmount(): void;
        _safeSyncWithProps(props: Object): void;
        initFoundation(): void;
        destroyComponent(): void;
        syncWithProps(nextProps: Object): void;
        initialize(...args: any[]): void;
        initialSyncWithDOM(): void;
        destroy(): void;
        getDefaultFoundation(): {
            adapter_: {};
            init: () => void;
            destroy: () => void;
        };
        emit(evtType: string, evtData: Object, shouldBubble?: boolean, sync?: boolean): any;
        listen(evtType: string, handler: Function): void;
        unlisten(evtType: string, handler: Function): void;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P & {
            tag?: string | React.ComponentClass<any, any> | React.StatelessComponent<any> | undefined;
            wrap?: boolean | undefined;
            elementRef?: any;
            theme?: string | string[] | undefined;
            apiRef?: (<S>(api: S) => S) | undefined;
        } & React.HTMLAttributes<any> & React.HTMLProps<any>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        render(): React.ReactNode;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
};
export declare class Switch extends Switch_base<SwitchPropsT> {
    static displayName: string;
    generatedId: string;
    disabled: boolean;
    checked: boolean;
    ripple_: any;
    initRipple_: Function;
    constructor(props: SwitchPropsT);
    componentDidMount(): void;
    syncWithProps(nextProps: SwitchPropsT): void;
    render(): JSX.Element;
}
export default Switch;
