'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Switch = exports.SwitchLabel = exports.SwitchKnob = exports.SwitchThumb = exports.SwitchThumbUnderlay = exports.SwitchTrack = exports.SwitchNativeControl = exports.SwitchRoot = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _formfield = require('@rmwc/formfield');

var _formfield2 = _interopRequireDefault(_formfield);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _mdc = require('@material/switch/dist/mdc.switch');

var _base = require('@rmwc/base');

var _randomId = require('@rmwc/base/utils/randomId');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SwitchRoot = exports.SwitchRoot = (0, _base.simpleTag)({
  displayName: 'SwitchRoot',
  classNames: 'mdc-switch'
});

var SwitchNativeControl = exports.SwitchNativeControl = (0, _base.simpleTag)({
  displayName: 'SwitchNativeControl',
  tag: 'input',
  classNames: 'mdc-switch__native-control',
  defaultProps: {
    type: 'checkbox'
  }
});

var SwitchTrack = exports.SwitchTrack = (0, _base.simpleTag)({
  displayName: 'SwitchTrack',
  classNames: 'mdc-switch__track'
});

var SwitchThumbUnderlay = exports.SwitchThumbUnderlay = (0, _base.simpleTag)({
  displayName: 'SwitchThumbUnderlay',
  classNames: 'mdc-switch__thumb-underlay'
});

var SwitchThumb = exports.SwitchThumb = (0, _base.simpleTag)({
  displayName: 'SwitchThumb',
  classNames: 'mdc-switch__thumb'
});

var SwitchKnob = exports.SwitchKnob = (0, _base.simpleTag)({
  displayName: 'SwitchKnob',
  classNames: 'mdc-switch__knob'
});

var SwitchLabel = exports.SwitchLabel = (0, _base.simpleTag)({
  displayName: 'SwitchLabel',
  tag: 'label',
  classNames: 'mdc-switch-label'
});

var Switch = exports.Switch = function (_withFoundation) {
  _inherits(Switch, _withFoundation);

  function Switch(props) {
    _classCallCheck(this, Switch);

    var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));

    _this.generatedId = (0, _randomId.randomId)('switch');
    return _this;
  }

  _createClass(Switch, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _get(Switch.prototype.__proto__ || Object.getPrototypeOf(Switch.prototype), 'componentDidMount', this).call(this);
      this.ripple_ = this.initRipple_();
    }
  }, {
    key: 'syncWithProps',
    value: function syncWithProps(nextProps) {
      var _this2 = this;

      // checked
      (0, _base.syncFoundationProp)(nextProps.checked, this.checked, function () {
        _this2.checked = !!nextProps.checked;
      });

      // disabled
      (0, _base.syncFoundationProp)(nextProps.disabled, this.disabled, function () {
        _this2.disabled = !!nextProps.disabled;
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          _props$label = _props.label,
          label = _props$label === undefined ? '' : _props$label,
          id = _props.id,
          children = _props.children,
          disabled = _props.disabled,
          className = _props.className,
          _props$rootProps = _props.rootProps,
          rootProps = _props$rootProps === undefined ? {} : _props$rootProps,
          rest = _objectWithoutProperties(_props, ['label', 'id', 'children', 'disabled', 'className', 'rootProps']);

      var labelId = id || this.generatedId;
      var hasLabel = label.length || children;
      var root_ = this.foundationRefs.root_;


      var switchTag = React.createElement(
        SwitchRoot,
        Object.assign({}, !hasLabel ? rootProps : {}, {
          className: (0, _classnames2.default)(hasLabel || [rootProps.className, className]),
          elementRef: root_
        }),
        React.createElement(SwitchTrack, null),
        React.createElement(
          SwitchThumbUnderlay,
          null,
          React.createElement(
            SwitchThumb,
            null,
            React.createElement(SwitchNativeControl, Object.assign({ id: labelId }, rest))
          )
        ),
        React.createElement(SwitchKnob, null)
      );

      /**
       * We have to conditionally wrap our checkbox in a formfield
       * If we have a label
       */
      if (hasLabel) {
        return React.createElement(
          _formfield2.default,
          Object.assign({}, rootProps, {
            className: (0, _classnames2.default)(rootProps.className, className)
          }),
          switchTag,
          React.createElement(
            SwitchLabel,
            { id: labelId + 'label', htmlFor: labelId },
            label,
            children
          )
        );
      } else {
        return switchTag;
      }
    }
  }]);

  return Switch;
}((0, _base.withFoundation)({
  constructor: _mdc.MDCSwitch,
  adapter: {}
}));

Object.defineProperty(Switch, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'Switch'
});
exports.default = Switch;
