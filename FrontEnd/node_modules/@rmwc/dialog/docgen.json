[
  {
    "description": "The Dialog title.",
    "displayName": "DialogTitle",
    "methods": []
  },
  {
    "description": "The Dialog content.",
    "displayName": "DialogContent",
    "methods": []
  },
  {
    "description": "Actions container for the Dialog.",
    "displayName": "DialogActions",
    "methods": []
  },
  {
    "description": "Action buttons for the Dialog.",
    "displayName": "DialogButton",
    "methods": [],
    "props": {
      "action": {
        "flowType": {
          "name": "string"
        },
        "required": false,
        "description": "An action returned in evt.detail.action to the onClose handler."
      },
      "isDefaultAction": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Indicates this is the default selected action when pressing enter"
      }
    }
  },
  {
    "description": "A Dialog component.",
    "displayName": "Dialog",
    "methods": [
      {
        "name": "open",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "close",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "sync",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** Whether or not the Dialog is showing. */\n  open: boolean,\n  /** Callback for when the Dialog opens. */\n  onOpen?: (evt: CustomEventT<void>) => mixed,\n  /** Callback for when the Dialog closes. */\n  onClose?: (evt: CustomEventT<void>) => mixed\n}",
              "signature": {
                "properties": [
                  {
                    "key": "open",
                    "value": {
                      "name": "boolean",
                      "required": true
                    }
                  },
                  {
                    "key": "onOpen",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "(evt: CustomEventT<void>) => mixed",
                      "signature": {
                        "arguments": [
                          {
                            "name": "evt",
                            "type": {
                              "name": "CustomEventT",
                              "elements": [
                                {
                                  "name": "void"
                                }
                              ],
                              "raw": "CustomEventT<void>"
                            }
                          }
                        ],
                        "return": {
                          "name": "mixed"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "onClose",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "(evt: CustomEventT<void>) => mixed",
                      "signature": {
                        "arguments": [
                          {
                            "name": "evt",
                            "type": {
                              "name": "CustomEventT",
                              "elements": [
                                {
                                  "name": "void"
                                }
                              ],
                              "raw": "CustomEventT<void>"
                            }
                          }
                        ],
                        "return": {
                          "name": "mixed"
                        }
                      },
                      "required": false
                    }
                  }
                ]
              },
              "alias": "DialogPropsT"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "getDefaultFoundation",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "open": {
        "flowType": {
          "name": "boolean"
        },
        "required": true,
        "description": "Whether or not the Dialog is showing."
      },
      "onOpen": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(evt: CustomEventT<void>) => mixed",
          "signature": {
            "arguments": [
              {
                "name": "evt",
                "type": {
                  "name": "CustomEventT",
                  "elements": [
                    {
                      "name": "void"
                    }
                  ],
                  "raw": "CustomEventT<void>"
                }
              }
            ],
            "return": {
              "name": "mixed"
            }
          }
        },
        "required": false,
        "description": "Callback for when the Dialog opens."
      },
      "onClose": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(evt: CustomEventT<void>) => mixed",
          "signature": {
            "arguments": [
              {
                "name": "evt",
                "type": {
                  "name": "CustomEventT",
                  "elements": [
                    {
                      "name": "void"
                    }
                  ],
                  "raw": "CustomEventT<void>"
                }
              }
            ],
            "return": {
              "name": "mixed"
            }
          }
        },
        "required": false,
        "description": "Callback for when the Dialog closes."
      }
    }
  },
  {
    "description": "A non-standard SimpleDialog component for ease of use.",
    "displayName": "SimpleDialog",
    "methods": [],
    "props": {
      "title": {
        "flowType": {
          "name": "ReactNode",
          "raw": "React.Node"
        },
        "required": false,
        "description": "A title for the default Dialog template.",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "header": {
        "flowType": {
          "name": "ReactNode",
          "raw": "React.Node"
        },
        "required": false,
        "description": "Additional Dialog header content for the default Dialog template.",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "body": {
        "flowType": {
          "name": "ReactNode",
          "raw": "React.Node"
        },
        "required": false,
        "description": "Body content for the default Dialog template, rendered before children.",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "footer": {
        "flowType": {
          "name": "ReactNode",
          "raw": "React.Node"
        },
        "required": false,
        "description": "Additional footer content for the default Dialog template, rendered before any buttons.",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "acceptLabel": {
        "flowType": {
          "name": "ReactNode",
          "raw": "React.Node"
        },
        "required": false,
        "description": "Creates an accept button for the default Dialog template with a given label. You can pass `null` to remove the button.",
        "defaultValue": {
          "value": "'Accept'",
          "computed": false
        }
      },
      "cancelLabel": {
        "flowType": {
          "name": "ReactNode",
          "raw": "React.Node"
        },
        "required": false,
        "description": "Creates an cancel button for the default Dialog with a given label. You can pass `null` to remove the button.",
        "defaultValue": {
          "value": "'Cancel'",
          "computed": false
        }
      },
      "children": {
        "flowType": {
          "name": "ReactNode",
          "raw": "React.Node"
        },
        "required": false,
        "description": "Any children will be rendered in the body of the default Dialog template.",
        "defaultValue": {
          "value": "undefined",
          "computed": true
        }
      },
      "scrollable": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Allow the body to be scrollable"
      },
      "open": {
        "flowType": {
          "name": "boolean"
        },
        "required": false,
        "description": "Whether or not the Dialog is showing.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onOpen": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(evt: CustomEventT<void>) => mixed",
          "signature": {
            "arguments": [
              {
                "name": "evt",
                "type": {
                  "name": "CustomEventT",
                  "elements": [
                    {
                      "name": "void"
                    }
                  ],
                  "raw": "CustomEventT<void>"
                }
              }
            ],
            "return": {
              "name": "mixed"
            }
          }
        },
        "required": false,
        "description": "Callback for when the Dialog opens."
      },
      "onClose": {
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(evt: CustomEventT<void>) => mixed",
          "signature": {
            "arguments": [
              {
                "name": "evt",
                "type": {
                  "name": "CustomEventT",
                  "elements": [
                    {
                      "name": "void"
                    }
                  ],
                  "raw": "CustomEventT<void>"
                }
              }
            ],
            "return": {
              "name": "mixed"
            }
          }
        },
        "required": false,
        "description": "Callback for when the Dialog closes.",
        "defaultValue": {
          "value": "noop",
          "computed": true
        }
      }
    }
  }
]