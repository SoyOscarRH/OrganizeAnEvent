'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleDialog = exports.Dialog = exports.DialogButton = exports.DialogActions = exports.DialogContent = exports.DialogTitle = undefined;

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _mdc = require('@material/dialog/dist/mdc.dialog');

var _focusTrap = require('focus-trap');

var _focusTrap2 = _interopRequireDefault(_focusTrap);

var _button = require('@rmwc/button');

var _button2 = _interopRequireDefault(_button);

var _base = require('@rmwc/base');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var strings = _mdc.MDCDialogFoundation.strings;

var isScrollable = function isScrollable(el) {
  return el.scrollHeight > el.offsetHeight;
};

var areTopsMisaligned = function areTopsMisaligned(els) {
  var tops = new Set();
  [].forEach.call(els, function (el) {
    return tops.add(el.offsetTop);
  });
  return tops.size > 1;
};

var closest = function closest(element, selector) {
  if (element.closest) {
    return element.closest(selector);
  }

  var el = element;
  while (el) {
    if (matches(el, selector)) {
      return el;
    }
    el = el.parentElement;
  }
  return null;
};

var matches = function matches(element, selector) {
  var nativeMatches = element.matches || element.webkitMatchesSelector || element.msMatchesSelector;
  return nativeMatches.call(element, selector);
};

var DialogRoot = function (_Component) {
  _inherits(DialogRoot, _Component);

  function DialogRoot() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DialogRoot);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DialogRoot.__proto__ || Object.getPrototypeOf(DialogRoot)).call.apply(_ref, [this].concat(args))), _this), Object.defineProperty(_this, 'classNames', {
      enumerable: true,
      writable: true,
      value: ['mdc-dialog']
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  return DialogRoot;
}(_base.Component);

Object.defineProperty(DialogRoot, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'DialogRoot'
});
Object.defineProperty(DialogRoot, 'defaultProps', {
  enumerable: true,
  writable: true,
  value: undefined
});

var DialogScrim = function (_React$Component) {
  _inherits(DialogScrim, _React$Component);

  function DialogScrim() {
    _classCallCheck(this, DialogScrim);

    return _possibleConstructorReturn(this, (DialogScrim.__proto__ || Object.getPrototypeOf(DialogScrim)).apply(this, arguments));
  }

  _createClass(DialogScrim, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      return false;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement('div', { className: 'mdc-dialog__scrim' });
    }
  }]);

  return DialogScrim;
}(React.Component);

/** @extends React.Component */
/** The Dialog title. */


var DialogTitle = exports.DialogTitle = function (_Component2) {
  _inherits(DialogTitle, _Component2);

  function DialogTitle() {
    var _ref2;

    var _temp2, _this3, _ret2;

    _classCallCheck(this, DialogTitle);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret2 = (_temp2 = (_this3 = _possibleConstructorReturn(this, (_ref2 = DialogTitle.__proto__ || Object.getPrototypeOf(DialogTitle)).call.apply(_ref2, [this].concat(args))), _this3), Object.defineProperty(_this3, 'tag', {
      enumerable: true,
      writable: true,
      value: 'h2'
    }), Object.defineProperty(_this3, 'classNames', {
      enumerable: true,
      writable: true,
      value: ['mdc-dialog__title']
    }), _temp2), _possibleConstructorReturn(_this3, _ret2);
  }

  return DialogTitle;
}(_base.Component);

/** @extends React.Component */
/** The Dialog content. */


Object.defineProperty(DialogTitle, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'DialogTitle'
});

var DialogContent = exports.DialogContent = function (_Component3) {
  _inherits(DialogContent, _Component3);

  function DialogContent() {
    var _ref3;

    var _temp3, _this4, _ret3;

    _classCallCheck(this, DialogContent);

    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return _ret3 = (_temp3 = (_this4 = _possibleConstructorReturn(this, (_ref3 = DialogContent.__proto__ || Object.getPrototypeOf(DialogContent)).call.apply(_ref3, [this].concat(args))), _this4), Object.defineProperty(_this4, 'classNames', {
      enumerable: true,
      writable: true,
      value: ['mdc-dialog__content']
    }), _temp3), _possibleConstructorReturn(_this4, _ret3);
  }

  return DialogContent;
}(_base.Component);

/** @extends React.Component */
/** Actions container for the Dialog. */


Object.defineProperty(DialogContent, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'DialogContent'
});

var DialogActions = exports.DialogActions = function (_Component4) {
  _inherits(DialogActions, _Component4);

  function DialogActions() {
    var _ref4;

    var _temp4, _this5, _ret4;

    _classCallCheck(this, DialogActions);

    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return _ret4 = (_temp4 = (_this5 = _possibleConstructorReturn(this, (_ref4 = DialogActions.__proto__ || Object.getPrototypeOf(DialogActions)).call.apply(_ref4, [this].concat(args))), _this5), Object.defineProperty(_this5, 'classNames', {
      enumerable: true,
      writable: true,
      value: ['mdc-dialog__actions']
    }), _temp4), _possibleConstructorReturn(_this5, _ret4);
  }

  return DialogActions;
}(_base.Component);

Object.defineProperty(DialogActions, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'DialogActions'
});

/** Action buttons for the Dialog. */
var DialogButton = exports.DialogButton = function (_React$Component2) {
  _inherits(DialogButton, _React$Component2);

  function DialogButton() {
    _classCallCheck(this, DialogButton);

    return _possibleConstructorReturn(this, (DialogButton.__proto__ || Object.getPrototypeOf(DialogButton)).apply(this, arguments));
  }

  _createClass(DialogButton, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          _props$action = _props.action,
          action = _props$action === undefined ? '' : _props$action,
          className = _props.className,
          isDefaultAction = _props.isDefaultAction,
          rest = _objectWithoutProperties(_props, ['action', 'className', 'isDefaultAction']);

      return React.createElement(_button2.default, Object.assign({}, rest, {
        'data-mdc-dialog-action': action,
        className: [className, 'mdc-dialog__button', isDefaultAction && 'mdc-dialog__button--default'].filter(Boolean).join(' ')
      }));
    }
  }]);

  return DialogButton;
}(React.Component);

Object.defineProperty(DialogButton, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'DialogButton'
});

/** A Dialog component. */
var Dialog = exports.Dialog = function (_FoundationComponent) {
  _inherits(Dialog, _FoundationComponent);

  function Dialog(props) {
    _classCallCheck(this, Dialog);

    var _this7 = _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).call(this, props));

    _this7.createClassList('root_');
    return _this7;
  }

  _createClass(Dialog, [{
    key: 'open',
    value: function open() {
      if (!this.foundation_.isOpen_) {
        document.addEventListener('keydown', this.handleDocumentKeydown_);
        this.foundation_.open();
      }
    }
  }, {
    key: 'close',
    value: function close() {
      if (this.foundation_.isOpen_) {
        document.removeEventListener('keydown', this.handleDocumentKeydown_);
        this.foundation_.close();
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.container_ = this.root_ && this.root_.querySelector(strings.CONTAINER_SELECTOR);
      this.content_ = this.root_ && this.root_.querySelector(strings.CONTENT_SELECTOR);
      this.buttons_ = this.root_ && [].slice.call(this.root_.querySelectorAll(strings.BUTTON_SELECTOR));
      this.defaultButton_ = this.root_ && this.root_.querySelector(strings.DEFAULT_BUTTON_SELECTOR);

      this.container_ && (this.focusTrap_ = (0, _focusTrap2.default)(this.container_, {
        initialFocus: this.defaultButton_ || undefined,
        escapeDeactivates: false,
        clickOutsideDeactivates: true
      }));

      this.handleInteraction_ = this.foundation_.handleInteraction.bind(this.foundation_);

      this.root_ && this.root_.addEventListener('click', this.handleInteraction_);
      this.root_ && this.root_.addEventListener('keydown', this.handleInteraction_);
      this.handleDocumentKeydown_ = this.foundation_.handleDocumentKeydown.bind(this.foundation_);

      _get(Dialog.prototype.__proto__ || Object.getPrototypeOf(Dialog.prototype), 'componentDidMount', this).call(this);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      _get(Dialog.prototype.__proto__ || Object.getPrototypeOf(Dialog.prototype), 'componentWillUnmount', this).call(this);
      document.removeEventListener('keydown', this.handleDocumentKeydown_);
      this.root_ && this.root_.removeEventListener('click', this.handleInteraction_);
      this.root_ && this.root_.removeEventListener('keydown', this.handleInteraction_);
    }
  }, {
    key: 'sync',
    value: function sync(props) {
      if (this.props.open) {
        this.open();
      } else {
        this.close();
      }
    }
  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this8 = this;

      return new _mdc.MDCDialogFoundation({
        addClass: function addClass(className) {
          // a hack to make sure the open animation is triggered
          if (className === 'mdc-dialog--open') {
            window.requestAnimationFrame(function () {
              _this8.classList.root_.add(className);
            });
          } else {
            _this8.classList.root_.add(className);
          }
        },
        removeClass: function removeClass(className) {
          return _this8.classList.root_.remove(className);
        },
        hasClass: function hasClass(className) {
          return _this8.classList.root_.has(className);
        },
        addBodyClass: function addBodyClass(className) {
          return document.body && document.body.classList.add(className);
        },
        removeBodyClass: function removeBodyClass(className) {
          return document.body && document.body.classList.remove(className);
        },
        eventTargetMatches: function eventTargetMatches(target, selector) {
          return matches(target, selector);
        },
        computeBoundingRect: function computeBoundingRect() {
          return _this8.root_ && _this8.root_.getBoundingClientRect();
        },
        trapFocus: function trapFocus() {
          return _this8.focusTrap_.activate();
        },
        releaseFocus: function releaseFocus() {
          return _this8.focusTrap_.deactivate();
        },
        isContentScrollable: function isContentScrollable() {
          return !!_this8.content_ && isScrollable(_this8.content_);
        },
        areButtonsStacked: function areButtonsStacked() {
          return areTopsMisaligned(_this8.buttons_);
        },
        getActionFromEvent: function getActionFromEvent(event) {
          var element = closest(event.target, '[' + strings.ACTION_ATTRIBUTE + ']');
          return element && element.getAttribute(strings.ACTION_ATTRIBUTE);
        },
        clickDefaultButton: function clickDefaultButton() {
          if (_this8.defaultButton_) {
            _this8.defaultButton_.click();
          }
        },
        reverseButtons: function reverseButtons() {
          _this8.buttons_ && _this8.buttons_.reverse();
          _this8.buttons_ && _this8.buttons_.forEach(function (button) {
            return button.parentElement && button.parentElement.appendChild(button);
          });
        },
        notifyOpening: function notifyOpening() {
          return _this8.emit('onOpen', {});
        },
        notifyOpened: function notifyOpened() {
          return _this8.emit('onOpened', {});
        },
        notifyClosing: function notifyClosing(action) {
          return _this8.emit('onClose', action ? { action: action } : {});
        },
        notifyClosed: function notifyClosed(action) {
          return _this8.emit('onClosed', action ? { action: action } : {});
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this9 = this;

      var _props2 = this.props,
          children = _props2.children,
          open = _props2.open,
          onOpen = _props2.onOpen,
          onClose = _props2.onClose,
          rest = _objectWithoutProperties(_props2, ['children', 'open', 'onOpen', 'onClose']);

      return React.createElement(
        DialogRoot,
        Object.assign({}, rest, {
          elementRef: function elementRef(ref) {
            return _this9.root_ = ref;
          },
          className: this.classList.root_.renderToString()
        }),
        React.createElement(
          'div',
          { className: 'mdc-dialog__container' },
          React.createElement(
            'div',
            { className: 'mdc-dialog__surface' },
            children
          )
        ),
        React.createElement(DialogScrim, null)
      );
    }
  }]);

  return Dialog;
}(_base.FoundationComponent);

Object.defineProperty(Dialog, 'displayName', {
  enumerable: true,
  writable: true,
  value: 'Dialog'
});

/** A non-standard SimpleDialog component for ease of use. */
var SimpleDialog = exports.SimpleDialog = function (_React$Component3) {
  _inherits(SimpleDialog, _React$Component3);

  function SimpleDialog() {
    _classCallCheck(this, SimpleDialog);

    return _possibleConstructorReturn(this, (SimpleDialog.__proto__ || Object.getPrototypeOf(SimpleDialog)).apply(this, arguments));
  }

  _createClass(SimpleDialog, [{
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          title = _props3.title,
          header = _props3.header,
          body = _props3.body,
          footer = _props3.footer,
          acceptLabel = _props3.acceptLabel,
          cancelLabel = _props3.cancelLabel,
          children = _props3.children,
          open = _props3.open,
          rest = _objectWithoutProperties(_props3, ['title', 'header', 'body', 'footer', 'acceptLabel', 'cancelLabel', 'children', 'open']);

      return React.createElement(
        Dialog,
        Object.assign({ open: open }, rest),
        (!!title || !!header) && React.createElement(
          DialogTitle,
          null,
          !!title && title,
          !!header && header
        ),
        (!!body || children) && React.createElement(
          DialogContent,
          null,
          body,
          children
        ),
        (!!cancelLabel || !!acceptLabel) && React.createElement(
          DialogActions,
          null,
          !!footer && { footer: footer },
          !!cancelLabel && React.createElement(
            DialogButton,
            { action: 'close' },
            cancelLabel
          ),
          !!acceptLabel && React.createElement(
            DialogButton,
            { action: 'accept' },
            acceptLabel
          )
        )
      );
    }
  }]);

  return SimpleDialog;
}(React.Component);

Object.defineProperty(SimpleDialog, 'defaultProps', {
  enumerable: true,
  writable: true,
  value: {
    title: undefined,
    header: undefined,
    body: undefined,
    footer: undefined,
    acceptLabel: 'Accept',
    cancelLabel: 'Cancel',
    open: false,
    onClose: _base.noop,
    children: undefined
  }
});
