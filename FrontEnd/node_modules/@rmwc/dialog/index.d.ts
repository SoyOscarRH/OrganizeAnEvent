import { CustomEventT } from '@rmwc/base';
import { ButtonPropsT } from '@rmwc/button';
import * as React from 'react';
import { FoundationComponent, Component } from '@rmwc/base';
/** @extends React.Component */
/** The Dialog title. */
export declare class DialogTitle extends Component<{}> {
    static displayName: string;
    tag: string;
    classNames: string[];
}
/** @extends React.Component */
/** The Dialog content. */
export declare class DialogContent extends Component<{}> {
    static displayName: string;
    classNames: string[];
}
/** @extends React.Component */
/** Actions container for the Dialog. */
export declare class DialogActions extends Component<{}> {
    static displayName: string;
    classNames: string[];
}
export declare type DialogButtonPropsT = {
    /** An action returned in evt.detail.action to the onClose handler. */
    action?: string;
    /** Indicates this is the default selected action when pressing enter */
    isDefaultAction?: boolean;
} & ButtonPropsT;
/** Action buttons for the Dialog. */
export declare class DialogButton extends React.Component<DialogButtonPropsT> {
    static displayName: string;
    render(): JSX.Element;
}
export declare type DialogPropsT = {
    /** Whether or not the Dialog is showing. */
    open: boolean;
    /** Callback for when the Dialog opens. */
    onOpen?: (evt: CustomEventT<void>) => any;
    /** Callback for when the Dialog closes. */
    onClose?: (evt: CustomEventT<void>) => any;
};
/** A Dialog component. */
export declare class Dialog extends FoundationComponent<DialogPropsT> {
    static displayName: string;
    root_: null | HTMLElement;
    container_: null | HTMLElement;
    content_: null | HTMLElement;
    buttons_: null | HTMLElement[];
    defaultButton_: null | HTMLElement;
    focusTrap_: any;
    handleInteraction_: any;
    handleDocumentKeydown_: any;
    constructor(props: DialogPropsT);
    open(): void;
    close(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    sync(props: DialogPropsT): void;
    getDefaultFoundation(): any;
    render(): JSX.Element;
}
export declare type SimpleDialogPropsT = {
    /** A title for the default Dialog template. */
    title?: React.ReactNode;
    /** Additional Dialog header content for the default Dialog template. */
    header?: React.ReactNode;
    /** Body content for the default Dialog template, rendered before children. */
    body?: React.ReactNode;
    /** Additional footer content for the default Dialog template, rendered before any buttons. */
    footer?: React.ReactNode;
    /** Creates an accept button for the default Dialog template with a given label. You can pass `null` to remove the button.*/
    acceptLabel?: React.ReactNode;
    /** Creates an cancel button for the default Dialog with a given label. You can pass `null` to remove the button.*/
    cancelLabel?: React.ReactNode;
    /** Any children will be rendered in the body of the default Dialog template. */
    children?: React.ReactNode;
    /** Allow the body to be scrollable */
    scrollable?: boolean;
} & DialogPropsT;
/** A non-standard SimpleDialog component for ease of use. */
export declare class SimpleDialog extends React.Component<SimpleDialogPropsT> {
    static defaultProps: {
        title: undefined;
        header: undefined;
        body: undefined;
        footer: undefined;
        acceptLabel: string;
        cancelLabel: string;
        open: boolean;
        onClose: () => void;
        children: undefined;
    };
    render(): JSX.Element;
}
